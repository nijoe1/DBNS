{
  "address": "0x1741F58771B02DF6448D2f4f62ACDbf0199Ecb6b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_publicResolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_baseNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_gateImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InstanceAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCodeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInstanceAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInstanceCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscribeToGainAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DBNS_NODE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IFNSResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRAR",
      "outputs": [
        {
          "internalType": "contract IFNSRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY",
      "outputs": [
        {
          "internalType": "contract IFNS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TABLELAND",
      "outputs": [
        {
          "internalType": "contract ITablelandTables",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "codeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createDBSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_DBSpace",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createDBSubSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_chatID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_codeIPNS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNSEncryptedKey",
          "type": "string"
        }
      ],
      "name": "createInstanceCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_metadataCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_chatID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNSEncryptedKey",
          "type": "string"
        }
      ],
      "name": "createSpaceInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "extendInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gatedContract",
          "type": "address"
        }
      ],
      "name": "getAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "getDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        }
      ],
      "name": "getRemainingSubscriptionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        }
      ],
      "name": "hasActiveSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasMutateAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "access",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasViewAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "insertNewMerbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instanceSubscription",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "instanceSubscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instances",
      "outputs": [
        {
          "internalType": "address",
          "name": "gatedContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isType",
      "outputs": [
        {
          "internalType": "enum Core.Types",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "purchaseInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "removeMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tableIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_codeID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_metadataCID",
          "type": "string"
        }
      ],
      "name": "updateInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
  "receipt": {
    "to": null,
    "from": "0x044B595C9b94A17Adc489bD29696af40ccb3E4d2",
    "contractAddress": "0x1741F58771B02DF6448D2f4f62ACDbf0199Ecb6b",
    "transactionIndex": 0,
    "gasUsed": "326721095",
    "logsBloom": "0xfff7f6f7fffffffbffffbfffacffffffffafbf7ffdfefffff5ffffffbfffefffffefffbff7ffffbfffdf7fffffdcffbefdffffbfffdeffbfffefffe9ff7ffeffdffffbdffffffffffffbffffffffd7fffffffffffffdffffffffffeffdffef8ffdfffffff7ffe7fbfeeffeffdfdffbfffbf8ffeffffffff7ffdfe7ff7ffffbefffffefffeef7dffffbbf77df7fffeafffffdfffffffaeffff7f77fff7ffbfffcfffedffbfffdf77ffffff7ff7fffff7fff7fbfdfefffef5df7ffddfffffff3fdff7aedff77dffff7feffffdfbdeffffdffff6ef7ffffffeffedbaffffff7ffef57f5fbfffff7ffffffd7ffff7fffffdfffffffffeffff7fb7ff7fcfffffdffff",
    "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953",
    "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b",
          "0x00000000000000000000000000000000000000000000000000000000000002f1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b00000000000000000000000000000000000000000000000000000000000002f100000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000057435245415445205441424c452064625f7370616365735f3331343135392844425370616365494420746578742c20444253756253706163654f66494420746578742c20444253756253706163654e616d65207465787429000000000000000000",
        "logIndex": 1,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b",
          "0x00000000000000000000000000000000000000000000000000000000000002f2"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b00000000000000000000000000000000000000000000000000000000000002f2000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000d0435245415445205441424c452064625f7370616365735f696e7374616e6365735f33313431353928496e7374616e6365494420746578742c20696e7374616e63654f66537061636520746578742c20696e7374616e63655479706520746578742c206d6574616461746143494420746578742c2063686174494420746578742c2049504e5320746578742c2049504e53456e637279707465644b657920746578742c206761746564436f6e747261637420746578742c20707269636520746578742c2063726561746f7220746578742900000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b",
          "0x00000000000000000000000000000000000000000000000000000000000002f3"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b00000000000000000000000000000000000000000000000000000000000002f300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000095435245415445205441424c4520696e7374616e6365735f636f6465735f33313431353928496e7374616e6365494420746578742c20636f6465494420746578742c206e616d6520746578742c2061626f757420746578742c2063686174494420746578742c2049504e5320746578742c2049504e53456e637279707465644b657920746578742c2063726561746f722074657874290000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b",
          "0x00000000000000000000000000000000000000000000000000000000000002f4"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b00000000000000000000000000000000000000000000000000000000000002f400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000050435245415445205441424c4520737562736372697074696f6e735f33313431353928496e7374616e6365494420746578742c207375627363726962657220746578742c20656e6473417420746578742900000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b",
          "0x00000000000000000000000000000000000000000000000000000000000002f5"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x030BCf3D50cad04c2e57391B12740982A9308621",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000001741f58771b02df6448d2f4f62acdbf0199ecb6b00000000000000000000000000000000000000000000000000000000000002f500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000039435245415445205441424c45206d656d626572735f33313431353928496e7374616e6365494420746578742c206d656d62657220746578742900000000000000",
        "logIndex": 9,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1459672,
        "transactionHash": "0x95d41e8afb197e90847e3b6c7476b93a901108e49c96f7084a6cadde4358c749",
        "address": "0x1741F58771B02DF6448D2f4f62ACDbf0199Ecb6b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000044b595c9b94a17adc489bd29696af40ccb3e4d2"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x31517c33d49033aaf64ca5980eccedf47182c7bc20be4e5a142ee50c98a8f953"
      }
    ],
    "blockNumber": 1459672,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x331e3228ca613F52B8E6a0F1EFD7000Cb6DFA581",
    "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
    "0x55608172cD23E7e1c2BD939f1C3210027EbD031a",
    "0x78f6b1389af563cc5c91f234ea46b055e49658d8b999eeb9e0baef7dbbc93fdb",
    "0xf08a2D9F6CF61427e696C211BAB5d43BA73b2AB1"
  ],
  "numDeployments": 5,
  "solcInputHash": "55df34806802bd9258baa67fed47ede1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_publicResolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_baseNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_gateImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InstanceAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCodeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInstanceAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInstanceCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscribeToGainAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DBNS_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IFNSResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRAR\",\"outputs\":[{\"internalType\":\"contract IFNSRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY\",\"outputs\":[{\"internalType\":\"contract IFNS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TABLELAND\",\"outputs\":[{\"internalType\":\"contract ITablelandTables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createDBSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_DBSpace\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createDBSubSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chatID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_codeIPNS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNSEncryptedKey\",\"type\":\"string\"}],\"name\":\"createInstanceCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chatID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNSEncryptedKey\",\"type\":\"string\"}],\"name\":\"createSpaceInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"extendInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatedContract\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"getRemainingSubscriptionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"hasActiveSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasMutateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasViewAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"insertNewMerbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instanceSubscription\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instanceSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gatedContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isType\",\"outputs\":[{\"internalType\":\"enum Core.Types\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"purchaseInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"removeMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tableIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_codeID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_metadataCID\",\"type\":\"string\"}],\"name\":\"updateInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity ENS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions\",\"kind\":\"dev\",\"methods\":{\"createDBSpace(string)\":{\"details\":\"Create a new space under the given node\",\"params\":{\"_name\":\"The name of the new space\"}},\"createDBSubSpace(bytes32,string)\":{\"details\":\"Create a new subnode under the given node\",\"params\":{\"_DBSpace\":\"The parent node\",\"_name\":\"The name of the new subnode\"}},\"createInstanceCode(bytes32,string,string,string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_about\":\"The about of the new instance\",\"_chatID\":\"The chatID of the new instance\",\"_codeIPNS\":\"The IPNS of the new instance\",\"_instance\":\"The parent node\",\"_name\":\"The name of the new instance\"}},\"createSpaceInstance(bytes32,uint256,address[],string,string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_IPNS\":\"The IPNS of the new instance\",\"_chatID\":\"The chatID of the new instance\",\"_members\":\"The hatID of the new instance\",\"_metadataCID\":\"The name of the new instance\",\"_node\":\"The parent node\"}},\"hasViewAccess(bytes32,address)\":{\"details\":\"Check if the sender has access to the given instance\",\"params\":{\"_instance\":\"The instance to check\",\"_sender\":\"The sender to check\"},\"returns\":{\"_0\":\"bool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"DBNS\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DBNS.sol\":\"DBNS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\\\";\\n\\ninterface TablelandTablesImpl is ITablelandTables, IERC721AUpgradeable {}\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Sepolia.\\n    address internal constant ARBITRUM_SEPOLIA =\\n        0x223A74B8323914afDC3ff1e5005564dC17231d6e;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/tableland-js/tree/main/packages/local.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (TablelandTablesImpl) {\\n        if (block.chainid == 1) {\\n            return TablelandTablesImpl(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return TablelandTablesImpl(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return TablelandTablesImpl(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return TablelandTablesImpl(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return TablelandTablesImpl(MATIC);\\n        } else if (block.chainid == 314) {\\n            return TablelandTablesImpl(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return TablelandTablesImpl(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return TablelandTablesImpl(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421614) {\\n            return TablelandTablesImpl(ARBITRUM_SEPOLIA);\\n        } else if (block.chainid == 80001) {\\n            return TablelandTablesImpl(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return TablelandTablesImpl(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return TablelandTablesImpl(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the Tableland gateway base URI for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function getBaseURI() internal view returns (string memory) {\\n        if (block.chainid == 1) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 10) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42161) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42170) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 137) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 11155111) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 420) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 421613) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 80001) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314159) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 31337) {\\n            return \\\"http://localhost:8080/api/v1/\\\";\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad243cc2a9da78a4536c5f67749fa0a6e2646da29acf0c916ae090488b77cfce\",\"license\":\"MIT\"},\"contracts/DBNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Core} from \\\"./libraries/Core.sol\\\";\\n\\n/**\\n * @title DBNS\\n * @dev Create a decentralized Database NameSpaces\\n * Where space and subSpaces can get created and anyone can\\n * create instances inside a space and contribute to the public\\n * this is possible by integrating tableland SQL in solidity\\n * ENS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n */\\ncontract DBNS is Core {\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode,\\n        address _gateImplementation\\n    )\\n        Core(\\n            _registry,\\n            _registrar,\\n            _publicResolver,\\n            _baseNode,\\n            _gateImplementation\\n        )\\n    {}\\n\\n    /**\\n     * @dev Create a new space under the given node\\n     * @param _name The name of the new space\\n     */\\n    function createDBSpace(string calldata _name) public {\\n        bytes32 _newDBSpace = createSubNode(DBNS_NODE, _name);\\n\\n        isType[_newDBSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSpace, DBNS_NODE, _name);\\n    }\\n\\n    /**\\n     * @dev Create a new subnode under the given node\\n     * @param _DBSpace The parent node\\n     * @param _name The name of the new subnode\\n     */\\n    function createDBSubSpace(\\n        bytes32 _DBSpace,\\n        string calldata _name\\n    ) external {\\n        require(\\n            isType[_DBSpace] == Types.SUBNODE,\\n            \\\"DBNS: Node is not a subnode\\\"\\n        );\\n\\n        bytes32 _newDBSubSpace = createSubNode(_DBSpace, _name);\\n\\n        isType[_newDBSubSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSubSpace, _DBSpace, _name);\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _node The parent node\\n     * @param _members The hatID of the new instance\\n     * @param _metadataCID The name of the new instance\\n     * @param _chatID The chatID of the new instance\\n     * @param _IPNS The IPNS of the new instance\\n     */\\n    function createSpaceInstance(\\n        bytes32 _node,\\n        uint _price,\\n        address[] calldata _members,\\n        string calldata _metadataCID,\\n        string calldata _chatID,\\n        string calldata _IPNS,\\n        string calldata _IPNSEncryptedKey\\n    ) external {\\n        require(isType[_node] == Types.SUBNODE, \\\"DBNS: Node is not a subnode\\\");\\n\\n        bytes32 _newDBInstance = keccak256(abi.encodePacked(_node, _IPNS));\\n\\n        if (isType[_newDBInstance] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        address _gatedContract;\\n        if (_members.length > 0) {\\n            _gatedContract = createGatedContract(_members, _newDBInstance);\\n            _insertMembers(_newDBInstance, _members);\\n        }\\n\\n        instances[_newDBInstance] = SpaceInstance(\\n            _gatedContract,\\n            _price,\\n            msg.sender\\n        );\\n\\n        createInstanceType(\\n            _newDBInstance,\\n            _gatedContract,\\n            _price\\n        );\\n\\n        instanceInsertion(\\n            _newDBInstance,\\n            uint8(isType[_newDBInstance]),\\n            _node,\\n            _gatedContract,\\n            _price,\\n            _metadataCID,\\n            _chatID,\\n            _IPNS,\\n            _IPNSEncryptedKey\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _instance The parent node\\n     * @param _name The name of the new instance\\n     * @param _about The about of the new instance\\n     * @param _chatID The chatID of the new instance\\n     * @param _codeIPNS The IPNS of the new instance\\n     */\\n    function createInstanceCode(\\n        bytes32 _instance,\\n        string calldata _name,\\n        string calldata _about,\\n        string calldata _chatID,\\n        string calldata _codeIPNS,\\n        string calldata _IPNSEncryptedKey\\n    ) external {\\n        if (!hasMutateAccess(_instance, msg.sender)) {\\n            revert NoInstanceAccess();\\n        }\\n\\n        bytes32 _newDBInstanceCode = keccak256(\\n            abi.encodePacked(_instance, _codeIPNS)\\n        );\\n\\n        if (isType[_newDBInstanceCode] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        codeOwner[_newDBInstanceCode] = msg.sender;\\n        isType[_newDBInstanceCode] = Types.CODE;\\n\\n        InsertInstanceCode(\\n            _instance,\\n            _newDBInstanceCode,\\n            _name,\\n            _about,\\n            _chatID,\\n            _codeIPNS,\\n            _IPNSEncryptedKey\\n        );\\n    }\\n\\n    function purchaseInstanceSubscription(\\n        bytes32 _instanceID\\n    ) external payable {\\n        purchaseSubscription(_instanceID);\\n        insertSubscription(\\n            _instanceID,\\n            msg.sender,\\n            getTime() + MONTH\\n        );\\n    }\\n\\n    function extendInstanceSubscription(bytes32 _instanceID) external payable {\\n        uint256 remaining = getRemainingSubscriptionTime(\\n            _instanceID,\\n            msg.sender\\n        );\\n        extendSubscription(_instanceID);\\n        insertSubscription(\\n            _instanceID,\\n            msg.sender,\\n            remaining + MONTH\\n        );\\n    }\\n\\n    function updateCode(\\n        bytes32 _codeID,\\n        string calldata _name,\\n        string calldata _about\\n    ) external {\\n        if (codeOwner[_codeID] != msg.sender) {\\n            revert NoCodeOwner();\\n        }\\n        updateInstanceCode(_codeID, _name, _about);\\n    }\\n\\n    function updateInstance(\\n        bytes32 _instanceID,\\n        string calldata _metadataCID\\n    ) external {\\n        if (instances[_instanceID].creator != msg.sender) {\\n            // revert NoInstanceAccess();\\n            revert(\\\"DBNS: No instance access\\\");\\n        }\\n        updateInstanceMetadata(_instanceID, _metadataCID);\\n    }\\n}\\n\",\"keccak256\":\"0x62cb709100e2213a16f3177bcb30f5774c6ffae4d5247a66aaf9273ee38cacfc\",\"license\":\"MIT\"},\"contracts/interfaces/IENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IFNSResolver {\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) external;\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\\ninterface IFNS {\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n}\\n\\ninterface IFNSRegistrar {\\n    function reclaim(uint256 id, address _owner) external;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf40e25db39d4c7385c71959d99e7a4256c226bfcd6129a1fea10e2f34b3c26ca\",\"license\":\"MIT\"},\"contracts/libraries/Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {FNS} from \\\"./FNS.sol\\\";\\n\\nimport {Gated, IGated} from \\\"./Gated.sol\\\";\\n\\nimport {Tableland} from \\\"./Tableland.sol\\\";\\n\\nimport {Subscriptions} from \\\"./Subscriptions.sol\\\";\\n\\n/**\\n * @title Core\\n * @dev Interface for the Ens system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract Core is FNS, Gated, Tableland, Subscriptions {\\n    enum Types {\\n        NULL,\\n        PAID_PRIVATE_INSTANCE,\\n        OPEN_PRIVATE_INSTANCE,\\n        PAID_INSTANCE,\\n        OPEN_INSTANCE,\\n        SUBNODE,\\n        CODE\\n    }\\n\\n    struct SpaceInstance {\\n        address gatedContract;\\n        uint256 price;\\n        address creator;\\n    }\\n\\n    mapping(bytes32 => SpaceInstance) public instances;\\n\\n    mapping(bytes32 => address) public codeOwner;\\n\\n    mapping(bytes32 => Types) public isType;\\n\\n    error NoCodeOwner();\\n\\n    error InstanceAlreadyExists();\\n\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode,\\n        address _gatedImplementation\\n    )\\n        FNS(_registry, _registrar, _publicResolver, _baseNode)\\n        Gated(_gatedImplementation)\\n        Tableland()\\n    {}\\n\\n    /**\\n     * @dev createInstanceType\\n     * @param _newDBInstance The new instance\\n     * @param _gatedContract The gatedContract of the new instance\\n     * @param _price The price of the new instance\\n     */\\n    function createInstanceType(\\n        bytes32 _newDBInstance,\\n        address _gatedContract,\\n        uint _price\\n    ) internal  {\\n        bool _isPrivate = _gatedContract != address(0);\\n        if (_price > 0) {\\n            isType[_newDBInstance] = Types.PAID_INSTANCE;\\n            createSubscription(_price,  _newDBInstance);\\n        } else if (_isPrivate && _price > 0) {\\n            isType[_newDBInstance] = Types.PAID_PRIVATE_INSTANCE;\\n            createSubscription(_price, _newDBInstance);\\n        } else if (_isPrivate) {\\n            isType[_newDBInstance] = Types.OPEN_PRIVATE_INSTANCE;\\n        } else {\\n            isType[_newDBInstance] = Types.OPEN_INSTANCE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if the sender has access to the given instance\\n     * @param _instance The instance to check\\n     * @param _sender The sender to check\\n     * @return bool\\n     */\\n    function hasViewAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        if (isType[_instance] == Types.PAID_INSTANCE) {\\n            return hasActiveSubscription(_instance, _sender);\\n        } else if (isType[_instance] == Types.PAID_PRIVATE_INSTANCE) {\\n            return\\n                getAccess(_sender, _gatedAddress) ||\\n                hasActiveSubscription(_instance, _sender);\\n        } else if (\\n            isType[_instance] == Types.OPEN_PRIVATE_INSTANCE ||\\n            isType[_instance] == Types.OPEN_INSTANCE\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function hasMutateAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool access) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        Types _instanceType = isType[_instance];\\n        if (_instanceType == Types.PAID_INSTANCE) {\\n            access = instances[_instance].creator == _sender;\\n        } else if (_instanceType == Types.PAID_PRIVATE_INSTANCE) {\\n            access = getAccess(_sender, _gatedAddress);\\n        } else if (_instanceType == Types.OPEN_PRIVATE_INSTANCE) {\\n            access = getAccess(_sender, _gatedAddress);\\n        } else if (_instanceType == Types.OPEN_INSTANCE) {\\n            access = true;\\n        }\\n        uint8 _isType = uint8(_instanceType);\\n        if (_isType > 4 || _instanceType == Types.NULL) {\\n            access = false;\\n        }\\n    }\\n\\n    function insertNewMerbers(\\n        bytes32 _instance,\\n        address[] memory _members\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).mint(_members);\\n        }\\n        _insertMembers(_instance, _members);\\n    }\\n\\n    function removeMembers(\\n        bytes32 _instance,\\n        address[] memory _members\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).burn(_members);\\n        }\\n        _removeMembers(_instance, _members);\\n    }\\n}\\n\",\"keccak256\":\"0xeb29d93ec912b224307e4e86df89f69605bac22fcf2da25a881bd853c1171b98\",\"license\":\"MIT\"},\"contracts/libraries/FNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IFNSResolver, IFNS, IFNSRegistrar} from \\\"../interfaces/IENSResolver.sol\\\";\\n\\n/**\\n * @title FNS\\n * @dev Interface for the FNS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract FNS is IERC721Receiver {\\n    IFNS public immutable REGISTRY;\\n    IFNSRegistrar public immutable REGISTRAR;\\n    IFNSResolver public immutable PUBLIC_RESOLVER;\\n\\n    bytes32 public DBNS_NODE;\\n    bytes32 private immutable BASE_NODE;\\n    uint256 public DOMAIN_ID;\\n\\n    error NoInstanceAccess();\\n    error InvalidTokenAmount();\\n    error InvalidTokenSender();\\n\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode\\n    ) {\\n        REGISTRY = IFNS(_registry);\\n        REGISTRAR = IFNSRegistrar(_registrar);\\n        PUBLIC_RESOLVER = IFNSResolver(_publicResolver);\\n        BASE_NODE = _baseNode;\\n    }\\n\\n    /*\\n     * @dev Function to create a new subnode.\\n     * @param {bytes32} node - Parent node.\\n     * @param {string} subNode - Subnode name.\\n     * @return {bytes32} - New subnode.\\n     */\\n    function createSubNode(\\n        bytes32 parentNode,\\n        string memory subNode\\n    ) internal returns (bytes32 newSubNode) {\\n        bytes32 label = keccak256(bytes(subNode));\\n\\n        // REGISTRY.setSubnodeRecord(\\n        //     // Gaming character subnode\\n        //     parentNode,\\n        //     // Character tokenID as sub.subdomain to the gaming character subdomain\\n        //     label,\\n        //     // Owner\\n        //     address(this),\\n        //     // Resolver\\n        //     address(PUBLIC_RESOLVER),\\n        //     // TTL\\n        //     0\\n        // );\\n\\n        newSubNode = _makeNode(parentNode, label);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(REGISTRAR)) {\\n            revert InvalidTokenSender();\\n        }\\n\\n        if (DBNS_NODE == bytes32(0)) {\\n            DOMAIN_ID = tokenId;\\n            DBNS_NODE = _makeNode(BASE_NODE, bytes32(tokenId));\\n        }\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function _makeNode(\\n        bytes32 node,\\n        bytes32 labelhash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(node, labelhash));\\n    }\\n}\\n\",\"keccak256\":\"0xbecf9ebfe19b158a62c3f93ac7a451578e9752ef0ee1f763e586ba9c2c91bed0\",\"license\":\"MIT\"},\"contracts/libraries/Gated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IGated {\\n    function mint(address[] memory newMembers) external;\\n\\n    function burn(address[] memory _members) external;\\n}\\n\\nabstract contract Gated {\\n    address internal implementation;\\n\\n    // Constructor\\n    constructor(address _implementation) {\\n        implementation = _implementation;\\n    }\\n\\n    // Function to create a new OptimisticResolver contract and associate it with a schema\\n    function createGatedContract(\\n        address[] memory _members,\\n        bytes32 salt\\n    ) internal returns (address accessControlClone) {\\n        // Create new resolver contract\\n        accessControlClone = Clones.cloneDeterministic(implementation, salt);\\n\\n        (bool success, ) = accessControlClone.call(\\n            abi.encodeWithSignature(\\\"initialize(address[])\\\", _members)\\n        );\\n\\n        require(success, \\\"error deploying\\\");\\n    }\\n\\n    function getDeterministicAddress(\\n        bytes32 _salt\\n    ) public view returns (address) {\\n        return Clones.predictDeterministicAddress(implementation, _salt);\\n    }\\n\\n    function getAccess(\\n        address _sender,\\n        address _gatedContract\\n    ) public view returns (bool) {\\n        return\\n            _gatedContract == address(0)\\n                ? false\\n                : IERC721(_gatedContract).balanceOf(_sender) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf5a2fc8ad9e9b3b34d8514a20d8cd0e31b2804641baf3913ce0de8c959ae253e\",\"license\":\"MIT\"},\"contracts/libraries/Subscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Subscriptions is Ownable {\\n    error SubscribeToGainAccess();\\n    error NoInstanceCreator();\\n\\n    uint256 internal constant MONTH = 30 days;\\n    uint256 internal constant MAX = type(uint256).max;\\n\\n    struct InstanceStruct {\\n        address creator;\\n        uint256 prize;\\n    }\\n\\n    mapping(bytes32 => mapping(address => uint256))\\n        public instanceSubscriptions;\\n\\n    mapping(bytes32 => InstanceStruct) public instanceSubscription;\\n\\n\\n    function createSubscription(\\n        uint _keyPrice,\\n        bytes32 _instanceID\\n    ) internal {\\n\\n        instanceSubscription[_instanceID] = InstanceStruct({\\n            creator: msg.sender,\\n            prize: _keyPrice\\n        });\\n    }\\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _instanceID to subscribe\\n     */\\n    function purchaseSubscription(\\n        bytes32 _instanceID\\n    ) internal{\\n\\n        uint256 _priceToPay = instanceSubscription[_instanceID].prize;\\n        require(_priceToPay == msg.value, \\\"DBNS: No price set for this instance\\\");\\n\\n        instanceSubscriptions[_instanceID][msg.sender] = block.timestamp + MONTH;\\n\\n        Address.sendValue(payable(instanceSubscription[_instanceID].creator), msg.value * 99 / 100);\\n    }\\n\\n    function extendSubscription(\\n        bytes32 _instanceID\\n    ) internal {\\n        uint256 _priceToPay = instanceSubscription[_instanceID].prize;\\n\\n        require(_priceToPay == msg.value, \\\"DBNS: No price set for this instance\\\");\\n\\n        instanceSubscriptions[_instanceID][msg.sender] += MONTH;\\n\\n        Address.sendValue(payable(instanceSubscription[_instanceID].creator), msg.value * 99 / 100);\\n\\n    }\\n\\n    function hasActiveSubscription(\\n        bytes32 _instanceID,\\n        address _subscriber\\n    ) public view returns (bool) {\\n        return\\n            instanceSubscriptions[_instanceID][_subscriber] > getTime();\\n    }\\n\\n    function getRemainingSubscriptionTime(\\n        bytes32 _instanceID,\\n        address _subscriber\\n    ) public view returns (uint256) {\\n        uint256 _subscriptionTime = instanceSubscriptions[_instanceID][_subscriber];\\n        if (_subscriptionTime < getTime()) {\\n            return 0;\\n        }\\n        return _subscriptionTime - getTime();\\n            \\n    }\\n\\n    function getTime() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    // Function to receive Ethers\\n    receive() external payable {}\\n\\n    // Function to withdraw the platform income\\n    function withdraw() external onlyOwner {\\n        address payable withdrawer = payable(msg.sender);\\n\\n        Address.sendValue(withdrawer, address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0xeef545cbf67266ac6e2a099df786f222520838bd6057d71ddb4ed7ee179f6bd9\",\"license\":\"MIT\"},\"contracts/libraries/Tableland.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {TablelandDeployments} from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport {ITablelandTables} from \\\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\\\";\\n\\nimport {SQLHelpers} from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract Tableland {\\n    ITablelandTables public immutable TABLELAND;\\n\\n    string[] internal createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256[] public tableIDs;\\n\\n    string internal constant DBSPACES_TABLE_PREFIX = \\\"db_spaces\\\";\\n\\n    string internal constant DBSPACES_SCHEMA =\\n        \\\"DBSpaceID text, DBSubSpaceOfID text, DBSubSpaceName text\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_TABLE_PREFIX =\\n        \\\"db_spaces_instances\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_SCHEMA =\\n        \\\"InstanceID text, instanceOfSpace text, instanceType text, metadataCID text, chatID text, IPNS text, IPNSEncryptedKey text, gatedContract text, price text, creator text\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_TABLE_PREFIX =\\n        \\\"instances_codes\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_SCHEMA =\\n        \\\"InstanceID text, codeID text, name text, about text, chatID text, IPNS text, IPNSEncryptedKey text, creator text\\\";\\n\\n    string internal constant SUBSCRIPTIONS_TABLE_PREFIX = \\\"subscriptions\\\";\\n\\n    string internal constant SUBSCRIPTIONS_SCHEMA =\\n        \\\"InstanceID text, subscriber text, endsAt text\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_TABLE_PREFIX = \\\"members\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_SCHEMA =\\n        \\\"InstanceID text, member text\\\";\\n\\n    constructor() {\\n        TABLELAND = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_SCHEMA,\\n                DBSPACES_TABLE_PREFIX\\n            )\\n        );\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_INSTANCES_SCHEMA,\\n                DBSPACES_INSTANCES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_CODES_SCHEMA,\\n                DB_INSTANCES_CODES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                SUBSCRIPTIONS_SCHEMA,\\n                SUBSCRIPTIONS_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_MEMBERS_SCHEMA,\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX\\n            )\\n        );\\n\\n        tableIDs = TABLELAND.create(address(this), createTableStatements);\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(DBSPACES_TABLE_PREFIX, tableIDs[0])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1]\\n            )\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2]\\n            )\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(SUBSCRIPTIONS_TABLE_PREFIX, tableIDs[3])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                tableIDs[4]\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new space.\\n     * @param {bytes32} DBSpaceID - DBSpace ID.\\n     * @param {bytes32} DBSubSpaceOfID - DBSubSpaceOf ID.\\n     * @param {string} DBSpaceName - Name of the space.\\n     * @param {string} DBSubSpaceOfName - Name of the sub space.\\n     */\\n\\n    function spaceInsertion(\\n        bytes32 DBSpaceID,\\n        bytes32 DBSubSpaceOfID,\\n        string memory DBSubSpaceName\\n    ) internal {\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                DBSPACES_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"DBSpaceID, DBSubSpaceOfID, DBSubSpaceName\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(DBSpaceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(DBSubSpaceOfID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(DBSubSpaceName)\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {bytes32} instanceOfSpace - DBSpace ID.\\n     * @param {string} name - Name of the instance.\\n     * @param {string} about - About of the instance.\\n     * @param {string} img - Image of the instance.\\n     * @param {string} chatID - Chat ID of the instance.\\n     * @param {string} IPNS - IPNS of the instance.\\n     * @param {string} IPNSEncryptedKey - Creator of the instance.\\n     */\\n\\n    function instanceInsertion(\\n        bytes32 _instanceID,\\n        uint8 _lockType,\\n        bytes32 _instanceOfSpace,\\n        address _gatedContract,\\n        uint256 price,\\n        string memory metadataCID,\\n        string memory chatID,\\n        string memory IPNS,\\n        string memory IPNSEncryptedKey\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toInsert(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                \\\"InstanceID, instanceOfSpace, instanceType, metadataCID, chatID, IPNS, IPNSEncryptedKey, gatedContract, price, creator\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_instanceOfSpace)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(_lockType)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(metadataCID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(chatID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNSEncryptedKey),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(_gatedContract)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(price)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(msg.sender))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance code.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {string} name - Name of the instance code.\\n     * @param {string} about - About of the instance code.\\n     * @param {string} chatID - Chat ID of the instance code.\\n     * @param {string} codeIPNS - IPNS of the instance code.\\n     * @param {string} IPNSEncryptedKey - Creator of the instance code.\\n     */\\n\\n    function InsertInstanceCode(\\n        bytes32 _instanceID,\\n        bytes32 _codeID,\\n        string memory name,\\n        string memory about,\\n        string memory chatID,\\n        string memory codeIPNS,\\n        string memory IPNSEncryptedKey\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"InstanceID, codeID, name, about, chatID, IPNS, IPNSEncryptedKey, creator\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_codeID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(name),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(about),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(chatID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(codeIPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNSEncryptedKey),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(msg.sender))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceMetadata(\\n        bytes32 InstanceID,\\n        string memory metadataCID\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toUpdate(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                string.concat(\\\"metadataCID = \\\", SQLHelpers.quote(metadataCID)),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceCode(\\n        bytes32 codeID,\\n        string memory name,\\n        string memory about\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toUpdate(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                string.concat(\\n                    \\\"name = \\\",\\n                    SQLHelpers.quote(name),\\n                    \\\", about = \\\",\\n                    SQLHelpers.quote(about)\\n                ),\\n                string.concat(\\n                    \\\"codeID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(codeID))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new subscription.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address} subscriber - Subscriber address.\\n     * @param {uint256} tokenID - Subscription token ID.\\n     * @param {uint256} endsAt - Subscription end date.\\n     */\\n    function insertSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"InstanceID, subscriber, endsAt\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toUpdate(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                string.concat(\\n                    \\\"endsAt = \\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                ),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\" AND subscriber = \\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert the members.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address[]} members - Members address array.\\n     */\\n    function _insertMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toInsert(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    \\\"InstanceID, member\\\",\\n                    string.concat(\\n                        SQLHelpers.quote(id),\\n                        \\\",\\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _removeMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toDelete(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    string.concat(\\n                        \\\"InstanceID = \\\",\\n                        SQLHelpers.quote(id),\\n                        \\\" AND member = \\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @dev Internal function to convert bytes32 to string.\\n     * @param {bytes32} data - Data to convert.\\n     * @return {string} - Converted data.\\n     */\\n\\n    function bytes32ToString(\\n        bytes32 data\\n    ) internal pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        TABLELAND.mutate(address(this), tableId, statement);\\n    }\\n}\\n\",\"keccak256\":\"0x8c6da3954f82b1c046ff412e29879309c6bd047c50c81c6a89c857f9c6acad0e\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    /**\\n     * `_sequentialUpTo()` must be greater than `_startTokenId()`.\\n     */\\n    error SequentialUpToTooSmall();\\n\\n    /**\\n     * The `tokenId` of a sequential mint exceeds `_sequentialUpTo()`.\\n     */\\n    error SequentialMintExceedsLimit();\\n\\n    /**\\n     * Spot minting requires a `tokenId` greater than `_sequentialUpTo()`.\\n     */\\n    error SpotMintTokenIdTooSmall();\\n\\n    /**\\n     * Cannot mint over a token that already exists.\\n     */\\n    error TokenAlreadyExists();\\n\\n    /**\\n     * The feature is not compatible with spot mints.\\n     */\\n    error NotCompatibleWithSpotMints();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xaeabed185f4b889c097e61ef486a003e64cdc2d048b569ebcd315ff52a63367b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012060409080825234620008f05760a0816200428280380380916200002682856200092d565b833981010312620008f0576200003c8162000951565b60206200004b81840162000951565b926200005985820162000951565b926200006d60806060840151930162000951565b6001600160a01b0391821660805294811660a05292831660c05260e052600280549383166001600160a01b031994851617905590919082620000ae62001014565b16610100526200012d620001278551620000c881620008f5565b603881527f44425370616365494420746578742c20444253756253706163654f6649442074848201527f6578742c20444253756253706163654e616d6520746578740000000000000000878201526200012062000982565b9062000f97565b62000a31565b83516001600160401b03949060e0810186811182821017620008da576200022f916200012791845260a781527f496e7374616e6365494420746578742c20696e7374616e63654f665370616365858201527f20746578742c20696e7374616e63655479706520746578742c206d6574616461848201527f746143494420746578742c2063686174494420746578742c2049504e5320746560608201527f78742c2049504e53456e637279707465644b657920746578742c20676174656460808201527f436f6e747261637420746578742c20707269636520746578742c20637265617460a0820152661bdc881d195e1d60ca1b60c08201526200012062000cc6565b805160a0810181811087821117620008da57620002e49162000127918452607081527f496e7374616e6365494420746578742c20636f6465494420746578742c206e61858201527f6d6520746578742c2061626f757420746578742c206368617449442074657874848201527f2c2049504e5320746578742c2049504e53456e637279707465644b657920746560608201526f1e1d0b0818dc99585d1bdc881d195e1d60821b60808201526200012062000d01565b62000341620001278251620002f981620008f5565b602d81527f496e7374616e6365494420746578742c20737562736372696265722074657874858201526c0b08195b991cd05d081d195e1d609a1b848201526200012062000d2e565b62000389620001278251620003568162000911565b601c81527f496e7374616e6365494420746578742c206d656d626572207465787400000000858201526200012062000d59565b8361010051168151906361a23d0f60e01b8252604482019360049230848201526024928584830152600354809752606482019682600592606483851b83010160009a8b94600386528886209186905b8282106200082a57505050508383809203925af1918215620008205787926200077d575b5081518a81116200076b5768010000000000000000928382116200075957849083548385558084106200073c575b5001828952848920895b8381106200072957505050506200044a62000982565b8154156200071757620004696200046f91838a52858a20549062000dab565b62000ba3565b6200047962000cc6565b93815494600195861015620007055762000469620004a191848b5287878c2001549062000dab565b620004ab62000d01565b825460021015620007055762000469620004d091848b526002878c2001549062000dab565b620004da62000d2e565b825460031015620007055762000469620004ff91848b526003878c2001549062000dab565b6200050962000d59565b82548710156200070557828952848920870154620005279162000dab565b92865490811015620006f35780866200054392018855620009a9565b969096620006e35783519b8c11620006d257505089620005648654620009db565b601f811162000694575b50505081601f8a116001146200061b575097809281928798999a6000805160206200426283398151915298946200060f575b50501b916000199060031b1c19161790555b60065493339085161760065551933393169180a361309c9081620011c6823960805181611ccd015260a0518181816105c70152611a78015260c051816101bc015260e05181611aca0152610100518181816105820152612fd90152f35b015192503880620005a0565b909891601f198316998588528288209288905b8c82106200067c575050836000805160206200426283398151915298999a9b1062000662575b505050811b019055620005b2565b015160001960f88460031b161c1916905538808062000654565b8087859682949686015181550195019301906200062e565b620006be92878a52858a209186601f8501831c84019410620006c7575b601f01901c019062000a18565b3889816200056e565b9192508291620006b1565b634e487b7160e01b89526041905287fd5b634e487b7160e01b895288905287fd5b50634e487b7160e01b88526041865287fd5b50634e487b7160e01b88526032865287fd5b634e487b7160e01b8852603286528488fd5b8251828201559186019160010162000434565b848b52828b206200075291810190850162000a18565b386200042a565b634e487b7160e01b8952604187528589fd5b634e487b7160e01b8852604186528488fd5b9091503d8088833e6200079181836200092d565b810190838183031262000818578051908b82116200081c57019080601f8301121562000818578151918b8311620007595782841b90885193620007d7878401866200092d565b84528580850192820101928311620008145785809101915b8383106200080357505050509038620003fc565b8251815291810191869101620007ef565b8980fd5b8780fd5b8880fd5b86513d89823e3d90fd5b9295509290939550606319888203018252888d808754936200084c85620009db565b808252600195808716908115620008bd575060011462000881575b50505091600192960192019201928c9593889593620003d8565b90919492508885528385205b818610620008a65750919301820190508e388062000867565b805483870186015293909401938c9383016200088d565b60ff1916838701525015158b1b01830191508f9050388062000867565b634e487b7160e01b600052604160045260246000fd5b600080fd5b606081019081106001600160401b03821117620008da57604052565b604081019081106001600160401b03821117620008da57604052565b601f909101601f19168101906001600160401b03821190821017620008da57604052565b51906001600160a01b0382168203620008f057565b6001600160401b038111620008da57601f01601f191660200190565b60405190620009918262000911565b600982526864625f73706163657360b81b6020830152565b600454811015620009c557600460005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c9216801562000a0d575b6020831014620009f757565b634e487b7160e01b600052602260045260246000fd5b91607f1691620009eb565b81811062000a24575050565b6000815560010162000a18565b60035468010000000000000000811015620008da5760019182820180600355821015620009c5576003600090815281517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90930193602093929091906001600160401b03841162000b8f5762000aa88654620009db565b601f811162000b51575b508491601f851160011462000aee57939450849291908362000ae2575b50501b916000199060031b1c1916179055565b01519250388062000acf565b86815285812093958591601f198316915b8883831062000b36575050501062000b1c575b505050811b019055565b015160001960f88460031b161c1916905538808062000b12565b85870151885590960195948501948793509081019062000aff565b62000b7d90878452868420601f870160051c81019188881062000b84575b601f0160051c019062000a18565b3862000ab2565b909150819062000b6f565b634e487b7160e01b82526041600452602482fd5b60045468010000000000000000811015620008da5762000bcb600191828101600455620009a9565b92909262000cb0578051906001600160401b038211620008da5762000bf18454620009db565b601f811162000c7a575b5060209081601f841160011462000c2e575092829391839260009462000ae25750501b916000199060031b1c1916179055565b919083601f1981168760005284600020946000905b8883831062000c5f575050501062000b1c57505050811b019055565b85870151885590960195948501948793509081019062000c43565b62000ca990856000526020600020601f850160051c8101916020861062000b8457601f0160051c019062000a18565b3862000bfb565b634e487b7160e01b600052600060045260246000fd5b6040519062000cd58262000911565b601382527f64625f7370616365735f696e7374616e636573000000000000000000000000006020830152565b6040519062000d108262000911565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b6040519062000d3d8262000911565b600d82526c737562736372697074696f6e7360981b6020830152565b6040519062000d688262000911565b60078252666d656d6265727360c81b6020830152565b9081519160005b83811062000d97575050016000815290565b806020809284010151818501520162000d85565b62000e149062000e0562000de793600162000dd162000dca4662000e17565b9262000e17565b9162000dfa604051978896602088019062000d7e565b9183605f60f81b93848152019062000d7e565b908152019062000d7e565b03601f1981018352826200092d565b90565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101562000f88575b506d04ee2d6d415b85acef81000000008083101562000f78575b50662386f26fc100008083101562000f68575b506305f5e1008083101562000f58575b506127108083101562000f48575b50606482101562000f37575b600a8092101562000f2c575b6001908160218186019562000eb98762000966565b9662000ec960405198896200092d565b80885262000eda601f199162000966565b01366020890137860101905b62000ef3575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821562000f265791908262000ee6565b62000eec565b916001019162000ea4565b919060646002910491019162000e98565b6004919392049101913862000e8c565b6008919392049101913862000e7e565b6010919392049101913862000e6e565b6020919392049101913862000e5b565b60409350810491503862000e41565b600162000fdf9262000ffd62000e14938362000fee62000fb74662000e17565b82604051998a976c021a922a0aa22902a20a126229609d1b60208a0152602d89019062000d7e565b605f60f81b8152019062000d7e565b600560fb1b8152019062000d7e565b602960f81b815203601e198101845201826200092d565b46600103620010355773012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03620010565773fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b1036200107857739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba036200109a57731a22854c5b1642760a827f20137a67930ae108d290565b46608903620010bb57735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a03620010dd577359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703620011005773c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403620011225773c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eee03620011455773223a74b8323914afdc3ff1e5005564dc17231d6e90565b4662013881036200116857734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f036200118b5773030bcf3d50cad04c2e57391b12740982a930862190565b46617a6903620011ad5773e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b8152466004820152602490fdfe60a080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816306433b1b14611cb9575080630c9ddf6d14611b3c57806311ad2f3414611b09578063150b7a0214611a2e5780632711447f146119e1578063284e82e8146119125780633ac27522146111d45780633ccfd60b146111b15780633e203835146111825780633ec29e721461103057806347d121c514611009578063557ed1ba14610fee57806367e0970914610f51578063715018a614610ef357806371671bf214610dc75780637a9b777414610d51578063820cc55714610d3357806383a8b3d01461092857806384ec9653146108fb57806388975383146108d45780638a8fd2501461087e5780638da5cb5b146108555780639ad66a231461079a578063a58dcc951461071a578063a5df63d6146106c7578063ba0d18aa1461068c578063bfc51b7e146105f6578063cb609077146105b1578063d68d087c1461056c578063db7baba91461054f578063dd321bfc14610508578063e0cf1e4c14610301578063e2b1e4ed146102b4578063f2fde38b146101ee5763ffeb4a300361000f57346101eb57806003193601126101eb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b50346101eb5760203660031901126101eb57610208611d2e565b61021061200e565b6001600160a01b0390811690811561026057600654826001600160601b0360a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101eb5760203660031901126101eb576004358152600b60205260ff6040822054166040519060078110156102ed57602092508152f35b634e487b7160e01b83526021600452602483fd5b50346101eb5761031036611e5d565b818392935260209060098252604083209360018060a01b039461033e86600281845416930154163314612319565b806104a2575b5061034e90612eb3565b91835b825181101561049e5761049990610494660102ba422a922960cd1b886104378861048d896103b28a610381611f24565b969054978b6103be6103b9610394612d86565b9361039d611f24565b989054946103ac60039d612a0b565b9a612da9565b5116612a7a565b612a0b565b9461042e6040519687878101996c024b739ba30b731b2a4a2101e9609d1b8b526d01020a7221036b2b6b132b9101e960951b815161040481602d948d8688019101611fc6565b83019182015282519061041f82603b958c8785019101611fc6565b0103601b810189520187611dd6565b881b1c90612826565b916040519889936b02222a622aa2290232927a6960a51b8486015261046681518092602c968789019101611fc6565b840192830152519061047e8260339586840190611fc6565b01036013810187520185611dd6565b1b1c612fd7565b612d61565b610351565b8480f35b803b156105045784604051809263362eb0ab60e11b82528183816104c98960048301612351565b03925af180156104f9579085916104e1575b50610344565b6104ea90611d8d565b6104f55783386104db565b8380fd5b6040513d87823e3d90fd5b8480fd5b50346101eb5760403660031901126101eb576040610524611d44565b9160043581526007602052209060018060a01b03166000526020526020604060002054604051908152f35b50346101eb57806003193601126101eb5760209054604051908152f35b50346101eb57806003193601126101eb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101eb57806003193601126101eb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101eb5761060536611d5a565b909291808352600b60205260ff6040842054166007811015610678576106759394610635600561066f93146120b8565b610650610643368684612081565b6020815191012084612395565b808752600b60205260408720805460ff19166005179055933691612081565b916126c9565b80f35b634e487b7160e01b84526021600452602484fd5b50346101eb5760203660031901126101eb576040809160043581526008602052206001808060a01b0382541691015482519182526020820152f35b50346101eb5760403660031901126101eb5760206107106106e6611d44565b600435600052600760205260406000209060018060a01b0316600052602052604060002054421090565b6040519015158152f35b50346101eb5760203660031901126101eb57602060018060a01b03605560438260025416604051903060388301526f5af43d82803e903d91602b57fd5bf3ff60248301526014820152733d602d80600a3d3981f3363d3d373d3d3d363d73815260043560588201526037600c820120607882015201209060405191168152f35b5060203660031901126101eb576004359081815260086020526107c5600160408320015434146124d5565b62278d004201804211610841578282526007602052604082203360005260205280604060002055828252600860205260018060a01b0360408320541692606334023481046063143415171561082d576106759394606461082692049061252d565b3390612cb1565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b82526011600452602482fd5b50346101eb57806003193601126101eb576006546040516001600160a01b039091168152602090f35b50346101eb5760203660031901126101eb576004356005548110156108d05760209060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154604051908152f35b5080fd5b50346101eb5760403660031901126101eb5760206107106108f3611d44565b600435612235565b50346101eb5760403660031901126101eb57602061071061091a611d2e565b610922611d44565b906123e9565b50346101eb5760c03660031901126101eb576004356024356001600160401b038111610d2f5761095c903690600401611cfc565b6044929192356001600160401b0381116105045761097e903690600401611cfc565b9190926064356001600160401b038111610d2b576109a0903690600401611cfc565b91906084356001600160401b038111610d27576109c1903690600401611cfc565b969060a4356001600160401b038111610d23576109e2903690600401611cfc565b9390926109ef3387612235565b15610d11578b9a8b988b6040518060209c8d8201938c8552808a60408501378201906040820152038c81018252604001610a299082611dd6565b519020809d528d600b8b52604090205460ff166007811015610cfd57610ceb578c8e52600a8a526040808f208054336001600160a01b0319909116179055600b8b528e20805460ff19166006179055610a8491369190612081565b983690610a9092612081565b953690610a9c92612081565b973690610aa892612081565b913690610ab492612081565b96610abd611ea0565b97905496610ac9612b92565b93610ad2611ea0565b9b905496610adf90612eb3565b610ae890612a0b565b94610af290612eb3565b610afb90612a0b565b92610b0590612a0b565b97610b0f90612a0b565b93610b1990612a0b565b91610b2390612a0b565b90610b2d90612a0b565b91610b3733612a7a565b610b4090612a0b565b948a6040519a888c9951908184808d01920191610b5c92611fc6565b890196600b60fa1b978884820152815191828560218401920191610b7f92611fc6565b01908760218301528051809360228401920191610b9b92611fc6565b01856022820152815191828d60238401920191610bb792611fc6565b01846023820152815191828c60248401920191610bd392611fc6565b01836024820152815191828b60258401920191610bef92611fc6565b01826025820152815191828a60268401920191610c0b92611fc6565b01906026820152815191828860278401920191610c2792611fc6565b0103600781018452602701610c3c9084611dd6565b6040519160808301978389106001600160401b038a1117610cd5577f496e7374616e636549442c20636f646549442c206e616d652c2061626f75742c610ccb966106759a604052604886528501527f206368617449442c2049504e532c2049504e53456e637279707465644b65792c6040850152671031b932b0ba37b960c11b606085015260031b1c90612786565b9160031b1c612fd7565b634e487b7160e01b600052604160045260246000fd5b604051631144626f60e01b8152600490fd5b634e487b7160e01b8f52602160045260248ffd5b6040516346627df160e01b8152600490fd5b8a80fd5b8880fd5b8680fd5b8280fd5b50346101eb57806003193601126101eb576020600154604051908152f35b50346101eb5760203660031901126101eb576004356001600160401b0381116108d057610d85610675913690600401611cfc565b61066f610da58554610d98368587612081565b6020815191012090612395565b92838652600b60205260408620600560ff198254161790558554923691612081565b50346101eb576020806003193601126108d057600435600454811015610d2f5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190604051918381549460019086821c93828816978815610ee9575b8686108914610ed557868899878a98999a529182600014610eb1575050600114610e75575b505050610e5d92500383611dd6565b610e71604051928284938452830190611fe9565b0390f35b869350819291528282205b858310610e99575050610e5d9350820101388080610e4e565b80548389018501528794508693909201918101610e80565b935094505050610e5d94915060ff191682840152151560051b820101388080610e4e565b634e487b7160e01b83526022600452602483fd5b94607f1694610e29565b50346101eb57806003193601126101eb57610f0c61200e565b600680546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101eb57610f6036611e5d565b8183929352600960205260408220610f8960018060a01b03600281845416930154163314612319565b80610f9a575b506106759192612dbd565b803b15610d2f57826040518092632f41d6e160e21b8252818381610fc18860048301612351565b03925af18015610fe35715610f8f5791610fdd61067593611d8d565b91610f8f565b6040513d85823e3d90fd5b50346101eb57806003193601126101eb576020604051428152f35b50346101eb5760403660031901126101eb576020610710611028611d44565b600435612104565b50346101eb5761103f36611d5a565b82845260096020908152604085206002015490939291906001600160a01b0316330361113d5761112361107c610675959493610ccb933691612081565b92611085611eed565b959054946110b1611133602d611099612a4b565b946110f96103b96110a8611eed565b96905497612a0b565b986110f4602e604051809c6d036b2ba30b230ba30a1a4a2101e960951b888301526110e4815180928a8686019101611fc6565b810103600e81018d52018b611dd6565b612eb3565b60405198826c024b739ba30b731b2a4a2101e9609d1b8b9485015282519283918686019101611fc6565b810103600d810188520186611dd6565b60031b1c90612bbd565b60405162461bcd60e51b815260048101859052601860248201527f44424e533a204e6f20696e7374616e63652061636365737300000000000000006044820152606490fd5b50346101eb5760403660031901126101eb5760206111a96111a1611d44565b600435612608565b604051908152f35b50346101eb57806003193601126101eb576111ca61200e565b610675473361252d565b50346101eb5760e03660031901126101eb576001600160401b03604435116101eb573660236044350112156101eb576001600160401b0360443560040135116101eb573660246044356004013560051b6044350101116101eb576064356001600160401b0381116108d05761124d903690600401611cfc565b91906084356001600160401b038111610d2f5761126e903690600401611cfc565b919060a4356001600160401b0381116105045761128f903690600401611cfc565b939060c4356001600160401b038111610d2b576112b0903690600401611cfc565b916004358852600b60205260ff60408920541660078110156118fe5760056112d891146120b8565b60405160208101906004358252888360408301376113086040828b81018d83820152036020810184520182611dd6565b51902094858952600b60205260ff60408a20541660078110156118ea57610ceb57889660443560040135611782575b6040518060608101106001600160401b0360608301111761176e576060810160405260018060a01b038916815260243560208201526040810190338252888c526009602052600260408d20602060018060a01b03845116936001600160601b0360a01b948584541617835501516001820155019160018060a01b039051169082541617905560018060a01b038816151560243515156000146116f85750868a52600b60205260408a20805460ff191660031790556113f78760243561247b565b868a52600b60205260ff60408b2054169a60078c10156116e457936114436103b99c9461143b611605989561143361144b9660299a3691612081565b9a3691612081565b9b3691612081565b923691612081565b94611454611eed565b99905498611460612a4b565b9761147561146c611eed565b9f90549b612eb3565b946114ba6103b96114b46114ae6114ae6114a86114a26103b961149c6103b9600435612eb3565b9e6128a3565b9a612a0b565b98612a0b565b94612a0b565b94612a7a565b936114c96103b96024356128a3565b956114d66103b933612a7a565b976040516080526114f281518092602080608051019101611fc6565b6080510198600b60fa1b998a6020820152611517825180936020602185019101611fc6565b01896021820152611532825180936020602285019101611fc6565b0188602282015261154d825180936020602385019101611fc6565b01876023820152611568825180936020602485019101611fc6565b01866024820152611583825180936020602585019101611fc6565b0185602582015261159e825180936020602685019101611fc6565b018460268201526115b9825180936020602785019101611fc6565b018360278201526115d4825180936020602885019101611fc6565b019160288301526115ee8151809260208686019101611fc6565b608051910103600981016080515201608051611dd6565b6040519160a083018381106001600160401b038211176116d05791610ccb9391610675979893604052607583527f496e7374616e636549442c20696e7374616e63654f6653706163652c20696e7360208401527f74616e6365547970652c206d657461646174614349442c206368617449442c2060408401527f49504e532c2049504e53456e637279707465644b65792c206761746564436f6e6060840152743a3930b1ba1610383934b1b2961031b932b0ba37b960591b60808401526080519360031b1c90612786565b634e487b7160e01b87526041600452602487fd5b634e487b7160e01b8b52602160045260248bfd5b8080611767575b1561172d5750868a52600b60205260408a20805460ff191660011790556117288760243561247b565b6113f7565b1561174e57868a52600b60205260408a20805460ff191660021790556113f7565b600b60205260408a20805460ff191660041790556113f7565b508a6116ff565b634e487b7160e01b8b52604160045260248bfd5b965061179a3660443560040135602460443501611df7565b600254608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d73000000178b5260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf31760205286603760098cf5906001600160a01b038216156118a5578a809160405161183581611827602082019463a224cee760e01b865260248301612351565b03601f198101835282611dd6565b519082855af16118436123b9565b501561186e57966118696118633660443560040135602460443501611df7565b88612dbd565b611337565b60405162461bcd60e51b815260206004820152600f60248201526e6572726f72206465706c6f79696e6760881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b634e487b7160e01b8a52602160045260248afd5b634e487b7160e01b89526021600452602489fd5b5060203660031901126101eb5760043561192c3382612608565b908083526008602052611947600160408520015434146124d5565b80835260076020526040832033845260205260408320805462278d00918282018092116119cd5755818452600860205260018060a01b0360408520541660633402348104606314341517156119cd579060646119a492049061252d565b82018092116119b95790610675913390612cb1565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b86526011600452602486fd5b50346101eb5760203660031901126101eb576040606091600435815260096020522060018060a01b0390818154169160026001830154920154169060405192835260208301526040820152f35b50346101eb5760803660031901126101eb57611a48611d2e565b50611a51611d44565b506044356064356001600160401b038111610d2f57611a74903690600401611cfc565b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611af757815415611ac0575b604051630a85bd0160e11b8152602090f35b80611aee916001557f0000000000000000000000000000000000000000000000000000000000000000612395565b90553880611aae565b604051634a93b62160e11b8152600490fd5b50346101eb5760203660031901126101eb576020906004358152600a8252604060018060a01b0391205416604051908152f35b50346101eb5760603660031901126101eb576004356001600160401b036024358181116104f557611b71903690600401611cfc565b909160443590811161050457611b8b903690600401611cfc565b848652600a60209081526040872054909391906001600160a01b03163303611ca75761067595611bd1610ccb94611bc9602998611c97963691612081565b933691612081565b91611c0c611133611be0611ea0565b99905498611c716103b9611bf2612b92565b976110f46031611c12611c03611ea0565b9a90549b612a0b565b9c612a0b565b9b6040519c8d916603730b6b2901e960cd1b89840152611c3b815180928b602787019101611fc6565b8201690161030b137baba101e960b51b6027820152611c62825180938b8785019101611fc6565b0103601181018d52018b611dd6565b604051988268031b7b232a4a2101e960bd1b8b9485015282519283918686019101611fc6565b8101036009810188520186611dd6565b6040516306815cbd60e41b8152600490fd5b9050346108d057816003193601126108d0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f84011215611d29578235916001600160401b038311611d295760208381860195010111611d2957565b600080fd5b600435906001600160a01b0382168203611d2957565b602435906001600160a01b0382168203611d2957565b906040600319830112611d295760043591602435906001600160401b038211611d2957611d8991600401611cfc565b9091565b6001600160401b038111610cd557604052565b606081019081106001600160401b03821117610cd557604052565b604081019081106001600160401b03821117610cd557604052565b90601f801991011681019081106001600160401b03821117610cd557604052565b9092916001600160401b038411610cd5578360051b6040519260208094611e2082850182611dd6565b8097815201918101928311611d2957905b828210611e3e5750505050565b81356001600160a01b0381168103611d29578152908301908301611e31565b906040600319830112611d295760043591602435906001600160401b038211611d295780602383011215611d2957816024611e9d93600401359101611df7565b90565b60055460021015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db290600090565b634e487b7160e01b600052603260045260246000fd5b60055460011015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190600090565b60055460041015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db490600090565b60055415611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090600090565b60055460031015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db390600090565b60005b838110611fd95750506000910152565b8181015183820152602001611fc9565b9060209161200281518092818552858086019101611fc6565b601f01601f1916010190565b6006546001600160a01b0316330361202257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b038111610cd557601f01601f191660200190565b92919261208d82612066565b9161209b6040519384611dd6565b829481845281830111611d29578281602093846000960137010152565b156120bf57565b60405162461bcd60e51b815260206004820152601b60248201527f44424e533a204e6f6465206973206e6f742061207375626e6f646500000000006044820152606490fd5b906000828152600960205260018060a01b0360408220541690600b60205260ff604082205416600781101561222157600303612167575050611e9d91600052600760205260406000209060018060a01b0316600052602052604060002054421090565b838152600b60205260ff6040822054166007811015612221576001036121ca575061219290826123e9565b91821561219e57505090565b611e9d9250600052600760205260406000209060018060a01b0316600052602052604060002054421090565b8392508093915052600b60205260ff60408320541660078110156102ed576002149081156121ff575b5015611e9d5750600190565b825250600b602052604081205460ff16600781101561222157600414386121f3565b634e487b7160e01b82526021600452602482fd5b919060008091848352600960205260018060a01b038060408520541695600b60205260ff604086205416936007851015978861230557600386036122b05750508452600960205280600260408620015416911614935b61222157600481119081156122a7575b506122a35750565b9150565b9050153861229b565b9392509650508395600184146000146122d55750906122ce916123e9565b935b61228b565b95508395600284146000146122ef5750906122ce916123e9565b9550505081600482036122d0576001945061228b565b634e487b7160e01b87526021600452602487fd5b1561232057565b60405162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b6044820152606490fd5b6020908160408183019282815285518094520193019160005b828110612378575050505090565b83516001600160a01b03168552938101939281019260010161236a565b9060405190602082019283526040820152604081526123b381611da0565b51902090565b3d156123e4573d906123ca82612066565b916123d86040519384611dd6565b82523d6000602084013e565b606090565b6000916001600160a01b039081169190826124075750505050600090565b602460209260405194859384926370a0823160e01b84521660048301525afa91821561246f57809261243b575b5050151590565b9091506020823d8211612467575b8161245660209383611dd6565b810103126101eb5750513880612434565b3d9150612449565b604051903d90823e3d90fd5b906040519160408301918383106001600160401b03841117610cd557600192604052338452602084019182526000526008602052604060002092828060a01b039051166001600160601b0360a01b84541617835551910155565b156124dc57565b60405162461bcd60e51b8152602060048201526024808201527f44424e533a204e6f2070726963652073657420666f72207468697320696e7374604482015263616e636560e01b6064820152608490fd5b8147106125c3576000918291829182916001600160a01b03165af16125506123b9565b501561255857565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b9060009182526007602052604082209060018060a01b0316825260205260408120549042821061265457428203918211612640575090565b634e487b7160e01b81526011600452602490fd5b905090565b6022906126c7929493604051958261267b889451809260208088019101611fc6565b830190600b60fa1b9182602082015261269e825180936020602185019101611fc6565b019060218201526126b88251809360208785019101611fc6565b01036002810185520183611dd6565b565b90610ccb612736926103b96126c7956126e0611f5b565b96905495604051926126f184611dbb565b600984526864625f73706163657360b81b602085015261273061272a6103b961272461271b611f5b565b9990549a612eb3565b94612eb3565b91612a0b565b91612659565b926040519261274484611da0565b602984527f4442537061636549442c20444253756253706163654f6649442c20444253756260208501526853706163654e616d6560b81b604085015260031b1c905b92612797603692611e9d9495612826565b906040519485926b024a729a2a92a1024a72a27960a51b60208501526127c7815180926020602c88019101611fc6565b8301600560fb1b602c8201526127e7825180936020602d85019101611fc6565b0167052ac8298aa8aa6560c31b602d82015261280d825180936020603585019101611fc6565b01602960f81b6035820152036016810184520182611dd6565b6022611e9d9161283e612838466128a3565b946128a3565b6040519482612857879451809260208088019101611fc6565b830190605f60f81b9182602082015261287a825180936020602185019101611fc6565b019060218201526128948251809360208785019101611fc6565b01036002810184520182611dd6565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156129fd575b506d04ee2d6d415b85acef8100000000808310156129ee575b50662386f26fc10000808310156129df575b506305f5e100808310156129d0575b50612710808310156129c1575b5060648210156129b1575b600a809210156129a7575b6001908160218186019561293c87612066565b9661294a6040519889611dd6565b808852612959601f1991612066565b01366020890137860101905b612971575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156129a257919082612965565b61296a565b9160010191612929565b919060646002910491019161291e565b60049193920491019138612913565b60089193920491019138612906565b601091939204910191386128f7565b602091939204910191386128e5565b6040935081049150386128cc565b611e9d60226040518093602760f81b90816020840152612a35815180926020602187019101611fc6565b8201906021820152036002810184520182611dd6565b60405190612a5882611dbb565b601382527264625f7370616365735f696e7374616e63657360681b6020830152565b604051906001600160a01b0316612a9082611da0565b602a8252602082016040368237825115611ed757603090538151600190811015611ed757607860218401536029905b808211612b13575050612acf5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612b6c576f181899199a1a9b1b9c1cb0b131b232b360811b901a612b428486612b81565b5360041c918015612b57576000190190612abf565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b908151811015611ed7570160200190565b60405190612b9f82611dbb565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b90612bca91939293612826565b9060405191602091828401928484106001600160401b03851117610cd557611e9d94602c9460405260008152918051612c6c575b50612c5d6040519687946602aa82220aa22960cd1b84870152612c2a815180928660278a019101611fc6565b85016401029a2aa160dd1b6027820152612c4c82518093868a85019101611fc6565b019183519384918785019101611fc6565b0103600c810184520182611dd6565b909150612caa60276040518093660102ba422a922960cd1b86830152612c9a81518092888686019101611fc6565b8101036007810184520182611dd6565b9038612bfe565b90610ccb612d1f926103b96126c795612cc8611f8f565b9690549560405192612cd984611dbb565b600d84526c737562736372697074696f6e7360981b60208501526127306103b9612d196103b9612d13612d0a611f8f565b9a90549b612eb3565b95612a7a565b926128a3565b9260405192612d2d84611dbb565b601e84527f496e7374616e636549442c20737562736372696265722c20656e647341740000602085015260031b1c90612786565b6000198114612d705760010190565b634e487b7160e01b600052601160045260246000fd5b60405190612d9382611dbb565b60078252666d656d6265727360c81b6020830152565b8051821015611ed75760209160051b010190565b612dc990929192612eb3565b9160005b8151811015612ead57612ea890610494612de5611f24565b9054612def612d86565b91612ea0612dfb611f24565b9054600395612e098d612a0b565b91612e226103b98d6103b28d60018060a01b0392612da9565b937124b739ba30b731b2a4a2161036b2b6b132b960711b6040612e85815197888851612e568160209b8c8086019101611fc6565b8101600b60fa1b8a820152825190612e76826021958d8785019101611fc6565b0103600181018a520188611dd6565b5194612e9086611dbb565b60128652850152881b1c90612786565b921b1c612fd7565b612dcd565b50509050565b60405190612ec082611da0565b6040825260209182810191604036843760405190612edd82611dbb565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b8583015260005b858110612f3c5750505061060f60f31b92611e9d92612f2c60229360405196879485015251809285850190611fc6565b8101036002810184520182611dd6565b81811a9083518015612fc1576001600160f81b0319908190612f6090850487612b81565b51169060019383851b9284840460021485151715612d705760001a612f85848a612b81565b5386518015612fc157612f99910687612b81565b5116928101809111612d7057612fb6612fbc9360001a9187612b81565b53612d61565b612efc565b634e487b7160e01b600052601260045260246000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b15611d29576130409260009283604051809681958294631bbd786d60e11b84523060048501526024840152606060448401526064830190611fe9565b03925af1801561305a576130515750565b6126c790611d8d565b6040513d6000823e3d90fdfea2646970667358221220cd64a9622828c5124b4e51733c2f7c5ba86999343f82e1f2fa0e2bff10d0936564736f6c634300081400338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x60a080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816306433b1b14611cb9575080630c9ddf6d14611b3c57806311ad2f3414611b09578063150b7a0214611a2e5780632711447f146119e1578063284e82e8146119125780633ac27522146111d45780633ccfd60b146111b15780633e203835146111825780633ec29e721461103057806347d121c514611009578063557ed1ba14610fee57806367e0970914610f51578063715018a614610ef357806371671bf214610dc75780637a9b777414610d51578063820cc55714610d3357806383a8b3d01461092857806384ec9653146108fb57806388975383146108d45780638a8fd2501461087e5780638da5cb5b146108555780639ad66a231461079a578063a58dcc951461071a578063a5df63d6146106c7578063ba0d18aa1461068c578063bfc51b7e146105f6578063cb609077146105b1578063d68d087c1461056c578063db7baba91461054f578063dd321bfc14610508578063e0cf1e4c14610301578063e2b1e4ed146102b4578063f2fde38b146101ee5763ffeb4a300361000f57346101eb57806003193601126101eb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b50346101eb5760203660031901126101eb57610208611d2e565b61021061200e565b6001600160a01b0390811690811561026057600654826001600160601b0360a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101eb5760203660031901126101eb576004358152600b60205260ff6040822054166040519060078110156102ed57602092508152f35b634e487b7160e01b83526021600452602483fd5b50346101eb5761031036611e5d565b818392935260209060098252604083209360018060a01b039461033e86600281845416930154163314612319565b806104a2575b5061034e90612eb3565b91835b825181101561049e5761049990610494660102ba422a922960cd1b886104378861048d896103b28a610381611f24565b969054978b6103be6103b9610394612d86565b9361039d611f24565b989054946103ac60039d612a0b565b9a612da9565b5116612a7a565b612a0b565b9461042e6040519687878101996c024b739ba30b731b2a4a2101e9609d1b8b526d01020a7221036b2b6b132b9101e960951b815161040481602d948d8688019101611fc6565b83019182015282519061041f82603b958c8785019101611fc6565b0103601b810189520187611dd6565b881b1c90612826565b916040519889936b02222a622aa2290232927a6960a51b8486015261046681518092602c968789019101611fc6565b840192830152519061047e8260339586840190611fc6565b01036013810187520185611dd6565b1b1c612fd7565b612d61565b610351565b8480f35b803b156105045784604051809263362eb0ab60e11b82528183816104c98960048301612351565b03925af180156104f9579085916104e1575b50610344565b6104ea90611d8d565b6104f55783386104db565b8380fd5b6040513d87823e3d90fd5b8480fd5b50346101eb5760403660031901126101eb576040610524611d44565b9160043581526007602052209060018060a01b03166000526020526020604060002054604051908152f35b50346101eb57806003193601126101eb5760209054604051908152f35b50346101eb57806003193601126101eb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101eb57806003193601126101eb576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101eb5761060536611d5a565b909291808352600b60205260ff6040842054166007811015610678576106759394610635600561066f93146120b8565b610650610643368684612081565b6020815191012084612395565b808752600b60205260408720805460ff19166005179055933691612081565b916126c9565b80f35b634e487b7160e01b84526021600452602484fd5b50346101eb5760203660031901126101eb576040809160043581526008602052206001808060a01b0382541691015482519182526020820152f35b50346101eb5760403660031901126101eb5760206107106106e6611d44565b600435600052600760205260406000209060018060a01b0316600052602052604060002054421090565b6040519015158152f35b50346101eb5760203660031901126101eb57602060018060a01b03605560438260025416604051903060388301526f5af43d82803e903d91602b57fd5bf3ff60248301526014820152733d602d80600a3d3981f3363d3d373d3d3d363d73815260043560588201526037600c820120607882015201209060405191168152f35b5060203660031901126101eb576004359081815260086020526107c5600160408320015434146124d5565b62278d004201804211610841578282526007602052604082203360005260205280604060002055828252600860205260018060a01b0360408320541692606334023481046063143415171561082d576106759394606461082692049061252d565b3390612cb1565b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b82526011600452602482fd5b50346101eb57806003193601126101eb576006546040516001600160a01b039091168152602090f35b50346101eb5760203660031901126101eb576004356005548110156108d05760209060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154604051908152f35b5080fd5b50346101eb5760403660031901126101eb5760206107106108f3611d44565b600435612235565b50346101eb5760403660031901126101eb57602061071061091a611d2e565b610922611d44565b906123e9565b50346101eb5760c03660031901126101eb576004356024356001600160401b038111610d2f5761095c903690600401611cfc565b6044929192356001600160401b0381116105045761097e903690600401611cfc565b9190926064356001600160401b038111610d2b576109a0903690600401611cfc565b91906084356001600160401b038111610d27576109c1903690600401611cfc565b969060a4356001600160401b038111610d23576109e2903690600401611cfc565b9390926109ef3387612235565b15610d11578b9a8b988b6040518060209c8d8201938c8552808a60408501378201906040820152038c81018252604001610a299082611dd6565b519020809d528d600b8b52604090205460ff166007811015610cfd57610ceb578c8e52600a8a526040808f208054336001600160a01b0319909116179055600b8b528e20805460ff19166006179055610a8491369190612081565b983690610a9092612081565b953690610a9c92612081565b973690610aa892612081565b913690610ab492612081565b96610abd611ea0565b97905496610ac9612b92565b93610ad2611ea0565b9b905496610adf90612eb3565b610ae890612a0b565b94610af290612eb3565b610afb90612a0b565b92610b0590612a0b565b97610b0f90612a0b565b93610b1990612a0b565b91610b2390612a0b565b90610b2d90612a0b565b91610b3733612a7a565b610b4090612a0b565b948a6040519a888c9951908184808d01920191610b5c92611fc6565b890196600b60fa1b978884820152815191828560218401920191610b7f92611fc6565b01908760218301528051809360228401920191610b9b92611fc6565b01856022820152815191828d60238401920191610bb792611fc6565b01846023820152815191828c60248401920191610bd392611fc6565b01836024820152815191828b60258401920191610bef92611fc6565b01826025820152815191828a60268401920191610c0b92611fc6565b01906026820152815191828860278401920191610c2792611fc6565b0103600781018452602701610c3c9084611dd6565b6040519160808301978389106001600160401b038a1117610cd5577f496e7374616e636549442c20636f646549442c206e616d652c2061626f75742c610ccb966106759a604052604886528501527f206368617449442c2049504e532c2049504e53456e637279707465644b65792c6040850152671031b932b0ba37b960c11b606085015260031b1c90612786565b9160031b1c612fd7565b634e487b7160e01b600052604160045260246000fd5b604051631144626f60e01b8152600490fd5b634e487b7160e01b8f52602160045260248ffd5b6040516346627df160e01b8152600490fd5b8a80fd5b8880fd5b8680fd5b8280fd5b50346101eb57806003193601126101eb576020600154604051908152f35b50346101eb5760203660031901126101eb576004356001600160401b0381116108d057610d85610675913690600401611cfc565b61066f610da58554610d98368587612081565b6020815191012090612395565b92838652600b60205260408620600560ff198254161790558554923691612081565b50346101eb576020806003193601126108d057600435600454811015610d2f5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190604051918381549460019086821c93828816978815610ee9575b8686108914610ed557868899878a98999a529182600014610eb1575050600114610e75575b505050610e5d92500383611dd6565b610e71604051928284938452830190611fe9565b0390f35b869350819291528282205b858310610e99575050610e5d9350820101388080610e4e565b80548389018501528794508693909201918101610e80565b935094505050610e5d94915060ff191682840152151560051b820101388080610e4e565b634e487b7160e01b83526022600452602483fd5b94607f1694610e29565b50346101eb57806003193601126101eb57610f0c61200e565b600680546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101eb57610f6036611e5d565b8183929352600960205260408220610f8960018060a01b03600281845416930154163314612319565b80610f9a575b506106759192612dbd565b803b15610d2f57826040518092632f41d6e160e21b8252818381610fc18860048301612351565b03925af18015610fe35715610f8f5791610fdd61067593611d8d565b91610f8f565b6040513d85823e3d90fd5b50346101eb57806003193601126101eb576020604051428152f35b50346101eb5760403660031901126101eb576020610710611028611d44565b600435612104565b50346101eb5761103f36611d5a565b82845260096020908152604085206002015490939291906001600160a01b0316330361113d5761112361107c610675959493610ccb933691612081565b92611085611eed565b959054946110b1611133602d611099612a4b565b946110f96103b96110a8611eed565b96905497612a0b565b986110f4602e604051809c6d036b2ba30b230ba30a1a4a2101e960951b888301526110e4815180928a8686019101611fc6565b810103600e81018d52018b611dd6565b612eb3565b60405198826c024b739ba30b731b2a4a2101e9609d1b8b9485015282519283918686019101611fc6565b810103600d810188520186611dd6565b60031b1c90612bbd565b60405162461bcd60e51b815260048101859052601860248201527f44424e533a204e6f20696e7374616e63652061636365737300000000000000006044820152606490fd5b50346101eb5760403660031901126101eb5760206111a96111a1611d44565b600435612608565b604051908152f35b50346101eb57806003193601126101eb576111ca61200e565b610675473361252d565b50346101eb5760e03660031901126101eb576001600160401b03604435116101eb573660236044350112156101eb576001600160401b0360443560040135116101eb573660246044356004013560051b6044350101116101eb576064356001600160401b0381116108d05761124d903690600401611cfc565b91906084356001600160401b038111610d2f5761126e903690600401611cfc565b919060a4356001600160401b0381116105045761128f903690600401611cfc565b939060c4356001600160401b038111610d2b576112b0903690600401611cfc565b916004358852600b60205260ff60408920541660078110156118fe5760056112d891146120b8565b60405160208101906004358252888360408301376113086040828b81018d83820152036020810184520182611dd6565b51902094858952600b60205260ff60408a20541660078110156118ea57610ceb57889660443560040135611782575b6040518060608101106001600160401b0360608301111761176e576060810160405260018060a01b038916815260243560208201526040810190338252888c526009602052600260408d20602060018060a01b03845116936001600160601b0360a01b948584541617835501516001820155019160018060a01b039051169082541617905560018060a01b038816151560243515156000146116f85750868a52600b60205260408a20805460ff191660031790556113f78760243561247b565b868a52600b60205260ff60408b2054169a60078c10156116e457936114436103b99c9461143b611605989561143361144b9660299a3691612081565b9a3691612081565b9b3691612081565b923691612081565b94611454611eed565b99905498611460612a4b565b9761147561146c611eed565b9f90549b612eb3565b946114ba6103b96114b46114ae6114ae6114a86114a26103b961149c6103b9600435612eb3565b9e6128a3565b9a612a0b565b98612a0b565b94612a0b565b94612a7a565b936114c96103b96024356128a3565b956114d66103b933612a7a565b976040516080526114f281518092602080608051019101611fc6565b6080510198600b60fa1b998a6020820152611517825180936020602185019101611fc6565b01896021820152611532825180936020602285019101611fc6565b0188602282015261154d825180936020602385019101611fc6565b01876023820152611568825180936020602485019101611fc6565b01866024820152611583825180936020602585019101611fc6565b0185602582015261159e825180936020602685019101611fc6565b018460268201526115b9825180936020602785019101611fc6565b018360278201526115d4825180936020602885019101611fc6565b019160288301526115ee8151809260208686019101611fc6565b608051910103600981016080515201608051611dd6565b6040519160a083018381106001600160401b038211176116d05791610ccb9391610675979893604052607583527f496e7374616e636549442c20696e7374616e63654f6653706163652c20696e7360208401527f74616e6365547970652c206d657461646174614349442c206368617449442c2060408401527f49504e532c2049504e53456e637279707465644b65792c206761746564436f6e6060840152743a3930b1ba1610383934b1b2961031b932b0ba37b960591b60808401526080519360031b1c90612786565b634e487b7160e01b87526041600452602487fd5b634e487b7160e01b8b52602160045260248bfd5b8080611767575b1561172d5750868a52600b60205260408a20805460ff191660011790556117288760243561247b565b6113f7565b1561174e57868a52600b60205260408a20805460ff191660021790556113f7565b600b60205260408a20805460ff191660041790556113f7565b508a6116ff565b634e487b7160e01b8b52604160045260248bfd5b965061179a3660443560040135602460443501611df7565b600254608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d73000000178b5260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf31760205286603760098cf5906001600160a01b038216156118a5578a809160405161183581611827602082019463a224cee760e01b865260248301612351565b03601f198101835282611dd6565b519082855af16118436123b9565b501561186e57966118696118633660443560040135602460443501611df7565b88612dbd565b611337565b60405162461bcd60e51b815260206004820152600f60248201526e6572726f72206465706c6f79696e6760881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b634e487b7160e01b8a52602160045260248afd5b634e487b7160e01b89526021600452602489fd5b5060203660031901126101eb5760043561192c3382612608565b908083526008602052611947600160408520015434146124d5565b80835260076020526040832033845260205260408320805462278d00918282018092116119cd5755818452600860205260018060a01b0360408520541660633402348104606314341517156119cd579060646119a492049061252d565b82018092116119b95790610675913390612cb1565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b86526011600452602486fd5b50346101eb5760203660031901126101eb576040606091600435815260096020522060018060a01b0390818154169160026001830154920154169060405192835260208301526040820152f35b50346101eb5760803660031901126101eb57611a48611d2e565b50611a51611d44565b506044356064356001600160401b038111610d2f57611a74903690600401611cfc565b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303611af757815415611ac0575b604051630a85bd0160e11b8152602090f35b80611aee916001557f0000000000000000000000000000000000000000000000000000000000000000612395565b90553880611aae565b604051634a93b62160e11b8152600490fd5b50346101eb5760203660031901126101eb576020906004358152600a8252604060018060a01b0391205416604051908152f35b50346101eb5760603660031901126101eb576004356001600160401b036024358181116104f557611b71903690600401611cfc565b909160443590811161050457611b8b903690600401611cfc565b848652600a60209081526040872054909391906001600160a01b03163303611ca75761067595611bd1610ccb94611bc9602998611c97963691612081565b933691612081565b91611c0c611133611be0611ea0565b99905498611c716103b9611bf2612b92565b976110f46031611c12611c03611ea0565b9a90549b612a0b565b9c612a0b565b9b6040519c8d916603730b6b2901e960cd1b89840152611c3b815180928b602787019101611fc6565b8201690161030b137baba101e960b51b6027820152611c62825180938b8785019101611fc6565b0103601181018d52018b611dd6565b604051988268031b7b232a4a2101e960bd1b8b9485015282519283918686019101611fc6565b8101036009810188520186611dd6565b6040516306815cbd60e41b8152600490fd5b9050346108d057816003193601126108d0577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f84011215611d29578235916001600160401b038311611d295760208381860195010111611d2957565b600080fd5b600435906001600160a01b0382168203611d2957565b602435906001600160a01b0382168203611d2957565b906040600319830112611d295760043591602435906001600160401b038211611d2957611d8991600401611cfc565b9091565b6001600160401b038111610cd557604052565b606081019081106001600160401b03821117610cd557604052565b604081019081106001600160401b03821117610cd557604052565b90601f801991011681019081106001600160401b03821117610cd557604052565b9092916001600160401b038411610cd5578360051b6040519260208094611e2082850182611dd6565b8097815201918101928311611d2957905b828210611e3e5750505050565b81356001600160a01b0381168103611d29578152908301908301611e31565b906040600319830112611d295760043591602435906001600160401b038211611d295780602383011215611d2957816024611e9d93600401359101611df7565b90565b60055460021015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db290600090565b634e487b7160e01b600052603260045260246000fd5b60055460011015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190600090565b60055460041015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db490600090565b60055415611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090600090565b60055460031015611ed75760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db390600090565b60005b838110611fd95750506000910152565b8181015183820152602001611fc9565b9060209161200281518092818552858086019101611fc6565b601f01601f1916010190565b6006546001600160a01b0316330361202257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b038111610cd557601f01601f191660200190565b92919261208d82612066565b9161209b6040519384611dd6565b829481845281830111611d29578281602093846000960137010152565b156120bf57565b60405162461bcd60e51b815260206004820152601b60248201527f44424e533a204e6f6465206973206e6f742061207375626e6f646500000000006044820152606490fd5b906000828152600960205260018060a01b0360408220541690600b60205260ff604082205416600781101561222157600303612167575050611e9d91600052600760205260406000209060018060a01b0316600052602052604060002054421090565b838152600b60205260ff6040822054166007811015612221576001036121ca575061219290826123e9565b91821561219e57505090565b611e9d9250600052600760205260406000209060018060a01b0316600052602052604060002054421090565b8392508093915052600b60205260ff60408320541660078110156102ed576002149081156121ff575b5015611e9d5750600190565b825250600b602052604081205460ff16600781101561222157600414386121f3565b634e487b7160e01b82526021600452602482fd5b919060008091848352600960205260018060a01b038060408520541695600b60205260ff604086205416936007851015978861230557600386036122b05750508452600960205280600260408620015416911614935b61222157600481119081156122a7575b506122a35750565b9150565b9050153861229b565b9392509650508395600184146000146122d55750906122ce916123e9565b935b61228b565b95508395600284146000146122ef5750906122ce916123e9565b9550505081600482036122d0576001945061228b565b634e487b7160e01b87526021600452602487fd5b1561232057565b60405162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b6044820152606490fd5b6020908160408183019282815285518094520193019160005b828110612378575050505090565b83516001600160a01b03168552938101939281019260010161236a565b9060405190602082019283526040820152604081526123b381611da0565b51902090565b3d156123e4573d906123ca82612066565b916123d86040519384611dd6565b82523d6000602084013e565b606090565b6000916001600160a01b039081169190826124075750505050600090565b602460209260405194859384926370a0823160e01b84521660048301525afa91821561246f57809261243b575b5050151590565b9091506020823d8211612467575b8161245660209383611dd6565b810103126101eb5750513880612434565b3d9150612449565b604051903d90823e3d90fd5b906040519160408301918383106001600160401b03841117610cd557600192604052338452602084019182526000526008602052604060002092828060a01b039051166001600160601b0360a01b84541617835551910155565b156124dc57565b60405162461bcd60e51b8152602060048201526024808201527f44424e533a204e6f2070726963652073657420666f72207468697320696e7374604482015263616e636560e01b6064820152608490fd5b8147106125c3576000918291829182916001600160a01b03165af16125506123b9565b501561255857565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b9060009182526007602052604082209060018060a01b0316825260205260408120549042821061265457428203918211612640575090565b634e487b7160e01b81526011600452602490fd5b905090565b6022906126c7929493604051958261267b889451809260208088019101611fc6565b830190600b60fa1b9182602082015261269e825180936020602185019101611fc6565b019060218201526126b88251809360208785019101611fc6565b01036002810185520183611dd6565b565b90610ccb612736926103b96126c7956126e0611f5b565b96905495604051926126f184611dbb565b600984526864625f73706163657360b81b602085015261273061272a6103b961272461271b611f5b565b9990549a612eb3565b94612eb3565b91612a0b565b91612659565b926040519261274484611da0565b602984527f4442537061636549442c20444253756253706163654f6649442c20444253756260208501526853706163654e616d6560b81b604085015260031b1c905b92612797603692611e9d9495612826565b906040519485926b024a729a2a92a1024a72a27960a51b60208501526127c7815180926020602c88019101611fc6565b8301600560fb1b602c8201526127e7825180936020602d85019101611fc6565b0167052ac8298aa8aa6560c31b602d82015261280d825180936020603585019101611fc6565b01602960f81b6035820152036016810184520182611dd6565b6022611e9d9161283e612838466128a3565b946128a3565b6040519482612857879451809260208088019101611fc6565b830190605f60f81b9182602082015261287a825180936020602185019101611fc6565b019060218201526128948251809360208785019101611fc6565b01036002810184520182611dd6565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000808210156129fd575b506d04ee2d6d415b85acef8100000000808310156129ee575b50662386f26fc10000808310156129df575b506305f5e100808310156129d0575b50612710808310156129c1575b5060648210156129b1575b600a809210156129a7575b6001908160218186019561293c87612066565b9661294a6040519889611dd6565b808852612959601f1991612066565b01366020890137860101905b612971575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156129a257919082612965565b61296a565b9160010191612929565b919060646002910491019161291e565b60049193920491019138612913565b60089193920491019138612906565b601091939204910191386128f7565b602091939204910191386128e5565b6040935081049150386128cc565b611e9d60226040518093602760f81b90816020840152612a35815180926020602187019101611fc6565b8201906021820152036002810184520182611dd6565b60405190612a5882611dbb565b601382527264625f7370616365735f696e7374616e63657360681b6020830152565b604051906001600160a01b0316612a9082611da0565b602a8252602082016040368237825115611ed757603090538151600190811015611ed757607860218401536029905b808211612b13575050612acf5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612b6c576f181899199a1a9b1b9c1cb0b131b232b360811b901a612b428486612b81565b5360041c918015612b57576000190190612abf565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b908151811015611ed7570160200190565b60405190612b9f82611dbb565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b90612bca91939293612826565b9060405191602091828401928484106001600160401b03851117610cd557611e9d94602c9460405260008152918051612c6c575b50612c5d6040519687946602aa82220aa22960cd1b84870152612c2a815180928660278a019101611fc6565b85016401029a2aa160dd1b6027820152612c4c82518093868a85019101611fc6565b019183519384918785019101611fc6565b0103600c810184520182611dd6565b909150612caa60276040518093660102ba422a922960cd1b86830152612c9a81518092888686019101611fc6565b8101036007810184520182611dd6565b9038612bfe565b90610ccb612d1f926103b96126c795612cc8611f8f565b9690549560405192612cd984611dbb565b600d84526c737562736372697074696f6e7360981b60208501526127306103b9612d196103b9612d13612d0a611f8f565b9a90549b612eb3565b95612a7a565b926128a3565b9260405192612d2d84611dbb565b601e84527f496e7374616e636549442c20737562736372696265722c20656e647341740000602085015260031b1c90612786565b6000198114612d705760010190565b634e487b7160e01b600052601160045260246000fd5b60405190612d9382611dbb565b60078252666d656d6265727360c81b6020830152565b8051821015611ed75760209160051b010190565b612dc990929192612eb3565b9160005b8151811015612ead57612ea890610494612de5611f24565b9054612def612d86565b91612ea0612dfb611f24565b9054600395612e098d612a0b565b91612e226103b98d6103b28d60018060a01b0392612da9565b937124b739ba30b731b2a4a2161036b2b6b132b960711b6040612e85815197888851612e568160209b8c8086019101611fc6565b8101600b60fa1b8a820152825190612e76826021958d8785019101611fc6565b0103600181018a520188611dd6565b5194612e9086611dbb565b60128652850152881b1c90612786565b921b1c612fd7565b612dcd565b50509050565b60405190612ec082611da0565b6040825260209182810191604036843760405190612edd82611dbb565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b8583015260005b858110612f3c5750505061060f60f31b92611e9d92612f2c60229360405196879485015251809285850190611fc6565b8101036002810184520182611dd6565b81811a9083518015612fc1576001600160f81b0319908190612f6090850487612b81565b51169060019383851b9284840460021485151715612d705760001a612f85848a612b81565b5386518015612fc157612f99910687612b81565b5116928101809111612d7057612fb6612fbc9360001a9187612b81565b53612d61565b612efc565b634e487b7160e01b600052601260045260246000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b15611d29576130409260009283604051809681958294631bbd786d60e11b84523060048501526024840152606060448401526064830190611fe9565b03925af1801561305a576130515750565b6126c790611d8d565b6040513d6000823e3d90fdfea2646970667358221220cd64a9622828c5124b4e51733c2f7c5ba86999343f82e1f2fa0e2bff10d0936564736f6c63430008140033",
  "devdoc": {
    "details": "Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity ENS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions",
    "kind": "dev",
    "methods": {
      "createDBSpace(string)": {
        "details": "Create a new space under the given node",
        "params": {
          "_name": "The name of the new space"
        }
      },
      "createDBSubSpace(bytes32,string)": {
        "details": "Create a new subnode under the given node",
        "params": {
          "_DBSpace": "The parent node",
          "_name": "The name of the new subnode"
        }
      },
      "createInstanceCode(bytes32,string,string,string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_about": "The about of the new instance",
          "_chatID": "The chatID of the new instance",
          "_codeIPNS": "The IPNS of the new instance",
          "_instance": "The parent node",
          "_name": "The name of the new instance"
        }
      },
      "createSpaceInstance(bytes32,uint256,address[],string,string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_IPNS": "The IPNS of the new instance",
          "_chatID": "The chatID of the new instance",
          "_members": "The hatID of the new instance",
          "_metadataCID": "The name of the new instance",
          "_node": "The parent node"
        }
      },
      "hasViewAccess(bytes32,address)": {
        "details": "Check if the sender has access to the given instance",
        "params": {
          "_instance": "The instance to check",
          "_sender": "The sender to check"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "DBNS",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3545,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "DBNS_NODE",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 3549,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "DOMAIN_ID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3707,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4055,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4058,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "tables",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4061,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "tableIDs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3827,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instanceSubscriptions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3832,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instanceSubscription",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(InstanceStruct)3821_storage)"
      },
      {
        "astId": 3141,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(SpaceInstance)3136_storage)"
      },
      {
        "astId": 3145,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "codeOwner",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3150,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "isType",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_enum(Types)3129)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Types)3129": {
        "encoding": "inplace",
        "label": "enum Core.Types",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_enum(Types)3129)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Core.Types)",
        "numberOfBytes": "32",
        "value": "t_enum(Types)3129"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(InstanceStruct)3821_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Subscriptions.InstanceStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(InstanceStruct)3821_storage"
      },
      "t_mapping(t_bytes32,t_struct(SpaceInstance)3136_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Core.SpaceInstance)",
        "numberOfBytes": "32",
        "value": "t_struct(SpaceInstance)3136_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InstanceStruct)3821_storage": {
        "encoding": "inplace",
        "label": "struct Subscriptions.InstanceStruct",
        "members": [
          {
            "astId": 3818,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3820,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "prize",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SpaceInstance)3136_storage": {
        "encoding": "inplace",
        "label": "struct Core.SpaceInstance",
        "members": [
          {
            "astId": 3131,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "gatedContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3133,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3135,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}