{
  "address": "0xD3768a326BAA48EA73B56FD70852Eb71E90CdCf4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_publicResolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unlockContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gateImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InstanceAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCodeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInstanceAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInstanceCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscribeToGainAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DBNS_NODE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IFNSResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRAR",
      "outputs": [
        {
          "internalType": "contract IFNSRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY",
      "outputs": [
        {
          "internalType": "contract IFNS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TABLELAND",
      "outputs": [
        {
          "internalType": "contract ITablelandTables",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "codeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_subspace",
          "type": "string"
        }
      ],
      "name": "createDBSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_DBSpace",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_subspace",
          "type": "string"
        }
      ],
      "name": "createDBSubSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_chatID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_codeIPNS",
          "type": "string"
        }
      ],
      "name": "createInstanceCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_metadataCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_chatID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNS",
          "type": "string"
        }
      ],
      "name": "createSpaceInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "extendInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gatedContract",
          "type": "address"
        }
      ],
      "name": "getAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        }
      ],
      "name": "getRemainingSubscriptionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        }
      ],
      "name": "hasActiveSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasMutateAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "access",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasViewAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "insertNewMerbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instanceLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "instanceSubscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instances",
      "outputs": [
        {
          "internalType": "address",
          "name": "gatedContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isType",
      "outputs": [
        {
          "internalType": "enum Core.Types",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "keyPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minKeyPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onKeyPurchase",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "purchaseInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokens",
          "type": "uint256[]"
        }
      ],
      "name": "removeMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tableIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_codeID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_hatID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_img",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_chatID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNS",
          "type": "string"
        }
      ],
      "name": "updateInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
  "receipt": {
    "to": null,
    "from": "0x044B595C9b94A17Adc489bD29696af40ccb3E4d2",
    "contractAddress": "0xD3768a326BAA48EA73B56FD70852Eb71E90CdCf4",
    "transactionIndex": 94,
    "gasUsed": "4234445",
    "logsBloom": "0x
    "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02",
    "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
    "logs": [
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf4",
          "0x00000000000000000000000000000000000000000000000000000000000004f8"
        ],
        "data": "0x",
        "logIndex": 245,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf400000000000000000000000000000000000000000000000000000000000004f80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006d435245415445205441424c452064625f7370616365735f31313135353131312844425370616365494420746578742c20444253756253706163654f66494420746578742c20444253706163654e616d6520746578742c20444253756253706163654f664e616d6520746578742900000000000000000000000000000000000000",
        "logIndex": 246,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf4",
          "0x00000000000000000000000000000000000000000000000000000000000004f9"
        ],
        "data": "0x",
        "logIndex": 247,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf400000000000000000000000000000000000000000000000000000000000004f9000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c6435245415445205441424c452064625f7370616365735f696e7374616e6365735f313131353531313128496e7374616e6365494420746578742c20696e7374616e63654f66537061636520746578742c20696e7374616e63655479706520746578742c206d6574616461746143494420746578742c2063686174494420746578742c2049504e5320746578742c206761746564436f6e747261637420746578742c20707269636520746578742c206c6f636b20746578742c2063726561746f722074657874290000000000000000000000000000000000000000000000000000",
        "logIndex": 248,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf4",
          "0x00000000000000000000000000000000000000000000000000000000000004fa"
        ],
        "data": "0x",
        "logIndex": 249,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf400000000000000000000000000000000000000000000000000000000000004fa00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000084435245415445205441424c4520696e7374616e6365735f636f6465735f313131353531313128496e7374616e6365494420746578742c20636f6465494420746578742c206e616d6520746578742c2061626f757420746578742c2063686174494420746578742c20636f646549504e5320746578742c2063726561746f7220746578742900000000000000000000000000000000000000000000000000000000",
        "logIndex": 250,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf4",
          "0x00000000000000000000000000000000000000000000000000000000000004fb"
        ],
        "data": "0x",
        "logIndex": 251,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf400000000000000000000000000000000000000000000000000000000000004fb00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000060435245415445205441424c4520737562736372697074696f6e735f313131353531313128496e7374616e6365494420746578742c207375627363726962657220746578742c20746f6b656e494420746578742c20656e64734174207465787429",
        "logIndex": 252,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf4",
          "0x00000000000000000000000000000000000000000000000000000000000004fc"
        ],
        "data": "0x",
        "logIndex": 253,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x000000000000000000000000d3768a326baa48ea73b56fd70852eb71e90cdcf400000000000000000000000000000000000000000000000000000000000004fc0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003b435245415445205441424c45206d656d626572735f313131353531313128496e7374616e6365494420746578742c206d656d6265722074657874290000000000",
        "logIndex": 254,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      },
      {
        "transactionIndex": 94,
        "blockNumber": 5499538,
        "transactionHash": "0x19b12f81c044e45715dbd3d76ed57c8012ef2841f2ebb33b68f4d0579b886919",
        "address": "0xD3768a326BAA48EA73B56FD70852Eb71E90CdCf4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000044b595c9b94a17adc489bd29696af40ccb3e4d2"
        ],
        "data": "0x",
        "logIndex": 255,
        "blockHash": "0x42da72f884c39b328dfc75506bca58813959a0e74d322c5f69fd752dcb516e02"
      }
    ],
    "blockNumber": 5499538,
    "cumulativeGasUsed": "18674736",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
    "0x8FADE66B79cC9f707aB26799354482EB93a5B7dD",
    "0x36b34e10295cCE69B652eEB5a8046041074515Da",
    "0xd6e750fc81cDc951C462B6046dF2c1418a4100d6"
  ],
  "numDeployments": 6,
  "solcInputHash": "b45ab92dfe896c6457c500f877ca50e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_publicResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unlockContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InstanceAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCodeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInstanceAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInstanceCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscribeToGainAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DBNS_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IFNSResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRAR\",\"outputs\":[{\"internalType\":\"contract IFNSRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY\",\"outputs\":[{\"internalType\":\"contract IFNS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TABLELAND\",\"outputs\":[{\"internalType\":\"contract ITablelandTables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_subspace\",\"type\":\"string\"}],\"name\":\"createDBSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_DBSpace\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_subspace\",\"type\":\"string\"}],\"name\":\"createDBSubSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chatID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_codeIPNS\",\"type\":\"string\"}],\"name\":\"createInstanceCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chatID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNS\",\"type\":\"string\"}],\"name\":\"createSpaceInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"extendInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatedContract\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"getRemainingSubscriptionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"hasActiveSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasMutateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasViewAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"insertNewMerbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instanceLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instanceSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gatedContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isType\",\"outputs\":[{\"internalType\":\"enum Core.Types\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"purchaseInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"removeMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tableIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_codeID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_hatID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_img\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chatID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNS\",\"type\":\"string\"}],\"name\":\"updateInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity ENS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions\",\"kind\":\"dev\",\"methods\":{\"createDBSpace(string,string)\":{\"details\":\"Create a new space under the given node\",\"params\":{\"_name\":\"The name of the new space\"}},\"createDBSubSpace(bytes32,string,string)\":{\"details\":\"Create a new subnode under the given node\",\"params\":{\"_DBSpace\":\"The parent node\",\"_name\":\"The name of the new subnode\"}},\"createInstanceCode(bytes32,string,string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_about\":\"The about of the new instance\",\"_chatID\":\"The chatID of the new instance\",\"_codeIPNS\":\"The IPNS of the new instance\",\"_instance\":\"The parent node\",\"_name\":\"The name of the new instance\"}},\"createSpaceInstance(bytes32,uint256,address[],string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_IPNS\":\"The IPNS of the new instance\",\"_chatID\":\"The chatID of the new instance\",\"_members\":\"The hatID of the new instance\",\"_metadataCID\":\"The name of the new instance\",\"_node\":\"The parent node\"}},\"hasViewAccess(bytes32,address)\":{\"details\":\"Check if the sender has access to the given instance\",\"params\":{\"_instance\":\"The instance to check\",\"_sender\":\"The sender to check\"},\"returns\":{\"_0\":\"bool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(bytes32)\":{\"details\":\"withdraw function for an agentID\",\"params\":{\"_instanceID\":\"to withdraw money from the lock contract\"}}},\"title\":\"DBNS\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{\"withdraw(bytes32)\":{\"notice\":\"We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DBNS.sol\":\"DBNS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\\\";\\n\\ninterface TablelandTablesImpl is ITablelandTables, IERC721AUpgradeable {}\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Sepolia.\\n    address internal constant ARBITRUM_SEPOLIA =\\n        0x223A74B8323914afDC3ff1e5005564dC17231d6e;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/tableland-js/tree/main/packages/local.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (TablelandTablesImpl) {\\n        if (block.chainid == 1) {\\n            return TablelandTablesImpl(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return TablelandTablesImpl(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return TablelandTablesImpl(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return TablelandTablesImpl(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return TablelandTablesImpl(MATIC);\\n        } else if (block.chainid == 314) {\\n            return TablelandTablesImpl(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return TablelandTablesImpl(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return TablelandTablesImpl(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421614) {\\n            return TablelandTablesImpl(ARBITRUM_SEPOLIA);\\n        } else if (block.chainid == 80001) {\\n            return TablelandTablesImpl(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return TablelandTablesImpl(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return TablelandTablesImpl(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the Tableland gateway base URI for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function getBaseURI() internal view returns (string memory) {\\n        if (block.chainid == 1) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 10) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42161) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42170) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 137) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 11155111) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 420) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 421613) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 80001) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314159) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 31337) {\\n            return \\\"http://localhost:8080/api/v1/\\\";\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad243cc2a9da78a4536c5f67749fa0a6e2646da29acf0c916ae090488b77cfce\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n*/\\n\\n\\ninterface IPublicLockV12\\n{\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n  function KEY_GRANTER_ROLE() external view returns (bytes32 role);\\n  function LOCK_MANAGER_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything. \\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock: \\n   * \\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply \\n   */\\n   function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign \\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns(string memory);\\n\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  * @return tokenIds the ids of the created tokens \\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n\\n  /**\\n  * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  * @param _referrer the address of the referrer\\n  * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  */\\n  function referrerFees(address _referrer) external view returns (uint referrerFee);\\n  \\n  /**\\n  * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing, \\n  * extending or renewing a key. \\n  * @param _referrer the address of the referrer\\n  * @param _feeBasisPoint the percentage of the price to be used for this \\n  * specific referrer (in basis points)\\n  * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n  */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  \\n /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyPurchaseHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyCancelHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onValidKeyHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyExtendHook() external view returns(address hookAddress);\\n\\n  /**\\n  * Returns the address of the `onKeyGrantHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyGrantHook() external view returns(address hookAddress);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(address _keyOwner) external view returns (uint numberOfKeys);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n  */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /** \\n  * an ERC721-like function to transfer a token from one account to another. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n  * either {approve} or {setApprovalForAll}. \\n  * The key manager will be reset to address zero after the transfer\\n  */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /** \\n  * Lending a key allows you to transfer the token while retaining the\\n  * ownerships right by setting yourself as a key manager first. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n  * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n  * will become the key manager.\\n  */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /** \\n  * Unlend is called when you have lent a key and want to claim its full ownership back. \\n  * @param _recipient the address that will receive the token ownership\\n  * @param _tokenId the id of the token\\n  * @dev Only the key manager of the token can call this function\\n  */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n  * @notice Get the approved address for a single NFT\\n  * @dev Throws if `_tokenId` is not a valid NFT.\\n  * @param _tokenId The NFT to find the approved address for\\n  * @return operator The approved address for this NFT, or the zero address if there is none\\n  */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @param _tokenId the id of the token to transfer time from\\n    * @param _to the recipient of the new token with time\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    * @return success the result of the transfer operation\\n    */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address owner);\\n  function setOwner(address account) external;\\n  function isOwner(address account) view external returns (bool isOwner);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2eb51bbb40902800df5120160f1fd006303c8c0026b57dcb2fe97905579a7227\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @title The Unlock Interface\\n **/\\n\\ninterface IUnlockV12 {\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n   * @dev deploy a ProxyAdmin contract used to upgrade locks\\n   */\\n  function initializeProxyAdmin() external;\\n\\n  /**\\n   * Retrieve the contract address of the proxy admin that manages the locks\\n   * @return _proxyAdminAddress the address of the ProxyAdmin instance\\n   */\\n  function proxyAdminAddress()\\n    external\\n    view\\n    returns (address _proxyAdminAddress);\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Create lock (default)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(\\n    bytes memory data\\n  ) external returns (address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Upgrade a lock to a specific version\\n   * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n   * @param lockAddress the existing lock address\\n   * @param version the version number you are targeting\\n   * Likely implemented with OpenZeppelin TransparentProxy contract\\n   */\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address);\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  ) external;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  ) external view;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  ) external pure returns (uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId() external view returns (uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(\\n    address impl,\\n    uint16 version\\n  ) external;\\n\\n  /**\\n   * Match lock templates addresses with version numbers\\n   * @param _version the number of the version of the template\\n   * @return _implAddress address of the lock templates\\n   */\\n  function publicLockImpls(\\n    uint16 _version\\n  ) external view returns (address _implAddress);\\n\\n  /**\\n   * Match version numbers with lock templates addresses\\n   * @param _impl the address of the deployed template contract (PublicLock)\\n   * @return number of the version corresponding to this address\\n   */\\n  function publicLockVersions(\\n    address _impl\\n  ) external view returns (uint16);\\n\\n  /**\\n   * Retrive the latest existing lock template version\\n   * @return _version the version number of the latest template (used to deploy contracts)\\n   */\\n  function publicLockLatestVersion()\\n    external\\n    view\\n    returns (uint16 _version);\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct()\\n    external\\n    view\\n    returns (uint);\\n\\n  function totalDiscountGranted()\\n    external\\n    view\\n    returns (uint);\\n\\n  function locks(\\n    address\\n  )\\n    external\\n    view\\n    returns (\\n      bool deployed,\\n      uint totalSales,\\n      uint yieldedDiscountTokens\\n    );\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress()\\n    external\\n    view\\n    returns (address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(\\n    address\\n  ) external view returns (address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns (address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns (address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase()\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * Set the fee collected by the protocol\\n   * @param _protocolFee fee (in basis points)\\n   */\\n  function setProtocolFee(uint _protocolFee) external;\\n\\n  /**\\n   * The fee (in basis points) collected by the protocol on each purchase / \\n   extension / renewal of a key\\n   * @return the protocol fee in basic point\\n   */\\n  function protocolFee() external view returns (uint);\\n\\n  \\n  /**\\n   * Returns the ProxyAdmin contract address that manage upgrades for \\n   * the current Unlock contract.\\n   * @dev this reads the address directly from storage, at the slot `_ADMIN_SLOT` \\n   * defined by Open Zeppelin's EIP1967 Proxy implementation which corresponds\\n   * to the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n   */\\n   function getAdmin() external view returns (address);\\n\\n  /**\\n   * Call executed by a lock after its version upgrade triggred by `upgradeLock`\\n   * - PublicLock v12 > v13 (mainnet): migrate an existing Lock to another instance \\n   * of the Unlock contract\\n   * @dev The `msg.sender` will be the upgraded lock\\n   */\\n  function postLockUpgrade() external;\\n}\\n\",\"keccak256\":\"0xfa4c0a7d63692de5c4898b4e3d942552ba678235184d4f55fe3c3730b79b572a\",\"license\":\"MIT\"},\"contracts/DBNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Core} from \\\"./libraries/Core.sol\\\";\\n\\n/**\\n * @title DBNS\\n * @dev Create a decentralized Database NameSpaces\\n * Where space and subSpaces can get created and anyone can\\n * create instances inside a space and contribute to the public\\n * this is possible by integrating tableland SQL in solidity\\n * ENS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n */\\ncontract DBNS is Core {\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        address _unlockContract,\\n        address _gateImplementation\\n    )\\n        Core(\\n            _registry,\\n            _registrar,\\n            _publicResolver,\\n            _unlockContract,\\n            _gateImplementation\\n        )\\n    {}\\n\\n    /**\\n     * @dev Create a new space under the given node\\n     * @param _name The name of the new space\\n     */\\n    function createDBSpace(\\n        string calldata _name,\\n        string calldata _subspace\\n    ) public {\\n        bytes32 _newDBSpace = createSubNode(DBNS_NODE, _name);\\n\\n\\n\\n        isType[_newDBSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSpace, DBNS_NODE, _name, _subspace);\\n    }\\n\\n    /**\\n     * @dev Create a new subnode under the given node\\n     * @param _DBSpace The parent node\\n     * @param _name The name of the new subnode\\n     */\\n    function createDBSubSpace(\\n        bytes32 _DBSpace,\\n        string calldata _name,\\n        string calldata _subspace\\n    ) external {\\n        require(\\n            isType[_DBSpace] == Types.SUBNODE,\\n            \\\"DBNS: Node is not a subnode\\\"\\n        );\\n\\n        bytes32 _newDBSubSpace = createSubNode(_DBSpace, _name);\\n\\n        isType[_newDBSubSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSubSpace, _DBSpace, _name, _subspace);\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _node The parent node\\n     * @param _members The hatID of the new instance\\n     * @param _metadataCID The name of the new instance\\n     * @param _chatID The chatID of the new instance\\n     * @param _IPNS The IPNS of the new instance\\n     */\\n    function createSpaceInstance(\\n        bytes32 _node,\\n        uint256 _price,\\n        address[] calldata _members,\\n        string calldata _metadataCID,\\n        string calldata _chatID,\\n        string calldata _IPNS\\n    ) external {\\n        require(isType[_node] == Types.SUBNODE, \\\"DBNS: Node is not a subnode\\\");\\n\\n        bytes32 _newDBInstance = keccak256(abi.encodePacked(_node, _IPNS));\\n\\n        if(isType[_newDBInstance] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        address _gatedContract;\\n        if (_members.length > 0) {\\n            _gatedContract = createGatedContract(_members);\\n            insertMembers(_newDBInstance, _members);\\n        }\\n\\n        instances[_newDBInstance] = SpaceInstance(\\n            _gatedContract,\\n            _price,\\n            msg.sender\\n        );\\n\\n        address _lock = createInstanceType(\\n            _newDBInstance,\\n            _gatedContract,\\n            _price\\n        );\\n\\n        instanceInsertion(\\n            _lock,\\n            _newDBInstance,\\n            uint8(isType[_newDBInstance]),\\n            _node,\\n            _gatedContract,\\n            _price,\\n            _metadataCID,\\n            _chatID,\\n            _IPNS,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _instance The parent node\\n     * @param _name The name of the new instance\\n     * @param _about The about of the new instance\\n     * @param _chatID The chatID of the new instance\\n     * @param _codeIPNS The IPNS of the new instance\\n     */\\n    function createInstanceCode(\\n        bytes32 _instance,\\n        string calldata _name,\\n        string calldata _about,\\n        string calldata _chatID,\\n        string calldata _codeIPNS\\n    ) external {\\n        if (!hasMutateAccess(_instance, msg.sender)) {\\n            revert NoInstanceAccess();\\n        }\\n\\n        bytes32 _newDBInstanceCode = keccak256(\\n            abi.encodePacked(_instance, _codeIPNS)\\n        );\\n\\n        if (isType[_newDBInstanceCode] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        codeOwner[_newDBInstanceCode] = msg.sender;\\n        isType[_newDBInstanceCode] = Types.CODE;\\n\\n        InsertInstanceCode(\\n            _instance,\\n            _newDBInstanceCode,\\n            _name,\\n            _about,\\n            _chatID,\\n            _codeIPNS,\\n            msg.sender\\n        );\\n    }\\n\\n    function purchaseInstanceSubscription(\\n        bytes32 _instanceID\\n    ) external payable {\\n        uint256 _tokenID = purchaseSubscription(_instanceID);\\n        insertSubscription(\\n            _instanceID,\\n            msg.sender,\\n            _tokenID,\\n            block.timestamp + MONTH\\n        );\\n    }\\n\\n    function extendInstanceSubscription(\\n        bytes32 _instanceID\\n    ) external payable {\\n        uint256 remaining = getRemainingSubscriptionTime(_instanceID, msg.sender);\\n        uint256 _tokenID = extendSubscription(_instanceID);\\n        insertSubscription(\\n            _instanceID,\\n            msg.sender,\\n            _tokenID,\\n            remaining + MONTH\\n        );\\n    }\\n\\n    function updateCode(\\n        bytes32 _codeID,\\n        string calldata _name,\\n        string calldata _about\\n    ) external {\\n        if (codeOwner[_codeID] != msg.sender) {\\n            revert NoCodeOwner();\\n        }\\n\\n        // UpdateInstanceCode(\\n        //     _codeID,\\n        //     _name,\\n        //     _about,\\n        //     _chatID,\\n        //     _codeIPNS,\\n        //     msg.sender\\n        // );\\n    }\\n\\n    function updateInstance(\\n        bytes32 _instance,\\n        uint256 _hatID,\\n        uint256 _price,\\n        string calldata _name,\\n        string calldata _about,\\n        string calldata _img,\\n        string calldata _chatID,\\n        string calldata _IPNS\\n    ) external {\\n        if (instances[_instance].creator != msg.sender) {\\n            revert NoInstanceAccess();\\n        }\\n\\n        // UpdateInstance(\\n        //     _instance,\\n        //     _hatID,\\n        //     _price,\\n        //     _name,\\n        //     _about,\\n        //     _img,\\n        //     _chatID,\\n        //     _IPNS,\\n        //     msg.sender\\n        // );\\n    }\\n}\\n\",\"keccak256\":\"0x82081564af2bc8a17902f52e77dc0b4853511152829612243e26b0c3bd327b76\",\"license\":\"MIT\"},\"contracts/interfaces/IENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IFNSResolver {\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) external;\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\\ninterface IFNS {\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n}\\n\\ninterface IFNSRegistrar {\\n    function reclaim(uint256 id, address _owner) external;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf40e25db39d4c7385c71959d99e7a4256c226bfcd6129a1fea10e2f34b3c26ca\",\"license\":\"MIT\"},\"contracts/libraries/Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {FNS} from \\\"./FNS.sol\\\";\\n\\nimport {Gated, IGated} from \\\"./Gated.sol\\\";\\n\\nimport {Unlock} from \\\"./Unlock.sol\\\";\\n\\nimport {Tableland} from \\\"./Tableland.sol\\\";\\n\\n/**\\n * @title Core\\n * @dev Interface for the Ens system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract Core is FNS, Gated, Tableland, Unlock {\\n    enum Types {\\n        NULL,\\n        PAID_PRIVATE_INSTANCE,\\n        OPEN_PRIVATE_INSTANCE,\\n        PAID_INSTANCE,\\n        OPEN_INSTANCE,\\n        SUBNODE,\\n        CODE\\n    }\\n\\n    struct SpaceInstance {\\n        address gatedContract;\\n        uint256 price;\\n        address creator;\\n    }\\n\\n    mapping(bytes32 => SpaceInstance) public instances;\\n\\n    mapping(bytes32 => address) public codeOwner;\\n\\n    mapping(bytes32 => Types) public isType;\\n\\n    error NoCodeOwner();\\n\\n    error InstanceAlreadyExists();\\n\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        address _UnlockContract,\\n        address _gatedImplementation\\n    )\\n        FNS(_registry, _registrar, _publicResolver)\\n        Gated(_gatedImplementation)\\n        Tableland()\\n        Unlock(_UnlockContract)\\n    {}\\n\\n    /**\\n     * @dev createInstanceType\\n     * @param _newDBInstance The new instance\\n     * @param _gatedContract The gatedContract of the new instance\\n     * @param _price The price of the new instance\\n     */\\n    function createInstanceType(\\n        bytes32 _newDBInstance,\\n        address _gatedContract,\\n        uint256 _price\\n    ) internal returns (address _lock) {\\n        bool _isPrivate = _gatedContract != address(0);\\n        if (_price > 0) {\\n            isType[_newDBInstance] = Types.PAID_INSTANCE;\\n            _lock = createLock(_price, \\\"DBNS\\\", _newDBInstance);\\n        } else if (_isPrivate && _price > 0) {\\n            isType[_newDBInstance] = Types.PAID_PRIVATE_INSTANCE;\\n            _lock = createLock(_price, \\\"DBNS\\\", _newDBInstance);\\n        } else if (_isPrivate) {\\n            isType[_newDBInstance] = Types.OPEN_PRIVATE_INSTANCE;\\n        } else {\\n            isType[_newDBInstance] = Types.OPEN_INSTANCE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if the sender has access to the given instance\\n     * @param _instance The instance to check\\n     * @param _sender The sender to check\\n     * @return bool\\n     */\\n    function hasViewAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        if (isType[_instance] == Types.PAID_INSTANCE) {\\n            return hasActiveSubscription(_instance, _sender);\\n        } else if (isType[_instance] == Types.PAID_PRIVATE_INSTANCE) {\\n            return\\n                getAccess(_sender, _gatedAddress) ||\\n                hasActiveSubscription(_instance, _sender);\\n        } else if (\\n            isType[_instance] == Types.OPEN_PRIVATE_INSTANCE ||\\n            isType[_instance] == Types.OPEN_INSTANCE\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function hasMutateAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool access) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        Types _instanceType = isType[_instance];\\n        if (_instanceType == Types.PAID_INSTANCE) {\\n            access = instances[_instance].creator == _sender;\\n        } else if (_instanceType == Types.PAID_PRIVATE_INSTANCE) {\\n            access = getAccess(_sender, _gatedAddress);\\n        } else if (_instanceType == Types.OPEN_PRIVATE_INSTANCE) {\\n            access = getAccess(_sender, _gatedAddress);\\n        } else if (_instanceType == Types.OPEN_INSTANCE) {\\n            access = true;\\n        }\\n        uint8 _isType = uint8(_instanceType);\\n        if (_isType > 4 || _instanceType == Types.NULL) {\\n            access = false;\\n        }\\n    }\\n\\n    function insertNewMerbers(\\n        bytes32 _instance,\\n        address[] memory _members\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).mint(_members);\\n        }\\n    }\\n\\n    function removeMembers(\\n        bytes32 _instance,\\n        uint256[] memory _tokens\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).burn(_tokens);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3836a4bb08a8146c1592c3c79d59e00c166f89f82061f02128a7ca51af46e8d\",\"license\":\"MIT\"},\"contracts/libraries/FNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IFNSResolver, IFNS, IFNSRegistrar} from \\\"../interfaces/IENSResolver.sol\\\";\\n\\n/**\\n * @title FNS\\n * @dev Interface for the FNS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract FNS is IERC721Receiver {\\n    IFNS public immutable REGISTRY;\\n    IFNSRegistrar public immutable REGISTRAR;\\n    IFNSResolver public immutable PUBLIC_RESOLVER;\\n\\n    bytes32 public DBNS_NODE;\\n    bytes32 private constant ETH_NODE =\\n        0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    error NoInstanceAccess();\\n    error InvalidTokenAmount();\\n    error InvalidTokenSender();\\n\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver\\n    ) {\\n        REGISTRY = IFNS(_registry);\\n        REGISTRAR = IFNSRegistrar(_registrar);\\n        PUBLIC_RESOLVER = IFNSResolver(_publicResolver);\\n    }\\n\\n    /*\\n     * @dev Function to create a new subnode.\\n     * @param {bytes32} node - Parent node.\\n     * @param {string} subNode - Subnode name.\\n     * @return {bytes32} - New subnode.\\n     */\\n    function createSubNode(\\n        bytes32 node,\\n        string memory subNode\\n    ) internal returns (bytes32 newSubNode) {\\n        bytes32 label = keccak256(bytes(subNode));\\n\\n        REGISTRY.setSubnodeRecord(\\n            // Gaming character subnode\\n            node,\\n            // Character tokenID as sub.subdomain to the gaming character subdomain\\n            label,\\n            // Owner\\n            address(this),\\n            // Resolver\\n            address(PUBLIC_RESOLVER),\\n            // TTL\\n            0\\n        );\\n\\n        newSubNode = keccak256(abi.encodePacked(node, label));\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(REGISTRAR)) {\\n            revert InvalidTokenSender();\\n        }\\n\\n        if (DBNS_NODE == bytes32(0)) {\\n            DBNS_NODE = keccak256(abi.encodePacked(ETH_NODE, bytes32(tokenId)));\\n        }\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    // NEEDS TO GET REMOVED ONLY FOR TESTING\\n    function transferDomain(address recipient) public {\\n        PUBLIC_RESOLVER.setAddr(DBNS_NODE, recipient);\\n        REGISTRAR.reclaim(uint256(DBNS_NODE), recipient);\\n        REGISTRAR.safeTransferFrom(\\n            address(this),\\n            recipient,\\n            uint256(DBNS_NODE)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x933fc0287eb36184897fe1045833e633b3b427772d6a2660b23fc754a8b96a69\",\"license\":\"MIT\"},\"contracts/libraries/Gated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IGated {\\n    function mint(address[] memory newMembers) external;\\n\\n    function burn(uint256[] memory _tokens) external;\\n}\\n\\nabstract contract Gated {\\n    address internal implementation;\\n\\n    // Constructor\\n    constructor(address _implementation) {\\n        implementation = _implementation;\\n    }\\n\\n    // Function to create a new OptimisticResolver contract and associate it with a schema\\n    function createGatedContract(\\n        address[] memory _members\\n    ) internal returns (address accessControlClone) {\\n        // Create new resolver contract\\n        accessControlClone = Clones.clone(implementation);\\n\\n        (bool success, ) = accessControlClone.call(\\n            abi.encodeWithSignature(\\\"initialize(address[])\\\", _members)\\n        );\\n\\n        require(success, \\\"error deploying\\\");\\n    }\\n\\n    function getAccess(\\n        address _sender,\\n        address _gatedContract\\n    ) public view returns (bool) {\\n        return IERC721(_gatedContract).balanceOf(_sender) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xcbfa8c860e188646942bd2db4bc9f0314d629ed8cc56a9edb9d96073096b2533\",\"license\":\"MIT\"},\"contracts/libraries/Tableland.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {TablelandDeployments} from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport {ITablelandTables} from \\\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\\\";\\n\\nimport {SQLHelpers} from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract Tableland {\\n    ITablelandTables public immutable TABLELAND;\\n\\n    string[] internal createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256[] public tableIDs;\\n\\n    string internal constant DBSPACES_TABLE_PREFIX = \\\"db_spaces\\\";\\n\\n    string internal constant DBSPACES_SCHEMA =\\n        \\\"DBSpaceID text, DBSubSpaceOfID text, DBSpaceName text, DBSubSpaceOfName text\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_TABLE_PREFIX =\\n        \\\"db_spaces_instances\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_SCHEMA =\\n        \\\"InstanceID text, instanceOfSpace text, instanceType text, metadataCID text, chatID text, IPNS text, gatedContract text, price text, lock text, creator text\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_TABLE_PREFIX =\\n        \\\"instances_codes\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_SCHEMA =\\n        \\\"InstanceID text, codeID text, name text, about text, chatID text, codeIPNS text, creator text\\\";\\n\\n    string internal constant SUBSCRIPTIONS_TABLE_PREFIX = \\\"subscriptions\\\";\\n\\n    string internal constant SUBSCRIPTIONS_SCHEMA =\\n        \\\"InstanceID text, subscriber text, tokenID text, endsAt text\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_TABLE_PREFIX = \\\"members\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_SCHEMA =\\n        \\\"InstanceID text, member text\\\";\\n\\n    constructor() {\\n        TABLELAND = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_SCHEMA,\\n                DBSPACES_TABLE_PREFIX\\n            )\\n        );\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_INSTANCES_SCHEMA,\\n                DBSPACES_INSTANCES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_CODES_SCHEMA,\\n                DB_INSTANCES_CODES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                SUBSCRIPTIONS_SCHEMA,\\n                SUBSCRIPTIONS_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_MEMBERS_SCHEMA,\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX\\n            )\\n        );\\n\\n        tableIDs = TABLELAND.create(address(this), createTableStatements);\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(DBSPACES_TABLE_PREFIX, tableIDs[0])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1]\\n            )\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2]\\n            )\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(SUBSCRIPTIONS_TABLE_PREFIX, tableIDs[3])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                tableIDs[4]\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new space.\\n     * @param {bytes32} DBSpaceID - DBSpace ID.\\n     * @param {bytes32} DBSubSpaceOfID - DBSubSpaceOf ID.\\n     * @param {string} DBSpaceName - Name of the space.\\n     * @param {string} DBSubSpaceOfName - Name of the sub space.\\n     */\\n\\n    function spaceInsertion(\\n        bytes32 DBSpaceID,\\n        bytes32 DBSubSpaceOfID,\\n        string memory DBSpaceName,\\n        string memory DBSubSpaceOfName\\n    ) internal {\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                DBSPACES_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"DBSpaceID, DBSubSpaceOfID, DBSpaceName, DBSubSpaceOfName\\\",                    \\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(DBSpaceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(DBSubSpaceOfID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(DBSpaceName),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(DBSubSpaceOfName)\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {bytes32} instanceOfSpace - DBSpace ID.\\n     * @param {string} name - Name of the instance.\\n     * @param {string} about - About of the instance.\\n     * @param {string} img - Image of the instance.\\n     * @param {string} chatID - Chat ID of the instance.\\n     * @param {string} IPNS - IPNS of the instance.\\n     * @param {address} creator - Creator of the instance.\\n     */\\n\\n    function instanceInsertion(\\n        address _lock,\\n        bytes32 _instanceID,\\n        uint8 _lockType,\\n        bytes32 _instanceOfSpace,\\n        address _gatedContract,\\n        uint256 price,\\n        string memory metadataCID,\\n        string memory chatID,\\n        string memory IPNS,\\n        address creator\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toInsert(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                \\\"InstanceID, instanceOfSpace, instanceType, metadataCID, chatID, IPNS, gatedContract, price, lock, creator\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_instanceOfSpace)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(_lockType)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(metadataCID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(chatID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(_gatedContract)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(price)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(_lock)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(creator))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance code.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {string} name - Name of the instance code.\\n     * @param {string} about - About of the instance code.\\n     * @param {string} chatID - Chat ID of the instance code.\\n     * @param {string} codeIPNS - IPNS of the instance code.\\n     * @param {address} creator - Creator of the instance code.\\n     */\\n\\n    function InsertInstanceCode(\\n        bytes32 _instanceID,\\n        bytes32 _codeID,\\n        string memory name,\\n        string memory about,\\n        string memory chatID,\\n        string memory codeIPNS,\\n        address creator\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"InstanceID, codeID, name, about, chatID, codeIPNS, creator\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_codeID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(name),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(about),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(chatID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(codeIPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(creator))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceMetadata(\\n        bytes32 InstanceID,\\n        string memory metadataCID\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toUpdate(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                string.concat(\\\"metadataCID = \\\", SQLHelpers.quote(metadataCID)),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceCode(\\n        bytes32 codeID,\\n        string memory name,\\n        string memory about\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toUpdate(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                string.concat(\\n                    \\\"name = \\\",\\n                    SQLHelpers.quote(name),\\n                    \\\", about = \\\",\\n                    SQLHelpers.quote(about)\\n                ),\\n                string.concat(\\n                    \\\"codeID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(codeID))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new subscription.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address} subscriber - Subscriber address.\\n     * @param {uint256} tokenID - Subscription token ID.\\n     * @param {uint256} endsAt - Subscription end date.\\n     */\\n    function insertSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 tokenID,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"InstanceID, subscriber, tokenID, endsAt\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(tokenID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toUpdate(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                string.concat(\\n                    \\\"endsAt = \\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                ),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\" AND subscriber = \\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert the members.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address[]} members - Members address array.\\n     */\\n    function insertMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toInsert(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    \\\"InstanceID, member\\\",\\n                    string.concat(\\n                        SQLHelpers.quote(id),\\n                        \\\",\\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function removeMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toDelete(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    string.concat(\\n                        \\\"InstanceID = \\\",\\n                        SQLHelpers.quote(id),\\n                        \\\" AND member = \\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @dev Internal function to convert bytes32 to string.\\n     * @param {bytes32} data - Data to convert.\\n     * @return {string} - Converted data.\\n     */\\n\\n    function bytes32ToString(\\n        bytes32 data\\n    ) internal pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        TABLELAND.mutate(address(this), tableId, statement);\\n    }\\n}\\n\",\"keccak256\":\"0x3301ba90ea0f5b60ef4ca485b3d033da7863fa206225fa9bf60674313c91bce1\",\"license\":\"MIT\"},\"contracts/libraries/Unlock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IUnlockV12} from \\\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\\\";\\n\\nimport {IPublicLockV12} from \\\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Unlock is Ownable {\\n    error SubscribeToGainAccess();\\n    error NoInstanceCreator();\\n\\n    uint256 internal constant MONTH = 30 days;\\n    uint256 internal constant MAX = type(uint256).max;\\n\\n    struct InstanceStruct {\\n        address creator;\\n        address lockAddress;\\n    }\\n\\n    mapping(bytes32 => mapping(address => uint256))\\n        public instanceSubscriptions;\\n\\n    mapping(bytes32 => InstanceStruct) public instanceLock;\\n\\n    IUnlockV12 UNLOCK;\\n\\n    constructor(address _unlockContract) {\\n        UNLOCK = IUnlockV12(_unlockContract);\\n    }\\n\\n    function createLock(\\n        uint256 _keyPrice,\\n        string memory _lockName,\\n        bytes32 _instanceID\\n    ) internal returns (address newLock) {\\n        newLock = UNLOCK.createLock(\\n            // Expiration duration of subscription\\n            MONTH,\\n            address(0),\\n            _keyPrice,\\n            MAX,\\n            _lockName,\\n            bytes12(0)\\n        );\\n\\n        IPublicLockV12(newLock).setReferrerFee(\\n            address(0),\\n            // 0.5% DBNS protocol fee\\n            50\\n        );\\n        IPublicLockV12(newLock).setEventHooks(\\n            // onKeyPurchase hook\\n            address(this),\\n            address(0),\\n            address(0),\\n            // tokenURI hook\\n            // address(this),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0)\\n        );\\n\\n        instanceLock[_instanceID] = InstanceStruct({\\n            creator: msg.sender,\\n            lockAddress: newLock\\n        });\\n    }\\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _instanceID to subscribe\\n     */\\n    function purchaseSubscription(\\n        bytes32 _instanceID\\n    ) internal returns (uint256 _tokenID) {\\n        address[] memory _referrers = new address[](1);\\n        address[] memory _recipients = new address[](1);\\n        address[] memory _keyManagers = new address[](1);\\n        uint256[] memory _values = new uint256[](1);\\n        bytes[] memory _data = new bytes[](1);\\n        uint256[] memory tokenID = new uint256[](1);\\n\\n        address lockAddress = instanceLock[_instanceID].lockAddress;\\n        uint _priceToPay = IPublicLockV12(lockAddress).keyPrice();\\n\\n        _referrers[0] = address(this);\\n\\n        _values[0] = _priceToPay;\\n\\n        _recipients[0] = msg.sender;\\n\\n        tokenID = IPublicLockV12(lockAddress).purchase{value: msg.value}(\\n            _values,\\n            _recipients,\\n            _referrers,\\n            _keyManagers,\\n            _data\\n        );\\n\\n        _tokenID = tokenID[0];\\n\\n        instanceSubscriptions[_instanceID][msg.sender] = _tokenID;\\n    }\\n\\n    function extendSubscription(\\n        bytes32 _instanceID\\n    ) internal returns (uint256 _tokenId){\\n        _tokenId = instanceSubscriptions[_instanceID][msg.sender];\\n        bytes memory _data;\\n\\n        address _referrer = address(this);\\n\\n        address lockAddress = instanceLock[_instanceID].lockAddress;\\n\\n        uint _priceToPay = IPublicLockV12(lockAddress).keyPrice();\\n\\n        IPublicLockV12(lockAddress).extend{value: msg.value}(\\n            _priceToPay,\\n            _tokenId,\\n            _referrer,\\n            _data\\n        );\\n    }\\n\\n    function hasActiveSubscription(\\n        bytes32 _instanceID,\\n        address _subscriber\\n    ) public view returns (bool) {\\n        return\\n            IPublicLockV12(instanceLock[_instanceID].lockAddress).balanceOf(\\n                _subscriber\\n            ) > 0;\\n    }\\n\\n    function getRemainingSubscriptionTime(\\n        bytes32 _instanceID,\\n        address _subscriber\\n    ) public view returns (uint256) {\\n        uint256 _tokenID = instanceSubscriptions[_instanceID][_subscriber];\\n\\n        return\\n            IPublicLockV12(instanceLock[_instanceID].lockAddress).keyExpirationTimestampFor(\\n                _tokenID\\n            );\\n    }\\n\\n    function getTime() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev withdraw function for an agentID\\n     * @notice We give back to the agent creator 70% of the total\\n     * income from that agent the platform keeps 30% of that amount\\n     * @param _instanceID to withdraw money from the lock contract\\n     */\\n    function withdraw(bytes32 _instanceID) external {\\n        InstanceStruct memory _instance = instanceLock[_instanceID];\\n\\n        if (msg.sender != _instance.creator) {\\n            revert NoInstanceCreator();\\n        }\\n\\n        IPublicLockV12 lockContract = IPublicLockV12(_instance.lockAddress);\\n\\n        uint256 balance = address(_instance.lockAddress).balance;\\n\\n        lockContract.withdraw(address(0), payable(address(this)), balance);\\n\\n        address payable withdrawer = payable(_instance.creator);\\n\\n        Address.sendValue(withdrawer, balance);\\n    }\\n\\n    // Function to receive Ethers\\n    receive() external payable {}\\n\\n    // Function to withdraw the platform income\\n    function withdraw() external onlyOwner {\\n        address payable withdrawer = payable(msg.sender);\\n\\n        Address.sendValue(withdrawer, address(this).balance);\\n    }\\n\\n    // Unlock Protocol custom hooks\\n\\n    function onKeyPurchase(\\n        uint /* tokenId */,\\n        address from,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */,\\n        uint /* minKeyPrice */,\\n        uint /* pricePaid */\\n    ) external view {\\n        require(from == address(this));\\n    }\\n\\n    function keyPurchasePrice(\\n        address /* from */,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */\\n    ) external view returns (uint minKeyPrice) {\\n        return IPublicLockV12(msg.sender).keyPrice();\\n    }\\n}\\n\",\"keccak256\":\"0x4d5196f758fa8a3c5d6caf847086024c2a5431f832dc1771ac030d184a4691de\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    /**\\n     * `_sequentialUpTo()` must be greater than `_startTokenId()`.\\n     */\\n    error SequentialUpToTooSmall();\\n\\n    /**\\n     * The `tokenId` of a sequential mint exceeds `_sequentialUpTo()`.\\n     */\\n    error SequentialMintExceedsLimit();\\n\\n    /**\\n     * Spot minting requires a `tokenId` greater than `_sequentialUpTo()`.\\n     */\\n    error SpotMintTokenIdTooSmall();\\n\\n    /**\\n     * Cannot mint over a token that already exists.\\n     */\\n    error TokenAlreadyExists();\\n\\n    /**\\n     * The feature is not compatible with spot mints.\\n     */\\n    error NotCompatibleWithSpotMints();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xaeabed185f4b889c097e61ef486a003e64cdc2d048b569ebcd315ff52a63367b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101008060405234620007b45760a081620045bb8038038091620000248285620008b5565b833981010312620007b4576200003a81620008d9565b6200004860208301620008d9565b6200005660408401620008d9565b906200007360806200006b60608701620008d9565b9501620008d9565b6001600160a01b0393841660805290831660a05290821660c052600180546001600160a01b031916918316919091179055620000ae62000f71565b1660e052620001446200013e604051620000c8816200087d565b604c81527f44425370616365494420746578742c20444253756253706163654f664944207460208201527f6578742c20444253706163654e616d6520746578742c2044425375625370616360408201526b1953d993985b59481d195e1d60a21b6060820152620001376200090a565b9062000ef4565b62000987565b60405160c081016001600160401b03811182821017620006f75762000237916200013e91604052609b81527f496e7374616e6365494420746578742c20696e7374616e63654f66537061636560208201527f20746578742c20696e7374616e63655479706520746578742c206d657461646160408201527f746143494420746578742c2063686174494420746578742c2049504e5320746560608201527f78742c206761746564436f6e747261637420746578742c20707269636520746560808201527f78742c206c6f636b20746578742c2063726561746f722074657874000000000060a08201526200013762000c23565b620002cd6200013e6040516200024d816200087d565b605d81527f496e7374616e6365494420746578742c20636f6465494420746578742c206e6160208201527f6d6520746578742c2061626f757420746578742c20636861744944207465787460408201527f2c20636f646549504e5320746578742c2063726561746f72207465787400000060608201526200013762000c5e565b604051606081016001600160401b03811182821017620006f7576200034e916200013e91604052603b81527f496e7374616e6365494420746578742c2073756273637269626572207465787460208201527f2c20746f6b656e494420746578742c20656e647341742074657874000000000060408201526200013762000c8b565b620003986200013e604051620003648162000899565b601c81527f496e7374616e6365494420746578742c206d656d62657220746578740000000060208201526200013762000cb6565b60018060a01b0360e05116604051906361a23d0f60e01b8252816044810130600483015260406024830152600254809152606482019060648160051b8401019160026000526020600020916000915b818310620007c557505050509181600081819503925af1908115620007b9576000916200070d575b508051906001600160401b038211620006f757680100000000000000008211620006f75760209060045483600455808410620006d6575b50016004600052602060002060005b838110620006c15784620004686200090a565b60045415620006ab5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b54620004af91620004a9919062000d08565b62000af9565b620004b962000c23565b60045460011015620006ab5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c54620004fd91620004a9919062000d08565b6200050762000c5e565b60045460021015620006ab5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d546200054b91620004a9919062000d08565b6200055562000c8b565b60045460031015620006ab5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e546200059991620004a9919062000d08565b620005a362000cb6565b60045460041015620006ab5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f54620005e791620004a9919062000d08565b60058054336001600160a01b0319821681179092556040519291906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600880546001600160a01b0319166001600160a01b0392909216919091179055613498908162001123823960805181818161209e0152612753015260a0518181816107f8015281816116fa0152611f6e015260c0518181816101d20152818161169601526127a8015260e05181818161042e015261300a0152f35b634e487b7160e01b600052603260045260246000fd5b60019060208451940193818401550162000455565b620006f0906004600052848460002091820191016200096e565b3862000446565b634e487b7160e01b600052604160045260246000fd5b90503d806000833e620007218183620008b5565b810190602081830312620007b4578051906001600160401b038211620007b457019080601f83011215620007b4578151916001600160401b038311620006f7578260051b9060405193620007796020840186620008b5565b8452602080850192820101928311620007b457602001905b828210620007a357505050386200040f565b815181526020918201910162000791565b600080fd5b6040513d6000823e3d90fd5b878503606319018152835493955091939092600091620007e58262000931565b808252916001811690811562000859575060011462000818575b50506020600180929601920193019091869493620003e7565b909150856000526020600020916000925b81841062000842575050016020908101906001620007ff565b600181602092548387870101520193019262000829565b60ff191660208381019190915292151560051b9091018201925060019050620007ff565b608081019081106001600160401b03821117620006f757604052565b604081019081106001600160401b03821117620006f757604052565b601f909101601f19168101906001600160401b03821190821017620006f757604052565b51906001600160a01b0382168203620007b457565b6001600160401b038111620006f757601f01601f191660200190565b60405190620009198262000899565b600982526864625f73706163657360b81b6020830152565b90600182811c9216801562000963575b60208310146200094d57565b634e487b7160e01b600052602260045260246000fd5b91607f169162000941565b8181106200097a575050565b600081556001016200096e565b60025468010000000000000000811015620006f75760019182820180600255821015620006ab576002600090815281517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90930193602093929091906001600160401b03841162000ae557620009fe865462000931565b601f811162000aa7575b508491601f851160011462000a4457939450849291908362000a38575b50501b916000199060031b1c1916179055565b01519250388062000a25565b86815285812093958591601f198316915b8883831062000a8c575050501062000a72575b505050811b019055565b015160001960f88460031b161c1916905538808062000a68565b85870151885590960195948501948793509081019062000a55565b62000ad390878452868420601f870160051c81019188881062000ada575b601f0160051c01906200096e565b3862000a08565b909150819062000ac5565b634e487b7160e01b82526041600452602482fd5b60035468010000000000000000811015620006f75760019182820180600355821015620006ab576003600090815281517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90930193602093929091906001600160401b03841162000ae55762000b70865462000931565b601f811162000bf1575b508491601f851160011462000ba957939450849291908362000a385750501b916000199060031b1c1916179055565b86815285812093958591601f198316915b8883831062000bd6575050501062000a7257505050811b019055565b85870151885590960195948501948793509081019062000bba565b62000c1c90878452868420601f870160051c81019188881062000ada57601f0160051c01906200096e565b3862000b7a565b6040519062000c328262000899565b601382527f64625f7370616365735f696e7374616e636573000000000000000000000000006020830152565b6040519062000c6d8262000899565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b6040519062000c9a8262000899565b600d82526c737562736372697074696f6e7360981b6020830152565b6040519062000cc58262000899565b60078252666d656d6265727360c81b6020830152565b9081519160005b83811062000cf4575050016000815290565b806020809284010151818501520162000ce2565b62000d719062000d6262000d4493600162000d2e62000d274662000d74565b9262000d74565b9162000d57604051978896602088019062000cdb565b9183605f60f81b93848152019062000cdb565b908152019062000cdb565b03601f198101835282620008b5565b90565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101562000ee5575b506d04ee2d6d415b85acef81000000008083101562000ed5575b50662386f26fc100008083101562000ec5575b506305f5e1008083101562000eb5575b506127108083101562000ea5575b50606482101562000e94575b600a8092101562000e89575b6001908160218186019562000e1687620008ee565b9662000e266040519889620008b5565b80885262000e37601f1991620008ee565b01366020890137860101905b62000e50575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821562000e835791908262000e43565b62000e49565b916001019162000e01565b919060646002910491019162000df5565b6004919392049101913862000de9565b6008919392049101913862000ddb565b6010919392049101913862000dcb565b6020919392049101913862000db8565b60409350810491503862000d9e565b600162000f3c9262000f5a62000d71938362000f4b62000f144662000d74565b82604051998a976c021a922a0aa22902a20a126229609d1b60208a0152602d89019062000cdb565b605f60f81b8152019062000cdb565b600560fb1b8152019062000cdb565b602960f81b815203601e19810184520182620008b5565b4660010362000f925773012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a0362000fb35773fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b10362000fd557739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba0362000ff757731a22854c5b1642760a827f20137a67930ae108d290565b466089036200101857735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036200103a577359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a7036200105d5773c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a4036200107f5773c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eee03620010a25773223a74b8323914afdc3ff1e5005564dc17231d6e90565b466201388103620010c557734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f03620010e85773030bcf3d50cad04c2e57391b12740982a930862190565b46617a69036200110a5773e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b8152466004820152602490fdfe60a080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816306433b1b1461208a575080630c9ddf6d1461204657806311ad2f3414612013578063150b7a0214611f275780631e71b6e614611e66578063221c1fd114611db45780632711447f14611d67578063284e82e814611c055780633ccfd60b14611be25780633e20383514611bb357806344ce9a7a14611aca57806347d121c514611aa3578063557ed1ba14611a885780635e895f2914611a2657806367e0970914611969578063715018a61461190b57806371671bf2146117df578063822118461461166f57806384ec965314611642578063889753831461161b5780638a8fd250146115c95780638da5cb5b146115a05780638e19899e146114c957806396d565cb14610c565780639ad66a23146109295780639fb24cef14610896578063a5df63d614610865578063c6a36c4b14610827578063cb609077146107e2578063d0ed11101461045d578063d68d087c14610418578063db7baba9146103fb578063dd321bfc146103b4578063e2b1e4ed14610367578063f2fde38b146102a1578063f9737c7c146102045763ffeb4a300361000f57346102015780600319360112610201576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b503461020157610213366120fa565b9192848695929652600b60205260ff604086205416600781101561028d579561027c61028492610249600561028a999a1461246c565b61025d610257368984612435565b86612741565b808a52600b60205260408a20805460ff19166005179055963691612435565b933691612435565b92612949565b80f35b634e487b7160e01b86526021600452602486fd5b5034610201576020366003190112610201576102bb612149565b6102c36123c2565b6001600160a01b0390811690811561031357600554826001600160601b0360a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5034610201576020366003190112610201576004358152600b60205260ff6040822054166040519060078110156103a057602092508152f35b634e487b7160e01b83526021600452602483fd5b50346102015760403660031901126102015760406103d061215f565b9160043581526006602052209060018060a01b03166000526020526020604060002054604051908152f35b503461020157806003193601126102015760209054604051908152f35b50346102015780600319360112610201576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102015760a0366003190112610201576004356001600160401b036024358181116107de576104929036906004016120cd565b926044358381116107da576104ab9036906004016120cd565b9290916064358581116107d6576104c69036906004016120cd565b9390956084359081116107d2576104e19036906004016120cd565b9690916104ee33856125c8565b156107c05789948860405161052360408260209a8b8201958b8752808b8585013782019083820152038a8101845201826121d4565b519020998a8c52600b875260ff60408d20541660078110156107ac5761079a578a8c52600a875260408c20336001600160601b0360a01b825416179055600b875260408c2060ff198154166006179055369061057e92612435565b96369061058a92612435565b94369061059692612435565b9536906105a292612435565b6105aa6122d8565b97905496604051966105bb8861219e565b600f88526e696e7374616e6365735f636f64657360881b868901526105de6122d8565b949054956105eb90612ee4565b6105f490612c93565b936105fe90612ee4565b61060790612c93565b9161061190612c93565b9761061b90612c93565b9261062590612c93565b9061062f90612c93565b9061063933612cd3565b61064290612c93565b9360405199868b975190818c808b0192019161065d9261237a565b870194600b60fa1b95868c820152815191828d602184019201916106809261237a565b01856021820152815191828c6022840192019161069c9261237a565b01846022820152815191828b602384019201916106b89261237a565b01836023820152815191828a602484019201916106d49261237a565b018260248201528151918289602584019201916106f09261237a565b0190602582015281519182876026840192019161070c9261237a565b010360068101855260260161072190856121d4565b6040519261072e846121b9565b603a845283017f496e7374616e636549442c20636f646549442c206e616d652c2061626f75742c9052604083017f206368617449442c20636f646549504e532c2063726561746f72000000000000905260031b1c61078b93612a1e565b9160031b1c9061028a91613008565b604051631144626f60e01b8152600490fd5b634e487b7160e01b8d52602160045260248dfd5b6040516346627df160e01b8152600490fd5b8880fd5b8780fd5b8580fd5b8380fd5b50346102015780600319360112610201576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102015760203660031901126102015760408091600435815260076020522060018060a01b036001818354169201541682519182526020820152f35b503461020157604036600319011261020157602061088c61088461215f565b600435613254565b6040519015158152f35b5034610201576040366003190112610201576001600160401b03600435818111610925576108c89036906004016120cd565b916024359081116107de5761028a926108e86102849236906004016120cd565b929061027c61090388546108fd36878a612435565b90612741565b95868952600b60205260408920600560ff198254161790558854943691612435565b8280fd5b506003199060203683018113610c5257600435926040516109498161219e565b600190818152833681830137604051916109628361219e565b808352843681850137604051936109788561219e565b8185528536818701376040519461098e8661219e565b828652863681880137604051936109a48561219e565b83855287895b818110610c4257506040516109be8161219e565b8581528136910137898952600788526040808a2085015490516310e5697360e01b81526001600160a01b03909116969089816004818b5afa908115610c37578b91610bfb575b5092610a7c8b989693610a6c610a8c94610a5c60a09d60049c9a9930610a2987612ed7565b52610a3382612ed7565b5233610a3e84612ed7565b526040519e8f9d8e633381899760e01b8152015260a48d019061270d565b90888c83030160248d01526126d0565b90868a83030160448b01526126d0565b90848883030160648901526126d0565b9185830301608486015282518083528883019289808360051b83010195019388915b8b848410610bc65750505050505050828091039134905af18015610bbb578390610b25575b610add9150612ed7565b519083835260068152604083209033600052528060406000205562278d00420190814211610b115761028a92933390612deb565b634e487b7160e01b83526011600452602483fd5b503d8084833e610b3581836121d4565b81019082818303126107de578051906001600160401b038211610bb757019080601f830112156107de578151610b6a816121f5565b92610b7860405194856121d4565b818452848085019260051b8201019283116107da5784809101915b838310610ba75750505050610add90610ad3565b8251815291810191859101610b93565b8480fd5b6040513d85823e3d90fd5b919497995092958792959850610be78291601f198682030187528a5161239d565b9801930193018a9795929389979592610aae565b91939290508982813d8311610c30575b610c1581836121d4565b81010312610c2b57905191929091610a6c610a04565b600080fd5b503d610c0b565b6040513d8d823e3d90fd5b60608282890101520188906109aa565b5080fd5b50346102015760c0366003190112610201576001600160401b036044351161020157366023604435011215610201576001600160401b036044356004013511610201573660246044356004013560051b604435010111610201576064356001600160401b038111610c5257610ccf9036906004016120cd565b6084929192356001600160401b03811161092557610cf19036906004016120cd565b60a4949194356001600160401b038111610bb757610d139036906004016120cd565b9390916004358652600b60205260ff60408720541660078110156114b5576005610d3d911461246c565b6040516020810190600435825286856040830137610d6d6040828981018b838201520360208101845201826121d4565b51902092838752600b60205260ff60408820541660078110156114a15761079a578697604435600401356111fa575b6040518060608101106001600160401b03606083011117611155576060810160405260018060a01b038a16815260243560208201526040810190338252868a526009602052600260408b20602060018060a01b03845116936001600160601b0360a01b948584541617835501516001820155019160018060a01b03905116908254161790558760018060a01b038a161515602435151560001461117f575050848852600b60205260408820805460ff19166003179055610e6685610e5e6124b8565b60243561308b565b955b858952600b60205260ff60408a20541694600786101561116b5793610eb561109394610ead602995610ea5610f039e9f96610f8a9b9a3691612435565b943691612435565b9a3691612435565b94610ebe6122a1565b9a90549960405197610ecf8961219e565b601389527264625f7370616365735f696e7374616e63657360681b60208a0152610f08610efa6122a1565b9f90549c612ee4565b612c93565b95610f4a610f03610f44610f3e610f38610f32610f03610f2c610f03600435612ee4565b9b612b2b565b9a612c93565b97612c93565b94612c93565b92612cd3565b91610f65610f03610f5f610f03602435612b2b565b95612cd3565b94610f72610f0333612cd3565b9760206040519e8f8c83829e5194859301910161237a565b8a0197600b60fa1b98896020820152610fad82518093602060218501910161237a565b01886021820152610fc882518093602060228501910161237a565b01876022820152610fe382518093602060238501910161237a565b01866023820152610ffe82518093602060248501910161237a565b0185602482015261101982518093602060258501910161237a565b0184602582015261103482518093602060268501910161237a565b0183602682015261104f82518093602060278501910161237a565b0182602782015261106a82518093602060288501910161237a565b01906028820152611084825180936020878501910161237a565b010360098101855201836121d4565b6040519060a08201938285106001600160401b038611176111555761028a9761114b95604052606984527f496e7374616e636549442c20696e7374616e63654f6653706163652c20696e7360208501527f74616e6365547970652c206d657461646174614349442c206368617449442c2060408501527f49504e532c206761746564436f6e74726163742c2070726963652c206c6f636b606085015268161031b932b0ba37b960b91b608085015260031b1c90612a1e565b9160031b1c613008565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b8a52602160045260248afd5b80806111f3575b156111b6575050848852600b60205260408820805460ff191660011790556111b085610e5e6124b8565b95610e68565b909690156111da57858952600b60205260408920805460ff19166002179055610e68565b600b60205260408920805460ff19166004179055610e68565b5089611186565b96949290975061121a95939195366044356004013560246044350161220c565b600154608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d7300000017875260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf3176020526037600987f0906001600160a01b03821615611463578680916040516112bc816112ae602082019463a224cee760e01b86526020602484015260448301906126d0565b03601f1981018352826121d4565b519082855af16112ca61281f565b501561142c57956112e7366044356004013560246044350161220c565b6080526112f383612ee4565b98865b6080515181101561141c578a9061130b61226a565b929054926040519361131c8561219e565b60078552666d656d6265727360c81b602086015261134461133b61226a565b91905494612c93565b60805191825187101561140657611401976113fc966113c661137d610f038b602061114b9960018060a01b039260051b01015116612cd3565b6040518661139582985180926020808601910161237a565b8101600b60fa1b60208201528251906113b7826021956020878501910161237a565b010360018101875201856121d4565b604051926113d38461219e565b601284527124b739ba30b731b2a4a2161036b2b6b132b960711b602085015260031b1c90612a1e565b612eb2565b6112f6565b634e487b7160e01b600052603260045260246000fd5b5091939597909294969850610d9c565b60405162461bcd60e51b815260206004820152600f60248201526e6572726f72206465706c6f79696e6760881b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606490fd5b634e487b7160e01b88526021600452602488fd5b634e487b7160e01b87526021600452602487fd5b5034610201576020366003190112610201576004358152600760205260408120604051906114f68261219e565b80546001600160a01b039081168084526001909201548116602084019081529091330361158e57819051169083823192803b15610c5257818091606460405180948193636ce5768960e11b83528160048401523060248401528960448401525af180156115835761156f575b505061028a925116613387565b6115789061218b565b6107de578338611562565b6040513d84823e3d90fd5b60405163c00f906f60e01b8152600490fd5b50346102015780600319360112610201576005546040516001600160a01b039091168152602090f35b503461020157602036600319011261020157600435600454811015610c525760209060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0154604051908152f35b503461020157604036600319011261020157602061088c61163a61215f565b6004356125c8565b503461020157604036600319011261020157602061088c611661612149565b61166961215f565b9061284f565b5034610201576020366003190112610201578061168a612149565b81546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929091833b15610bb75782916044869283604051958694859362d5fa2b60e81b8552600485015216978860248401525af19081156117c05784916117cb575b50507f000000000000000000000000000000000000000000000000000000000000000016908254823b156117a35760405190630a3b53db60e21b82526004820152816024820152838160448183875af19081156117c05784916117a8575b5054823b156117a35760648492836040519586948593632142170760e11b8552306004860152602485015260448401525af18015611583576117935750f35b61179c9061218b565b6102015780f35b505050fd5b6117b19061218b565b6117bc578238611754565b5050fd5b6040513d86823e3d90fd5b6117d49061218b565b6117bc5782386116f6565b503461020157602080600319360112610c52576004356003548110156109255760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190604051918381549460019086821c93828816978815611901575b86861089146118ed57868899878a98999a5291826000146118c957505060011461188d575b505050611875925003836121d4565b61188960405192828493845283019061239d565b0390f35b869350819291528282205b8583106118b15750506118759350820101388080611866565b80548389018501528794508693909201918101611898565b93509450505061187594915060ff191682840152151560051b820101388080611866565b634e487b7160e01b83526022600452602483fd5b94607f1694611841565b50346102015780600319360112610201576119246123c2565b600580546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461020157604036600319011261020157806024356001600160401b038111611a235736602382011215611a23576119ac90369060248160040135910161220c565b60043582526009602052604082206119d560018060a01b03600281845416930154163314612698565b806119de575050f35b803b156117bc57604051632f41d6e160e21b8152602060048201529183918391829084908290611a129060248301906126d0565b03925af18015611583576117935750f35b50fd5b50346102015760e036600319011261020157611a4061215f565b611a48612175565b506001600160a01b0360643581811603610c2b576084356001600160401b0381116107de57611a7b9036906004016120cd565b5050309116036102015780f35b50346102015780600319360112610201576020604051428152f35b503461020157604036600319011261020157602061088c611ac261215f565b6004356124d8565b503461020157604036600319011261020157602435906001600160401b038211610201573660238301121561020157816004013591611b08836121f5565b90611b1660405192836121d4565b83825260209360248584019160051b83010191368311610bb757602401905b828210611ba45750505081926004358352600981526040832091611b6a60018060a01b03600281865416950154163314612698565b82611b7457505050f35b823b156117a357611a129284928360405180968195829463b80f55c960e01b84526004840152602483019061270d565b81358152908501908501611b35565b5034610201576040366003190112610201576020611bda611bd261215f565b6004356132e6565b604051908152f35b5034610201578060031936011261020157611bfb6123c2565b61028a4733613387565b50602090816003193601126102015760043591611c2233846132e6565b838352600682526040808420338552835280842054858552600784528185206001015491516310e5697360e01b815292939092916001600160a01b0316908083600481855afa928315611d5c578693611d2d575b50813b156107da5791859160405193849263d813cc1960e01b8452600484015285602484015230604484015260809081606485015260605191826084860152855b838110611d155750505060a483828683839584010152601f8019910116810103019134905af180156117c057611d02575b5062278d008201809211610b115761028a92933390612deb565b611d0e9093919361218b565b9138611ce8565b8082015188820160a401528a96508795508201611cb7565b9080935081813d8311611d55575b611d4581836121d4565b810103126107da57519138611c76565b503d611d3b565b6040513d88823e3d90fd5b5034610201576020366003190112610201576040606091600435815260096020522060018060a01b0390818154169160026001830154920154169060405192835260208301526040820152f35b503461020157608036600319011261020157611dce612149565b50611dd761215f565b50611de0612175565b506064356001600160401b038111610c5257611e009036906004016120cd565b50506040516310e5697360e01b8152602081600481335afa908115611583578291611e31575b602082604051908152f35b90506020813d8211611e5e575b81611e4b602093836121d4565b81010312610c5257602091505138611e26565b3d9150611e3e565b503461020157610100366003190112610201576001600160401b0360643581811161092557611e999036906004016120cd565b505060843581811161092557611eb39036906004016120cd565b505060a43581811161092557611ecd9036906004016120cd565b505060c43581811161092557611ee79036906004016120cd565b505060e435908111610c5257611f019036906004016120cd565b50506004358152600960205260408120600201546001600160a01b031633036107c05780f35b503461020157608036600319011261020157611f41612149565b50611f4a61215f565b506064356001600160401b038111610c5257611f6a9036906004016120cd565b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361200157805415611fb6575b604051630a85bd0160e11b8152602090f35b60405160208101907f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae8252604435604082015260408152611ff6816121b9565b519020905538611fa4565b604051634a93b62160e11b8152600490fd5b5034610201576020366003190112610201576020906004358152600a8252604060018060a01b0391205416604051908152f35b503461020157612055366120fa565b50505090825250600a60205260408120546001600160a01b031633036120785780f35b6040516306815cbd60e41b8152600490fd5b905034610c525781600319360112610c52577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f84011215610c2b578235916001600160401b038311610c2b5760208381860195010111610c2b57565b906060600319830112610c2b57600435916001600160401b0391602435838111610c2b578261212b916004016120cd565b93909392604435918211610c2b57612145916004016120cd565b9091565b600435906001600160a01b0382168203610c2b57565b602435906001600160a01b0382168203610c2b57565b604435906001600160a01b0382168203610c2b57565b6001600160401b03811161115557604052565b604081019081106001600160401b0382111761115557604052565b606081019081106001600160401b0382111761115557604052565b90601f801991011681019081106001600160401b0382111761115557604052565b6001600160401b0381116111555760051b60200190565b9291612217826121f5565b9161222560405193846121d4565b829481845260208094019160051b8101928311610c2b57905b82821061224b5750505050565b81356001600160a01b0381168103610c2b57815290830190830161223e565b600454600410156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90600090565b600454600110156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c90600090565b600454600210156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d90600090565b600454156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90600090565b600454600310156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e90600090565b60005b83811061238d5750506000910152565b818101518382015260200161237d565b906020916123b68151809281855285808601910161237a565b601f01601f1916010190565b6005546001600160a01b031633036123d657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b03811161115557601f01601f191660200190565b9291926124418261241a565b9161244f60405193846121d4565b829481845281830111610c2b578281602093846000960137010152565b1561247357565b60405162461bcd60e51b815260206004820152601b60248201527f44424e533a204e6f6465206973206e6f742061207375626e6f646500000000006044820152606490fd5b604051906124c58261219e565b600482526344424e5360e01b6020830152565b906000828152600960205260018060a01b0360408220541690600b60205260ff60408220541660078110156125b45760030361251c57505061251991613254565b90565b838152600b60205260ff60408220541660078110156125b45760010361255d5750612547908261284f565b91821561255357505090565b6125199250613254565b8392508093915052600b60205260ff60408320541660078110156103a057600214908115612592575b50156125195750600190565b825250600b602052604081205460ff1660078110156125b45760041438612586565b634e487b7160e01b82526021600452602482fd5b919060008091848352600960205260018060a01b038060408520541695600b60205260ff60408620541693600785101597886114b557600386036126435750508452600960205280600260408620015416911614935b6125b4576004811190811561263a575b506126365750565b9150565b9050153861262e565b9392509650508395600184146000146126685750906126619161284f565b935b61261e565b95508395600284146000146126825750906126619161284f565b955050508160048203612663576001945061261e565b1561269f57565b60405162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b6044820152606490fd5b90815180825260208080930193019160005b8281106126f0575050505090565b83516001600160a01b0316855293810193928101926001016126e2565b90815180825260208080930193019160005b82811061272d575050505090565b83518552938101939281019260010161271f565b906020815191012060018060a01b03807f00000000000000000000000000000000000000000000000000000000000000001690813b15610c2b5760009160a4839260405194859384926305ef2c7f60e41b84528960048501528860248501523060448501527f00000000000000000000000000000000000000000000000000000000000000001660648401528160848401525af1801561281357612804575b5060405190602082019283526040820152604081526127fe816121b9565b51902090565b61280d9061218b565b386127e0565b6040513d6000823e3d90fd5b3d1561284a573d906128308261241a565b9161283e60405193846121d4565b82523d6000602084013e565b606090565b6040516370a0823160e01b81526001600160a01b0391821660048201529160209183916024918391165afa9081156128135760009161288f575b50151590565b906020823d82116128b8575b816128a8602093836121d4565b8101031261020157505138612889565b3d915061289b565b9392916129479260239261293860405197889481516128e78160209485808b01910161237a565b860193600b60fa1b948584820152612908825180938660218501910161237a565b01846021820152612922825180938560228501910161237a565b019260228401528351938491878501910161237a565b010360038101855201836121d4565b565b61114b90610f036129479593946129ba61296161230f565b97905496604051936129728561219e565b600985526864625f73706163657360b81b60208601526129b46129ae6129ae610f036129a861299f61230f565b9b90549c612ee4565b96612ee4565b92612c93565b926128c0565b92604051926129c8846121b9565b603884527f4442537061636549442c20444253756253706163654f6649442c20444253706160208501527f63654e616d652c20444253756253706163654f664e616d650000000000000000604085015260031b1c905b612ad093603692612b1261251995612a3e612a3846612b2b565b93612b2b565b94612aa96022604051809860209788612a60818501978881519384920161237a565b830190605f60f81b91828b820152612a81825180938d60218501910161237a565b01906021820152612a9a825180938b878501910161237a565b010360028101895201876121d4565b6040519889966b024a729a2a92a1024a72a27960a51b86890152518092602c89019061237a565b8501600560fb1b602c820152612aef8251809386602d8501910161237a565b019167052ac8298aa8aa6560c31b602d840152835193849160358501910161237a565b01602960f81b60358201520360168101845201826121d4565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612c85575b506d04ee2d6d415b85acef810000000080831015612c76575b50662386f26fc1000080831015612c67575b506305f5e10080831015612c58575b5061271080831015612c49575b506064821015612c39575b600a80921015612c2f575b60019081602181860195612bc48761241a565b96612bd260405198896121d4565b808852612be1601f199161241a565b01366020890137860101905b612bf9575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215612c2a57919082612bed565b612bf2565b9160010191612bb1565b9190606460029104910191612ba6565b60049193920491019138612b9b565b60089193920491019138612b8e565b60109193920491019138612b7f565b60209193920491019138612b6d565b604093508104915038612b54565b61251960226040518093602760f81b90816020840152612cbd81518092602060218701910161237a565b82019060218201520360028101845201826121d4565b604051906001600160a01b0316612ce9826121b9565b602a82526020820160403682378251156114065760309053815160019081101561140657607860218401536029905b808211612d6c575050612d285790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612dc5576f181899199a1a9b1b9c1cb0b131b232b360811b901a612d9b8486612dda565b5360041c918015612db0576000190190612d18565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b908151811015611406570160200190565b61114b90610f03612947959394612e60612e03612343565b9790549660405193612e148561219e565b600d85526c737562736372697074696f6e7360981b60208601526129b4610f03612a38610f03612e5a610f03612e54612e4b612343565b9d90549e612ee4565b98612cd3565b94612b2b565b9260405192612e6e846121b9565b602784527f496e7374616e636549442c20737562736372696265722c20746f6b656e49442c60208501526608195b991cd05d60ca1b604085015260031b1c90612a1e565b6000198114612ec15760010190565b634e487b7160e01b600052601160045260246000fd5b8051156114065760200190565b60405190612ef1826121b9565b6040825260209182810191604036843760405190612f0e8261219e565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b8583015260005b858110612f6d5750505061060f60f31b9261251992612f5d6022936040519687948501525180928585019061237a565b81010360028101845201826121d4565b81811a9083518015612ff2576001600160f81b0319908190612f9190850487612dda565b51169060019383851b9284840460021485151715612ec15760001a612fb6848a612dda565b5386518015612ff257612fca910687612dda565b5116928101809111612ec157612fe7612fed9360001a9187612dda565b53612eb2565b612f2d565b634e487b7160e01b600052601260045260246000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b15610c2b576130719260009283604051809681958294631bbd786d60e11b8452306004850152602484015260606044840152606483019061239d565b03925af18015612813576130825750565b6129479061218b565b90916130db939260085460009384916040918251988995869263216c908360e11b845262278d0060048501528660248501526044840152600019606484015260c0608484015260c483019061239d565b60a482018590526001600160a01b039560209586949190920391839188165af196871561324a578597613212575b5082871694853b1561020157815163debe2b0d60e01b815260048101829052603260248201528181604481838b5af180156131f957613203575b50853b156102015781516374cac47d60e01b81523060048201528160248201528160448201528160648201528160848201528160a48201528160c4820152818160e481838b5af180156131f95790859392916131dd575b5060076001948351976131ac8961219e565b338952818901998a5283525220935116926001600160601b0360a01b93848254161781550192511690825416179055565b8193506131ec9094929461218b565b610c52579183913861319a565b83513d84823e3d90fd5b61320c9061218b565b38613143565b9096508181813d8311613243575b61322a81836121d4565b81010312610bb757518281168103610bb7579538613109565b503d613220565b81513d87823e3d90fd5b60009081526007602090815260408083206001015490516370a0823160e01b81526001600160a01b039485166004820152929383916024918391165afa9182156132da5780926132a6575b5050151590565b9091506020823d82116132d2575b816132c1602093836121d4565b81010312610201575051388061329f565b3d91506132b4565b604051903d90823e3d90fd5b600081815260208093600682526040832060018060a01b0380921684528252604083205493835260078252600160408420015416926024604051809581936354b249fb60e01b835260048301525afa92831561337a578193613349575b50505090565b9091809350813d8311613373575b61336181836121d4565b81010312610201575051388080613343565b503d613357565b50604051903d90823e3d90fd5b81471061341d576000918291829182916001600160a01b03165af16133aa61281f565b50156133b257565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea26469706673582212203163c8f186b9a2933347765a4b512839fe74bdbf03c2c4b6e3b52bf17316936a64736f6c63430008140033",
  "deployedBytecode": "0x60a080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816306433b1b1461208a575080630c9ddf6d1461204657806311ad2f3414612013578063150b7a0214611f275780631e71b6e614611e66578063221c1fd114611db45780632711447f14611d67578063284e82e814611c055780633ccfd60b14611be25780633e20383514611bb357806344ce9a7a14611aca57806347d121c514611aa3578063557ed1ba14611a885780635e895f2914611a2657806367e0970914611969578063715018a61461190b57806371671bf2146117df578063822118461461166f57806384ec965314611642578063889753831461161b5780638a8fd250146115c95780638da5cb5b146115a05780638e19899e146114c957806396d565cb14610c565780639ad66a23146109295780639fb24cef14610896578063a5df63d614610865578063c6a36c4b14610827578063cb609077146107e2578063d0ed11101461045d578063d68d087c14610418578063db7baba9146103fb578063dd321bfc146103b4578063e2b1e4ed14610367578063f2fde38b146102a1578063f9737c7c146102045763ffeb4a300361000f57346102015780600319360112610201576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b503461020157610213366120fa565b9192848695929652600b60205260ff604086205416600781101561028d579561027c61028492610249600561028a999a1461246c565b61025d610257368984612435565b86612741565b808a52600b60205260408a20805460ff19166005179055963691612435565b933691612435565b92612949565b80f35b634e487b7160e01b86526021600452602486fd5b5034610201576020366003190112610201576102bb612149565b6102c36123c2565b6001600160a01b0390811690811561031357600554826001600160601b0360a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5034610201576020366003190112610201576004358152600b60205260ff6040822054166040519060078110156103a057602092508152f35b634e487b7160e01b83526021600452602483fd5b50346102015760403660031901126102015760406103d061215f565b9160043581526006602052209060018060a01b03166000526020526020604060002054604051908152f35b503461020157806003193601126102015760209054604051908152f35b50346102015780600319360112610201576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102015760a0366003190112610201576004356001600160401b036024358181116107de576104929036906004016120cd565b926044358381116107da576104ab9036906004016120cd565b9290916064358581116107d6576104c69036906004016120cd565b9390956084359081116107d2576104e19036906004016120cd565b9690916104ee33856125c8565b156107c05789948860405161052360408260209a8b8201958b8752808b8585013782019083820152038a8101845201826121d4565b519020998a8c52600b875260ff60408d20541660078110156107ac5761079a578a8c52600a875260408c20336001600160601b0360a01b825416179055600b875260408c2060ff198154166006179055369061057e92612435565b96369061058a92612435565b94369061059692612435565b9536906105a292612435565b6105aa6122d8565b97905496604051966105bb8861219e565b600f88526e696e7374616e6365735f636f64657360881b868901526105de6122d8565b949054956105eb90612ee4565b6105f490612c93565b936105fe90612ee4565b61060790612c93565b9161061190612c93565b9761061b90612c93565b9261062590612c93565b9061062f90612c93565b9061063933612cd3565b61064290612c93565b9360405199868b975190818c808b0192019161065d9261237a565b870194600b60fa1b95868c820152815191828d602184019201916106809261237a565b01856021820152815191828c6022840192019161069c9261237a565b01846022820152815191828b602384019201916106b89261237a565b01836023820152815191828a602484019201916106d49261237a565b018260248201528151918289602584019201916106f09261237a565b0190602582015281519182876026840192019161070c9261237a565b010360068101855260260161072190856121d4565b6040519261072e846121b9565b603a845283017f496e7374616e636549442c20636f646549442c206e616d652c2061626f75742c9052604083017f206368617449442c20636f646549504e532c2063726561746f72000000000000905260031b1c61078b93612a1e565b9160031b1c9061028a91613008565b604051631144626f60e01b8152600490fd5b634e487b7160e01b8d52602160045260248dfd5b6040516346627df160e01b8152600490fd5b8880fd5b8780fd5b8580fd5b8380fd5b50346102015780600319360112610201576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102015760203660031901126102015760408091600435815260076020522060018060a01b036001818354169201541682519182526020820152f35b503461020157604036600319011261020157602061088c61088461215f565b600435613254565b6040519015158152f35b5034610201576040366003190112610201576001600160401b03600435818111610925576108c89036906004016120cd565b916024359081116107de5761028a926108e86102849236906004016120cd565b929061027c61090388546108fd36878a612435565b90612741565b95868952600b60205260408920600560ff198254161790558854943691612435565b8280fd5b506003199060203683018113610c5257600435926040516109498161219e565b600190818152833681830137604051916109628361219e565b808352843681850137604051936109788561219e565b8185528536818701376040519461098e8661219e565b828652863681880137604051936109a48561219e565b83855287895b818110610c4257506040516109be8161219e565b8581528136910137898952600788526040808a2085015490516310e5697360e01b81526001600160a01b03909116969089816004818b5afa908115610c37578b91610bfb575b5092610a7c8b989693610a6c610a8c94610a5c60a09d60049c9a9930610a2987612ed7565b52610a3382612ed7565b5233610a3e84612ed7565b526040519e8f9d8e633381899760e01b8152015260a48d019061270d565b90888c83030160248d01526126d0565b90868a83030160448b01526126d0565b90848883030160648901526126d0565b9185830301608486015282518083528883019289808360051b83010195019388915b8b848410610bc65750505050505050828091039134905af18015610bbb578390610b25575b610add9150612ed7565b519083835260068152604083209033600052528060406000205562278d00420190814211610b115761028a92933390612deb565b634e487b7160e01b83526011600452602483fd5b503d8084833e610b3581836121d4565b81019082818303126107de578051906001600160401b038211610bb757019080601f830112156107de578151610b6a816121f5565b92610b7860405194856121d4565b818452848085019260051b8201019283116107da5784809101915b838310610ba75750505050610add90610ad3565b8251815291810191859101610b93565b8480fd5b6040513d85823e3d90fd5b919497995092958792959850610be78291601f198682030187528a5161239d565b9801930193018a9795929389979592610aae565b91939290508982813d8311610c30575b610c1581836121d4565b81010312610c2b57905191929091610a6c610a04565b600080fd5b503d610c0b565b6040513d8d823e3d90fd5b60608282890101520188906109aa565b5080fd5b50346102015760c0366003190112610201576001600160401b036044351161020157366023604435011215610201576001600160401b036044356004013511610201573660246044356004013560051b604435010111610201576064356001600160401b038111610c5257610ccf9036906004016120cd565b6084929192356001600160401b03811161092557610cf19036906004016120cd565b60a4949194356001600160401b038111610bb757610d139036906004016120cd565b9390916004358652600b60205260ff60408720541660078110156114b5576005610d3d911461246c565b6040516020810190600435825286856040830137610d6d6040828981018b838201520360208101845201826121d4565b51902092838752600b60205260ff60408820541660078110156114a15761079a578697604435600401356111fa575b6040518060608101106001600160401b03606083011117611155576060810160405260018060a01b038a16815260243560208201526040810190338252868a526009602052600260408b20602060018060a01b03845116936001600160601b0360a01b948584541617835501516001820155019160018060a01b03905116908254161790558760018060a01b038a161515602435151560001461117f575050848852600b60205260408820805460ff19166003179055610e6685610e5e6124b8565b60243561308b565b955b858952600b60205260ff60408a20541694600786101561116b5793610eb561109394610ead602995610ea5610f039e9f96610f8a9b9a3691612435565b943691612435565b9a3691612435565b94610ebe6122a1565b9a90549960405197610ecf8961219e565b601389527264625f7370616365735f696e7374616e63657360681b60208a0152610f08610efa6122a1565b9f90549c612ee4565b612c93565b95610f4a610f03610f44610f3e610f38610f32610f03610f2c610f03600435612ee4565b9b612b2b565b9a612c93565b97612c93565b94612c93565b92612cd3565b91610f65610f03610f5f610f03602435612b2b565b95612cd3565b94610f72610f0333612cd3565b9760206040519e8f8c83829e5194859301910161237a565b8a0197600b60fa1b98896020820152610fad82518093602060218501910161237a565b01886021820152610fc882518093602060228501910161237a565b01876022820152610fe382518093602060238501910161237a565b01866023820152610ffe82518093602060248501910161237a565b0185602482015261101982518093602060258501910161237a565b0184602582015261103482518093602060268501910161237a565b0183602682015261104f82518093602060278501910161237a565b0182602782015261106a82518093602060288501910161237a565b01906028820152611084825180936020878501910161237a565b010360098101855201836121d4565b6040519060a08201938285106001600160401b038611176111555761028a9761114b95604052606984527f496e7374616e636549442c20696e7374616e63654f6653706163652c20696e7360208501527f74616e6365547970652c206d657461646174614349442c206368617449442c2060408501527f49504e532c206761746564436f6e74726163742c2070726963652c206c6f636b606085015268161031b932b0ba37b960b91b608085015260031b1c90612a1e565b9160031b1c613008565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b8a52602160045260248afd5b80806111f3575b156111b6575050848852600b60205260408820805460ff191660011790556111b085610e5e6124b8565b95610e68565b909690156111da57858952600b60205260408920805460ff19166002179055610e68565b600b60205260408920805460ff19166004179055610e68565b5089611186565b96949290975061121a95939195366044356004013560246044350161220c565b600154608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d7300000017875260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf3176020526037600987f0906001600160a01b03821615611463578680916040516112bc816112ae602082019463a224cee760e01b86526020602484015260448301906126d0565b03601f1981018352826121d4565b519082855af16112ca61281f565b501561142c57956112e7366044356004013560246044350161220c565b6080526112f383612ee4565b98865b6080515181101561141c578a9061130b61226a565b929054926040519361131c8561219e565b60078552666d656d6265727360c81b602086015261134461133b61226a565b91905494612c93565b60805191825187101561140657611401976113fc966113c661137d610f038b602061114b9960018060a01b039260051b01015116612cd3565b6040518661139582985180926020808601910161237a565b8101600b60fa1b60208201528251906113b7826021956020878501910161237a565b010360018101875201856121d4565b604051926113d38461219e565b601284527124b739ba30b731b2a4a2161036b2b6b132b960711b602085015260031b1c90612a1e565b612eb2565b6112f6565b634e487b7160e01b600052603260045260246000fd5b5091939597909294969850610d9c565b60405162461bcd60e51b815260206004820152600f60248201526e6572726f72206465706c6f79696e6760881b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606490fd5b634e487b7160e01b88526021600452602488fd5b634e487b7160e01b87526021600452602487fd5b5034610201576020366003190112610201576004358152600760205260408120604051906114f68261219e565b80546001600160a01b039081168084526001909201548116602084019081529091330361158e57819051169083823192803b15610c5257818091606460405180948193636ce5768960e11b83528160048401523060248401528960448401525af180156115835761156f575b505061028a925116613387565b6115789061218b565b6107de578338611562565b6040513d84823e3d90fd5b60405163c00f906f60e01b8152600490fd5b50346102015780600319360112610201576005546040516001600160a01b039091168152602090f35b503461020157602036600319011261020157600435600454811015610c525760209060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0154604051908152f35b503461020157604036600319011261020157602061088c61163a61215f565b6004356125c8565b503461020157604036600319011261020157602061088c611661612149565b61166961215f565b9061284f565b5034610201576020366003190112610201578061168a612149565b81546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929091833b15610bb75782916044869283604051958694859362d5fa2b60e81b8552600485015216978860248401525af19081156117c05784916117cb575b50507f000000000000000000000000000000000000000000000000000000000000000016908254823b156117a35760405190630a3b53db60e21b82526004820152816024820152838160448183875af19081156117c05784916117a8575b5054823b156117a35760648492836040519586948593632142170760e11b8552306004860152602485015260448401525af18015611583576117935750f35b61179c9061218b565b6102015780f35b505050fd5b6117b19061218b565b6117bc578238611754565b5050fd5b6040513d86823e3d90fd5b6117d49061218b565b6117bc5782386116f6565b503461020157602080600319360112610c52576004356003548110156109255760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190604051918381549460019086821c93828816978815611901575b86861089146118ed57868899878a98999a5291826000146118c957505060011461188d575b505050611875925003836121d4565b61188960405192828493845283019061239d565b0390f35b869350819291528282205b8583106118b15750506118759350820101388080611866565b80548389018501528794508693909201918101611898565b93509450505061187594915060ff191682840152151560051b820101388080611866565b634e487b7160e01b83526022600452602483fd5b94607f1694611841565b50346102015780600319360112610201576119246123c2565b600580546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461020157604036600319011261020157806024356001600160401b038111611a235736602382011215611a23576119ac90369060248160040135910161220c565b60043582526009602052604082206119d560018060a01b03600281845416930154163314612698565b806119de575050f35b803b156117bc57604051632f41d6e160e21b8152602060048201529183918391829084908290611a129060248301906126d0565b03925af18015611583576117935750f35b50fd5b50346102015760e036600319011261020157611a4061215f565b611a48612175565b506001600160a01b0360643581811603610c2b576084356001600160401b0381116107de57611a7b9036906004016120cd565b5050309116036102015780f35b50346102015780600319360112610201576020604051428152f35b503461020157604036600319011261020157602061088c611ac261215f565b6004356124d8565b503461020157604036600319011261020157602435906001600160401b038211610201573660238301121561020157816004013591611b08836121f5565b90611b1660405192836121d4565b83825260209360248584019160051b83010191368311610bb757602401905b828210611ba45750505081926004358352600981526040832091611b6a60018060a01b03600281865416950154163314612698565b82611b7457505050f35b823b156117a357611a129284928360405180968195829463b80f55c960e01b84526004840152602483019061270d565b81358152908501908501611b35565b5034610201576040366003190112610201576020611bda611bd261215f565b6004356132e6565b604051908152f35b5034610201578060031936011261020157611bfb6123c2565b61028a4733613387565b50602090816003193601126102015760043591611c2233846132e6565b838352600682526040808420338552835280842054858552600784528185206001015491516310e5697360e01b815292939092916001600160a01b0316908083600481855afa928315611d5c578693611d2d575b50813b156107da5791859160405193849263d813cc1960e01b8452600484015285602484015230604484015260809081606485015260605191826084860152855b838110611d155750505060a483828683839584010152601f8019910116810103019134905af180156117c057611d02575b5062278d008201809211610b115761028a92933390612deb565b611d0e9093919361218b565b9138611ce8565b8082015188820160a401528a96508795508201611cb7565b9080935081813d8311611d55575b611d4581836121d4565b810103126107da57519138611c76565b503d611d3b565b6040513d88823e3d90fd5b5034610201576020366003190112610201576040606091600435815260096020522060018060a01b0390818154169160026001830154920154169060405192835260208301526040820152f35b503461020157608036600319011261020157611dce612149565b50611dd761215f565b50611de0612175565b506064356001600160401b038111610c5257611e009036906004016120cd565b50506040516310e5697360e01b8152602081600481335afa908115611583578291611e31575b602082604051908152f35b90506020813d8211611e5e575b81611e4b602093836121d4565b81010312610c5257602091505138611e26565b3d9150611e3e565b503461020157610100366003190112610201576001600160401b0360643581811161092557611e999036906004016120cd565b505060843581811161092557611eb39036906004016120cd565b505060a43581811161092557611ecd9036906004016120cd565b505060c43581811161092557611ee79036906004016120cd565b505060e435908111610c5257611f019036906004016120cd565b50506004358152600960205260408120600201546001600160a01b031633036107c05780f35b503461020157608036600319011261020157611f41612149565b50611f4a61215f565b506064356001600160401b038111610c5257611f6a9036906004016120cd565b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361200157805415611fb6575b604051630a85bd0160e11b8152602090f35b60405160208101907f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae8252604435604082015260408152611ff6816121b9565b519020905538611fa4565b604051634a93b62160e11b8152600490fd5b5034610201576020366003190112610201576020906004358152600a8252604060018060a01b0391205416604051908152f35b503461020157612055366120fa565b50505090825250600a60205260408120546001600160a01b031633036120785780f35b6040516306815cbd60e41b8152600490fd5b905034610c525781600319360112610c52577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f84011215610c2b578235916001600160401b038311610c2b5760208381860195010111610c2b57565b906060600319830112610c2b57600435916001600160401b0391602435838111610c2b578261212b916004016120cd565b93909392604435918211610c2b57612145916004016120cd565b9091565b600435906001600160a01b0382168203610c2b57565b602435906001600160a01b0382168203610c2b57565b604435906001600160a01b0382168203610c2b57565b6001600160401b03811161115557604052565b604081019081106001600160401b0382111761115557604052565b606081019081106001600160401b0382111761115557604052565b90601f801991011681019081106001600160401b0382111761115557604052565b6001600160401b0381116111555760051b60200190565b9291612217826121f5565b9161222560405193846121d4565b829481845260208094019160051b8101928311610c2b57905b82821061224b5750505050565b81356001600160a01b0381168103610c2b57815290830190830161223e565b600454600410156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90600090565b600454600110156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c90600090565b600454600210156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d90600090565b600454156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90600090565b600454600310156114065760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e90600090565b60005b83811061238d5750506000910152565b818101518382015260200161237d565b906020916123b68151809281855285808601910161237a565b601f01601f1916010190565b6005546001600160a01b031633036123d657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b03811161115557601f01601f191660200190565b9291926124418261241a565b9161244f60405193846121d4565b829481845281830111610c2b578281602093846000960137010152565b1561247357565b60405162461bcd60e51b815260206004820152601b60248201527f44424e533a204e6f6465206973206e6f742061207375626e6f646500000000006044820152606490fd5b604051906124c58261219e565b600482526344424e5360e01b6020830152565b906000828152600960205260018060a01b0360408220541690600b60205260ff60408220541660078110156125b45760030361251c57505061251991613254565b90565b838152600b60205260ff60408220541660078110156125b45760010361255d5750612547908261284f565b91821561255357505090565b6125199250613254565b8392508093915052600b60205260ff60408320541660078110156103a057600214908115612592575b50156125195750600190565b825250600b602052604081205460ff1660078110156125b45760041438612586565b634e487b7160e01b82526021600452602482fd5b919060008091848352600960205260018060a01b038060408520541695600b60205260ff60408620541693600785101597886114b557600386036126435750508452600960205280600260408620015416911614935b6125b4576004811190811561263a575b506126365750565b9150565b9050153861262e565b9392509650508395600184146000146126685750906126619161284f565b935b61261e565b95508395600284146000146126825750906126619161284f565b955050508160048203612663576001945061261e565b1561269f57565b60405162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b6044820152606490fd5b90815180825260208080930193019160005b8281106126f0575050505090565b83516001600160a01b0316855293810193928101926001016126e2565b90815180825260208080930193019160005b82811061272d575050505090565b83518552938101939281019260010161271f565b906020815191012060018060a01b03807f00000000000000000000000000000000000000000000000000000000000000001690813b15610c2b5760009160a4839260405194859384926305ef2c7f60e41b84528960048501528860248501523060448501527f00000000000000000000000000000000000000000000000000000000000000001660648401528160848401525af1801561281357612804575b5060405190602082019283526040820152604081526127fe816121b9565b51902090565b61280d9061218b565b386127e0565b6040513d6000823e3d90fd5b3d1561284a573d906128308261241a565b9161283e60405193846121d4565b82523d6000602084013e565b606090565b6040516370a0823160e01b81526001600160a01b0391821660048201529160209183916024918391165afa9081156128135760009161288f575b50151590565b906020823d82116128b8575b816128a8602093836121d4565b8101031261020157505138612889565b3d915061289b565b9392916129479260239261293860405197889481516128e78160209485808b01910161237a565b860193600b60fa1b948584820152612908825180938660218501910161237a565b01846021820152612922825180938560228501910161237a565b019260228401528351938491878501910161237a565b010360038101855201836121d4565b565b61114b90610f036129479593946129ba61296161230f565b97905496604051936129728561219e565b600985526864625f73706163657360b81b60208601526129b46129ae6129ae610f036129a861299f61230f565b9b90549c612ee4565b96612ee4565b92612c93565b926128c0565b92604051926129c8846121b9565b603884527f4442537061636549442c20444253756253706163654f6649442c20444253706160208501527f63654e616d652c20444253756253706163654f664e616d650000000000000000604085015260031b1c905b612ad093603692612b1261251995612a3e612a3846612b2b565b93612b2b565b94612aa96022604051809860209788612a60818501978881519384920161237a565b830190605f60f81b91828b820152612a81825180938d60218501910161237a565b01906021820152612a9a825180938b878501910161237a565b010360028101895201876121d4565b6040519889966b024a729a2a92a1024a72a27960a51b86890152518092602c89019061237a565b8501600560fb1b602c820152612aef8251809386602d8501910161237a565b019167052ac8298aa8aa6560c31b602d840152835193849160358501910161237a565b01602960f81b60358201520360168101845201826121d4565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612c85575b506d04ee2d6d415b85acef810000000080831015612c76575b50662386f26fc1000080831015612c67575b506305f5e10080831015612c58575b5061271080831015612c49575b506064821015612c39575b600a80921015612c2f575b60019081602181860195612bc48761241a565b96612bd260405198896121d4565b808852612be1601f199161241a565b01366020890137860101905b612bf9575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215612c2a57919082612bed565b612bf2565b9160010191612bb1565b9190606460029104910191612ba6565b60049193920491019138612b9b565b60089193920491019138612b8e565b60109193920491019138612b7f565b60209193920491019138612b6d565b604093508104915038612b54565b61251960226040518093602760f81b90816020840152612cbd81518092602060218701910161237a565b82019060218201520360028101845201826121d4565b604051906001600160a01b0316612ce9826121b9565b602a82526020820160403682378251156114065760309053815160019081101561140657607860218401536029905b808211612d6c575050612d285790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612dc5576f181899199a1a9b1b9c1cb0b131b232b360811b901a612d9b8486612dda565b5360041c918015612db0576000190190612d18565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b908151811015611406570160200190565b61114b90610f03612947959394612e60612e03612343565b9790549660405193612e148561219e565b600d85526c737562736372697074696f6e7360981b60208601526129b4610f03612a38610f03612e5a610f03612e54612e4b612343565b9d90549e612ee4565b98612cd3565b94612b2b565b9260405192612e6e846121b9565b602784527f496e7374616e636549442c20737562736372696265722c20746f6b656e49442c60208501526608195b991cd05d60ca1b604085015260031b1c90612a1e565b6000198114612ec15760010190565b634e487b7160e01b600052601160045260246000fd5b8051156114065760200190565b60405190612ef1826121b9565b6040825260209182810191604036843760405190612f0e8261219e565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b8583015260005b858110612f6d5750505061060f60f31b9261251992612f5d6022936040519687948501525180928585019061237a565b81010360028101845201826121d4565b81811a9083518015612ff2576001600160f81b0319908190612f9190850487612dda565b51169060019383851b9284840460021485151715612ec15760001a612fb6848a612dda565b5386518015612ff257612fca910687612dda565b5116928101809111612ec157612fe7612fed9360001a9187612dda565b53612eb2565b612f2d565b634e487b7160e01b600052601260045260246000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b15610c2b576130719260009283604051809681958294631bbd786d60e11b8452306004850152602484015260606044840152606483019061239d565b03925af18015612813576130825750565b6129479061218b565b90916130db939260085460009384916040918251988995869263216c908360e11b845262278d0060048501528660248501526044840152600019606484015260c0608484015260c483019061239d565b60a482018590526001600160a01b039560209586949190920391839188165af196871561324a578597613212575b5082871694853b1561020157815163debe2b0d60e01b815260048101829052603260248201528181604481838b5af180156131f957613203575b50853b156102015781516374cac47d60e01b81523060048201528160248201528160448201528160648201528160848201528160a48201528160c4820152818160e481838b5af180156131f95790859392916131dd575b5060076001948351976131ac8961219e565b338952818901998a5283525220935116926001600160601b0360a01b93848254161781550192511690825416179055565b8193506131ec9094929461218b565b610c52579183913861319a565b83513d84823e3d90fd5b61320c9061218b565b38613143565b9096508181813d8311613243575b61322a81836121d4565b81010312610bb757518281168103610bb7579538613109565b503d613220565b81513d87823e3d90fd5b60009081526007602090815260408083206001015490516370a0823160e01b81526001600160a01b039485166004820152929383916024918391165afa9182156132da5780926132a6575b5050151590565b9091506020823d82116132d2575b816132c1602093836121d4565b81010312610201575051388061329f565b3d91506132b4565b604051903d90823e3d90fd5b600081815260208093600682526040832060018060a01b0380921684528252604083205493835260078252600160408420015416926024604051809581936354b249fb60e01b835260048301525afa92831561337a578193613349575b50505090565b9091809350813d8311613373575b61336181836121d4565b81010312610201575051388080613343565b503d613357565b50604051903d90823e3d90fd5b81471061341d576000918291829182916001600160a01b03165af16133aa61281f565b50156133b257565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea26469706673582212203163c8f186b9a2933347765a4b512839fe74bdbf03c2c4b6e3b52bf17316936a64736f6c63430008140033",
  "devdoc": {
    "details": "Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity ENS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions",
    "kind": "dev",
    "methods": {
      "createDBSpace(string,string)": {
        "details": "Create a new space under the given node",
        "params": {
          "_name": "The name of the new space"
        }
      },
      "createDBSubSpace(bytes32,string,string)": {
        "details": "Create a new subnode under the given node",
        "params": {
          "_DBSpace": "The parent node",
          "_name": "The name of the new subnode"
        }
      },
      "createInstanceCode(bytes32,string,string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_about": "The about of the new instance",
          "_chatID": "The chatID of the new instance",
          "_codeIPNS": "The IPNS of the new instance",
          "_instance": "The parent node",
          "_name": "The name of the new instance"
        }
      },
      "createSpaceInstance(bytes32,uint256,address[],string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_IPNS": "The IPNS of the new instance",
          "_chatID": "The chatID of the new instance",
          "_members": "The hatID of the new instance",
          "_metadataCID": "The name of the new instance",
          "_node": "The parent node"
        }
      },
      "hasViewAccess(bytes32,address)": {
        "details": "Check if the sender has access to the given instance",
        "params": {
          "_instance": "The instance to check",
          "_sender": "The sender to check"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(bytes32)": {
        "details": "withdraw function for an agentID",
        "params": {
          "_instanceID": "to withdraw money from the lock contract"
        }
      }
    },
    "title": "DBNS",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "withdraw(bytes32)": {
        "notice": "We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4532,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "DBNS_NODE",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 4724,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "implementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4802,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4805,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "tables",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4808,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "tableIDs",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5671,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instanceSubscriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5676,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instanceLock",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(InstanceStruct)5665_storage)"
      },
      {
        "astId": 5679,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "UNLOCK",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IUnlockV12)3630"
      },
      {
        "astId": 4128,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(SpaceInstance)4123_storage)"
      },
      {
        "astId": 4132,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "codeOwner",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4137,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "isType",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_enum(Types)4116)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUnlockV12)3630": {
        "encoding": "inplace",
        "label": "contract IUnlockV12",
        "numberOfBytes": "20"
      },
      "t_enum(Types)4116": {
        "encoding": "inplace",
        "label": "enum Core.Types",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_enum(Types)4116)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Core.Types)",
        "numberOfBytes": "32",
        "value": "t_enum(Types)4116"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(InstanceStruct)5665_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Unlock.InstanceStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(InstanceStruct)5665_storage"
      },
      "t_mapping(t_bytes32,t_struct(SpaceInstance)4123_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Core.SpaceInstance)",
        "numberOfBytes": "32",
        "value": "t_struct(SpaceInstance)4123_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InstanceStruct)5665_storage": {
        "encoding": "inplace",
        "label": "struct Unlock.InstanceStruct",
        "members": [
          {
            "astId": 5662,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5664,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "lockAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SpaceInstance)4123_storage": {
        "encoding": "inplace",
        "label": "struct Core.SpaceInstance",
        "members": [
          {
            "astId": 4118,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "gatedContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4120,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4122,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
