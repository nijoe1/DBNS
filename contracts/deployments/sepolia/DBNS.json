{
  "address": "0x6F96235a35d6a53fE9afC1b55Fe1601ce5ABaB37",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_publicResolver",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_baseNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_unlockContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gateImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainid",
          "type": "uint256"
        }
      ],
      "name": "ChainNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InstanceAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoCodeOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInstanceAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInstanceCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubscribeToGainAccess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DBNS_NODE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IFNSResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRAR",
      "outputs": [
        {
          "internalType": "contract IFNSRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTRY",
      "outputs": [
        {
          "internalType": "contract IFNS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TABLELAND",
      "outputs": [
        {
          "internalType": "contract ITablelandTables",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "codeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createDBSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_DBSpace",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createDBSubSpace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_chatID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_codeIPNS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNSEncryptedKey",
          "type": "string"
        }
      ],
      "name": "createInstanceCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_metadataCID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_chatID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNS",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_IPNSEncryptedKey",
          "type": "string"
        }
      ],
      "name": "createSpaceInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "extendInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gatedContract",
          "type": "address"
        }
      ],
      "name": "getAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "getDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        }
      ],
      "name": "getRemainingSubscriptionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_subscriber",
          "type": "address"
        }
      ],
      "name": "hasActiveSubscription",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasMutateAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "access",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "hasViewAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "insertNewMerbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instanceLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "instanceSubscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "instances",
      "outputs": [
        {
          "internalType": "address",
          "name": "gatedContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isType",
      "outputs": [
        {
          "internalType": "enum Core.Types",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "keyPurchasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minKeyPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onKeyPurchase",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "purchaseInstanceSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instance",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "removeMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tableIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tables",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_codeID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_about",
          "type": "string"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_metadataCID",
          "type": "string"
        }
      ],
      "name": "updateInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_instanceID",
          "type": "bytes32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
  "receipt": {
    "to": null,
    "from": "0x044B595C9b94A17Adc489bD29696af40ccb3E4d2",
    "contractAddress": "0x6F96235a35d6a53fE9afC1b55Fe1601ce5ABaB37",
    "transactionIndex": 99,
    "gasUsed": "4550779",
    "logsBloom": "0x
    "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b",
    "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
    "logs": [
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37",
          "0x0000000000000000000000000000000000000000000000000000000000000559"
        ],
        "data": "0x",
        "logIndex": 161,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37000000000000000000000000000000000000000000000000000000000000055900000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000059435245415445205441424c452064625f7370616365735f31313135353131312844425370616365494420746578742c20444253756253706163654f66494420746578742c20444253756253706163654e616d6520746578742900000000000000",
        "logIndex": 162,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37",
          "0x000000000000000000000000000000000000000000000000000000000000055a"
        ],
        "data": "0x",
        "logIndex": 163,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37000000000000000000000000000000000000000000000000000000000000055a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000dd435245415445205441424c452064625f7370616365735f696e7374616e6365735f313131353531313128496e7374616e6365494420746578742c20696e7374616e63654f66537061636520746578742c20696e7374616e63655479706520746578742c206d6574616461746143494420746578742c2063686174494420746578742c2049504e5320746578742c2049504e53456e637279707465644b657920746578742c206761746564436f6e747261637420746578742c20707269636520746578742c206c6f636b20746578742c2063726561746f72207465787429000000",
        "logIndex": 164,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37",
          "0x000000000000000000000000000000000000000000000000000000000000055b"
        ],
        "data": "0x",
        "logIndex": 165,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37000000000000000000000000000000000000000000000000000000000000055b00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000097435245415445205441424c4520696e7374616e6365735f636f6465735f313131353531313128496e7374616e6365494420746578742c20636f6465494420746578742c206e616d6520746578742c2061626f757420746578742c2063686174494420746578742c2049504e5320746578742c2049504e53456e637279707465644b657920746578742c2063726561746f72207465787429000000000000000000",
        "logIndex": 166,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37",
          "0x000000000000000000000000000000000000000000000000000000000000055c"
        ],
        "data": "0x",
        "logIndex": 167,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37000000000000000000000000000000000000000000000000000000000000055c00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000060435245415445205441424c4520737562736372697074696f6e735f313131353531313128496e7374616e6365494420746578742c207375627363726962657220746578742c20746f6b656e494420746578742c20656e64734174207465787429",
        "logIndex": 168,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37",
          "0x000000000000000000000000000000000000000000000000000000000000055d"
        ],
        "data": "0x",
        "logIndex": 169,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D",
        "topics": [
          "0xfe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd"
        ],
        "data": "0x0000000000000000000000006f96235a35d6a53fe9afc1b55fe1601ce5abab37000000000000000000000000000000000000000000000000000000000000055d0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003b435245415445205441424c45206d656d626572735f313131353531313128496e7374616e6365494420746578742c206d656d6265722074657874290000000000",
        "logIndex": 170,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      },
      {
        "transactionIndex": 99,
        "blockNumber": 5532151,
        "transactionHash": "0xb25b79936166109062d794d3ea2647446e9c9f4795654b452e11ea2427e697ab",
        "address": "0x6F96235a35d6a53fE9afC1b55Fe1601ce5ABaB37",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000044b595c9b94a17adc489bd29696af40ccb3e4d2"
        ],
        "data": "0x",
        "logIndex": 171,
        "blockHash": "0x80c79b7cda495eea5f36893babae402fa3383b1dc0cbc1ee61dc4118c255e44b"
      }
    ],
    "blockNumber": 5532151,
    "cumulativeGasUsed": "13897692",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
    "0x8FADE66B79cC9f707aB26799354482EB93a5B7dD",
    "0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae",
    "0x36b34e10295cCE69B652eEB5a8046041074515Da",
    "0x474E6528Ac992C7b0205a68b65ED9EFD31e0b0c3"
  ],
  "numDeployments": 1,
  "solcInputHash": "6f5f727b1cde4f322674aa81db41557b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_publicResolver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_baseNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_unlockContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gateImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"ChainNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InstanceAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCodeOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInstanceAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInstanceCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscribeToGainAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DBNS_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IFNSResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRAR\",\"outputs\":[{\"internalType\":\"contract IFNSRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY\",\"outputs\":[{\"internalType\":\"contract IFNS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TABLELAND\",\"outputs\":[{\"internalType\":\"contract ITablelandTables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createDBSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_DBSpace\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createDBSubSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chatID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_codeIPNS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNSEncryptedKey\",\"type\":\"string\"}],\"name\":\"createInstanceCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_metadataCID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_chatID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNS\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_IPNSEncryptedKey\",\"type\":\"string\"}],\"name\":\"createSpaceInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"extendInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gatedContract\",\"type\":\"address\"}],\"name\":\"getAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"getDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"getRemainingSubscriptionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"hasActiveSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasMutateAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"hasViewAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"insertNewMerbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instanceLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"instanceSubscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gatedContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isType\",\"outputs\":[{\"internalType\":\"enum Core.Types\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"keyPurchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minKeyPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onKeyPurchase\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"purchaseInstanceSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instance\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"removeMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tableIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tables\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_codeID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_about\",\"type\":\"string\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_metadataCID\",\"type\":\"string\"}],\"name\":\"updateInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_instanceID\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity ENS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions\",\"kind\":\"dev\",\"methods\":{\"createDBSpace(string)\":{\"details\":\"Create a new space under the given node\",\"params\":{\"_name\":\"The name of the new space\"}},\"createDBSubSpace(bytes32,string)\":{\"details\":\"Create a new subnode under the given node\",\"params\":{\"_DBSpace\":\"The parent node\",\"_name\":\"The name of the new subnode\"}},\"createInstanceCode(bytes32,string,string,string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_about\":\"The about of the new instance\",\"_chatID\":\"The chatID of the new instance\",\"_codeIPNS\":\"The IPNS of the new instance\",\"_instance\":\"The parent node\",\"_name\":\"The name of the new instance\"}},\"createSpaceInstance(bytes32,uint256,address[],string,string,string,string)\":{\"details\":\"Create a new instance under the given node\",\"params\":{\"_IPNS\":\"The IPNS of the new instance\",\"_chatID\":\"The chatID of the new instance\",\"_members\":\"The hatID of the new instance\",\"_metadataCID\":\"The name of the new instance\",\"_node\":\"The parent node\"}},\"hasViewAccess(bytes32,address)\":{\"details\":\"Check if the sender has access to the given instance\",\"params\":{\"_instance\":\"The instance to check\",\"_sender\":\"The sender to check\"},\"returns\":{\"_0\":\"bool\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(bytes32)\":{\"details\":\"withdraw function for an agentID\",\"params\":{\"_instanceID\":\"to withdraw money from the lock contract\"}}},\"title\":\"DBNS\",\"version\":1},\"userdoc\":{\"errors\":{\"ChainNotSupported(uint256)\":[{\"notice\":\"Current chain does not have a TablelandTables deployment.\"}]},\"kind\":\"user\",\"methods\":{\"withdraw(bytes32)\":{\"notice\":\"We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DBNS.sol\":\"DBNS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@tableland/evm/contracts/TablelandPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\n/**\\n * @dev Object defining how a table can be accessed.\\n */\\nstruct TablelandPolicy {\\n    // Whether or not the table should allow SQL INSERT statements.\\n    bool allowInsert;\\n    // Whether or not the table should allow SQL UPDATE statements.\\n    bool allowUpdate;\\n    // Whether or not the table should allow SQL DELETE statements.\\n    bool allowDelete;\\n    // A conditional clause used with SQL UPDATE and DELETE statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL UPDATE\\n    // and/or DELETE statements with \\\"WHERE foo > 0\\\".\\n    // This can be useful for limiting how a table can be modified.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string whereClause;\\n    // A conditional clause used with SQL INSERT statements.\\n    // For example, a value of \\\"foo > 0\\\" will concatenate all SQL INSERT\\n    // statements with a check on the incoming data, i.e., \\\"CHECK (foo > 0)\\\".\\n    // This can be useful for limiting how table data ban be added.\\n    // Use {Policies-joinClauses} to include more than one condition.\\n    string withCheck;\\n    // A list of SQL column names that can be updated.\\n    string[] updatableColumns;\\n}\\n\",\"keccak256\":\"0xc7d5e534ced54e7121ab2fbc268c77c708a3ba16c451bd403ba9789ddf1249c0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {TablelandPolicy} from \\\"../TablelandPolicy.sol\\\";\\n\\n/**\\n * @dev Interface of a TablelandTables compliant contract.\\n */\\ninterface ITablelandTables {\\n    /**\\n     * The caller is not authorized.\\n     */\\n    error Unauthorized();\\n\\n    /**\\n     * RunSQL was called with a query length greater than maximum allowed.\\n     */\\n    error MaxQuerySizeExceeded(uint256 querySize, uint256 maxQuerySize);\\n\\n    /**\\n     * @dev Emitted when `owner` creates a new table.\\n     *\\n     * owner - the to-be owner of the table\\n     * tableId - the table id of the new table\\n     * statement - the SQL statement used to create the table\\n     */\\n    event CreateTable(address owner, uint256 tableId, string statement);\\n\\n    /**\\n     * @dev Emitted when a table is transferred from `from` to `to`.\\n     *\\n     * Not emmitted when a table is created.\\n     * Also emitted after a table has been burned.\\n     *\\n     * from - the address that transfered the table\\n     * to - the address that received the table\\n     * tableId - the table id that was transferred\\n     */\\n    event TransferTable(address from, address to, uint256 tableId);\\n\\n    /**\\n     * @dev Emitted when `caller` runs a SQL statement.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * isOwner - whether or not the caller is the table owner\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     * policy - an object describing how `caller` can interact with the table (see {TablelandPolicy})\\n     */\\n    event RunSQL(\\n        address caller,\\n        bool isOwner,\\n        uint256 tableId,\\n        string statement,\\n        TablelandPolicy policy\\n    );\\n\\n    /**\\n     * @dev Emitted when a table's controller is set.\\n     *\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     */\\n    event SetController(uint256 tableId, address controller);\\n\\n    /**\\n     * @dev Struct containing parameters needed to run a mutating sql statement\\n     *\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     */\\n    struct Statement {\\n        uint256 tableId;\\n        string statement;\\n    }\\n\\n    /**\\n     * @dev Creates a new table owned by `owner` using `statement` and returns its `tableId`.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statement - the SQL statement used to create the table\\n     *           - the statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string memory statement\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Creates multiple new tables owned by `owner` using `statements` and returns array of `tableId`s.\\n     *\\n     * owner - the to-be owner of the new table\\n     * statements - the SQL statements used to create the tables\\n     *            - each statement type must be CREATE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     */\\n    function create(\\n        address owner,\\n        string[] calldata statements\\n    ) external payable returns (uint256[] memory);\\n\\n    /**\\n     * @dev Runs a mutating SQL statement for `caller` using `statement`.\\n     *\\n     * caller - the address that is running the SQL statement\\n     * tableId - the id of the target table\\n     * statement - the SQL statement to run\\n     *           - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must exist and be the table being mutated\\n     * - `caller` must be authorized by the table controller\\n     * - `statement` must be less than or equal to 35000 bytes\\n     */\\n    function mutate(\\n        address caller,\\n        uint256 tableId,\\n        string calldata statement\\n    ) external payable;\\n\\n    /**\\n     * @dev Runs an array of mutating SQL statements for `caller`\\n     *\\n     * caller - the address that is running the SQL statement\\n     * statements - an array of structs containing the id of the target table and coresponding statement\\n     *            - the statement type can be any of INSERT, UPDATE, DELETE, GRANT, REVOKE\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller`\\n     * - `tableId` must be the table being muated in each struct's statement\\n     * - `caller` must be authorized by the table controller if the statement is mutating\\n     * - each struct inside `statements` must have a `tableId` that corresponds to table being mutated\\n     * - each struct inside `statements` must have a `statement` that is less than or equal to 35000 bytes after normalization\\n     */\\n    function mutate(\\n        address caller,\\n        ITablelandTables.Statement[] calldata statements\\n    ) external payable;\\n\\n    /**\\n     * @dev Sets the controller for a table. Controller can be an EOA or contract address.\\n     *\\n     * When a table is created, it's controller is set to the zero address, which means that the\\n     * contract will not enforce write access control. In this situation, validators will not accept\\n     * transactions from non-owners unless explicitly granted access with \\\"GRANT\\\" SQL statements.\\n     *\\n     * When a controller address is set for a table, validators assume write access control is\\n     * handled at the contract level, and will accept all transactions.\\n     *\\n     * You can unset a controller address for a table by setting it back to the zero address.\\n     * This will cause validators to revert back to honoring owner and GRANT/REVOKE based write access control.\\n     *\\n     * caller - the address that is setting the controller\\n     * tableId - the id of the target table\\n     * controller - the address of the controller (EOA or contract)\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function setController(\\n        address caller,\\n        uint256 tableId,\\n        address controller\\n    ) external;\\n\\n    /**\\n     * @dev Returns the controller for a table.\\n     *\\n     * tableId - the id of the target table\\n     */\\n    function getController(uint256 tableId) external returns (address);\\n\\n    /**\\n     * @dev Locks the controller for a table _forever_. Controller can be an EOA or contract address.\\n     *\\n     * Although not very useful, it is possible to lock a table controller that is set to the zero address.\\n     *\\n     * caller - the address that is locking the controller\\n     * tableId - the id of the target table\\n     *\\n     * Requirements:\\n     *\\n     * - contract must be unpaused\\n     * - `msg.sender` must be `caller` and owner of `tableId`\\n     * - `tableId` must exist\\n     * - `tableId` controller must not be locked\\n     */\\n    function lockController(address caller, uint256 tableId) external;\\n\\n    /**\\n     * @dev Sets the contract base URI.\\n     *\\n     * baseURI - the new base URI\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     */\\n    function setBaseURI(string memory baseURI) external;\\n\\n    /**\\n     * @dev Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be unpaused\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - `msg.sender` must be contract owner\\n     * - contract must be paused\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x1fac08244133826a1c5e745783c4280ba002d6b828eb16d3750d4d5e29afccbb\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/SQLHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Library of helpers for generating SQL statements from common parameters.\\n */\\nlibrary SQLHelpers {\\n    /**\\n     * @dev Generates a properly formatted table name from a prefix and table id.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toNameFromId(\\n        string memory prefix,\\n        uint256 tableId\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"_\\\",\\n                    Strings.toString(tableId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates a CREATE statement based on a desired schema and table prefix.\\n     *\\n     * schema - a comma seperated string indicating the desired prefix. Example: \\\"int id, text name\\\"\\n     * prefix - the user generated table prefix as a string\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toCreateFromSchema(\\n        string memory schema,\\n        string memory prefix\\n    ) internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"CREATE TABLE \\\",\\n                    prefix,\\n                    \\\"_\\\",\\n                    Strings.toString(block.chainid),\\n                    \\\"(\\\",\\n                    schema,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - a string encoded ordered list of values that will be inserted wrapped in parentheses. Example: \\\"'jerry', 24\\\". Values order must match column order.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"INSERT INTO \\\",\\n                    name,\\n                    \\\"(\\\",\\n                    columns,\\n                    \\\")VALUES(\\\",\\n                    values,\\n                    \\\")\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Generates an INSERT statement based on table prefix, tableId, columns, and values.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * columns - a string encoded ordered list of columns that will be updated. Example: \\\"name, age\\\".\\n     * values - an array where each item is a string encoded ordered list of values.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toBatchInsert(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory columns,\\n        string[] memory values\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory insert = string(\\n            abi.encodePacked(\\\"INSERT INTO \\\", name, \\\"(\\\", columns, \\\")VALUES\\\")\\n        );\\n        for (uint256 i = 0; i < values.length; i++) {\\n            if (i == 0) {\\n                insert = string(abi.encodePacked(insert, \\\"(\\\", values[i], \\\")\\\"));\\n            } else {\\n                insert = string(abi.encodePacked(insert, \\\",(\\\", values[i], \\\")\\\"));\\n            }\\n        }\\n        return insert;\\n    }\\n\\n    /**\\n     * @dev Generates an Update statement based on table prefix, tableId, setters, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string\\n     * tableId - the Tableland generated tableId as a uint256\\n     * setters - a string encoded set of updates. Example: \\\"name='tom', age=26\\\"\\n     * filters - a string encoded list of filters or \\\"\\\" for no filters. Example: \\\"id<2 and name!='jerry'\\\"\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toUpdate(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory setters,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        string memory filter = \\\"\\\";\\n        if (bytes(filters).length > 0) {\\n            filter = string(abi.encodePacked(\\\" WHERE \\\", filters));\\n        }\\n        return\\n            string(abi.encodePacked(\\\"UPDATE \\\", name, \\\" SET \\\", setters, filter));\\n    }\\n\\n    /**\\n     * @dev Generates a Delete statement based on table prefix, tableId, and filters.\\n     *\\n     * prefix - the user generated table prefix as a string.\\n     * tableId - the Tableland generated tableId as a uint256.\\n     * filters - a string encoded list of filters. Example: \\\"id<2 and name!='jerry'\\\".\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function toDelete(\\n        string memory prefix,\\n        uint256 tableId,\\n        string memory filters\\n    ) internal view returns (string memory) {\\n        string memory name = toNameFromId(prefix, tableId);\\n        return\\n            string(abi.encodePacked(\\\"DELETE FROM \\\", name, \\\" WHERE \\\", filters));\\n    }\\n\\n    /**\\n     * @dev Add single quotes around a string value\\n     *\\n     * input - any input value.\\n     *\\n     */\\n    function quote(string memory input) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"'\\\", input, \\\"'\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xcfb69c1bb8dcce6ec512c359fb922db4167a007c8cc8fa84456e4d244afb54e0\",\"license\":\"MIT\"},\"@tableland/evm/contracts/utils/TablelandDeployments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10 <0.9.0;\\n\\nimport {ITablelandTables} from \\\"../interfaces/ITablelandTables.sol\\\";\\nimport {IERC721AUpgradeable} from \\\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\\\";\\n\\ninterface TablelandTablesImpl is ITablelandTables, IERC721AUpgradeable {}\\n\\n/**\\n * @dev Helper library for getting an instance of ITablelandTables for the currently executing EVM chain.\\n */\\nlibrary TablelandDeployments {\\n    /**\\n     * Current chain does not have a TablelandTables deployment.\\n     */\\n    error ChainNotSupported(uint256 chainid);\\n\\n    // TablelandTables address on Ethereum.\\n    address internal constant MAINNET =\\n        0x012969f7e3439a9B04025b5a049EB9BAD82A8C12;\\n    // TablelandTables address on Ethereum.\\n    address internal constant HOMESTEAD = MAINNET;\\n    // TablelandTables address on Optimism.\\n    address internal constant OPTIMISM =\\n        0xfad44BF5B843dE943a09D4f3E84949A11d3aa3e6;\\n    // TablelandTables address on Arbitrum One.\\n    address internal constant ARBITRUM =\\n        0x9aBd75E8640871A5a20d3B4eE6330a04c962aFfd;\\n    // TablelandTables address on Arbitrum Nova.\\n    address internal constant ARBITRUM_NOVA =\\n        0x1A22854c5b1642760a827f20137a67930AE108d2;\\n    // TablelandTables address on Polygon.\\n    address internal constant MATIC =\\n        0x5c4e6A9e5C1e1BF445A062006faF19EA6c49aFeA;\\n    // TablelandTables address on Filecoin.\\n    address internal constant FILECOIN =\\n        0x59EF8Bf2d6c102B4c42AEf9189e1a9F0ABfD652d;\\n\\n    // TablelandTables address on Ethereum Sepolia.\\n    address internal constant SEPOLIA =\\n        0xc50C62498448ACc8dBdE43DA77f8D5D2E2c7597D;\\n    // TablelandTables address on Optimism Goerli.\\n    address internal constant OPTIMISM_GOERLI =\\n        0xC72E8a7Be04f2469f8C2dB3F1BdF69A7D516aBbA;\\n    // TablelandTables address on Arbitrum Sepolia.\\n    address internal constant ARBITRUM_SEPOLIA =\\n        0x223A74B8323914afDC3ff1e5005564dC17231d6e;\\n    // TablelandTables address on Polygon Mumbai.\\n    address internal constant MATICMUM =\\n        0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68;\\n    // TablelandTables address on Filecoin Calibration.\\n    address internal constant FILECOIN_CALIBRATION =\\n        0x030BCf3D50cad04c2e57391B12740982A9308621;\\n\\n    // TablelandTables address on for use with https://github.com/tablelandnetwork/tableland-js/tree/main/packages/local.\\n    address internal constant LOCAL_TABLELAND =\\n        0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n\\n    /**\\n     * @dev Returns an interface to Tableland for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function get() internal view returns (TablelandTablesImpl) {\\n        if (block.chainid == 1) {\\n            return TablelandTablesImpl(MAINNET);\\n        } else if (block.chainid == 10) {\\n            return TablelandTablesImpl(OPTIMISM);\\n        } else if (block.chainid == 42161) {\\n            return TablelandTablesImpl(ARBITRUM);\\n        } else if (block.chainid == 42170) {\\n            return TablelandTablesImpl(ARBITRUM_NOVA);\\n        } else if (block.chainid == 137) {\\n            return TablelandTablesImpl(MATIC);\\n        } else if (block.chainid == 314) {\\n            return TablelandTablesImpl(FILECOIN);\\n        } else if (block.chainid == 11155111) {\\n            return TablelandTablesImpl(SEPOLIA);\\n        } else if (block.chainid == 420) {\\n            return TablelandTablesImpl(OPTIMISM_GOERLI);\\n        } else if (block.chainid == 421614) {\\n            return TablelandTablesImpl(ARBITRUM_SEPOLIA);\\n        } else if (block.chainid == 80001) {\\n            return TablelandTablesImpl(MATICMUM);\\n        } else if (block.chainid == 314159) {\\n            return TablelandTablesImpl(FILECOIN_CALIBRATION);\\n        } else if (block.chainid == 31337) {\\n            return TablelandTablesImpl(LOCAL_TABLELAND);\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the Tableland gateway base URI for the currently executing EVM chain.\\n     *\\n     * The selection order is meant to reduce gas on more expensive chains.\\n     *\\n     * Requirements:\\n     *\\n     * - block.chainid must refer to a supported chain.\\n     */\\n    function getBaseURI() internal view returns (string memory) {\\n        if (block.chainid == 1) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 10) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42161) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 42170) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 137) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314) {\\n            return \\\"https://tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 11155111) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 420) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 421613) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 80001) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 314159) {\\n            return \\\"https://testnets.tableland.network/api/v1/\\\";\\n        } else if (block.chainid == 31337) {\\n            return \\\"http://localhost:8080/api/v1/\\\";\\n        } else {\\n            revert ChainNotSupported(block.chainid);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad243cc2a9da78a4536c5f67749fa0a6e2646da29acf0c916ae090488b77cfce\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n* @title The PublicLock Interface\\n*/\\n\\n\\ninterface IPublicLockV12\\n{\\n\\n  /// Functions\\n  function initialize(\\n    address _lockCreator,\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName\\n  ) external;\\n\\n\\n  // roles\\n  function DEFAULT_ADMIN_ROLE() external view returns (bytes32 role);\\n  function KEY_GRANTER_ROLE() external view returns (bytes32 role);\\n  function LOCK_MANAGER_ROLE() external view returns (bytes32 role);\\n\\n  /**\\n  * @notice The version number of the current implementation on this network.\\n  * @return The current version number.\\n  */\\n  function publicLockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @dev Called by lock manager to withdraw all funds from the lock\\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\\n   * the same as `tokenAddress` in MixinFunds.\\n   * @param _recipient specifies the address that will receive the tokens\\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything. \\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\\n   */\\n  function withdraw(\\n    address _tokenAddress,\\n    address payable _recipient,\\n    uint _amount\\n  ) external;\\n\\n  /**\\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if lock has been disabled\\n   * @dev Throws if _tokenAddress is not a valid token\\n   * @param _keyPrice The new price to set for keys\\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\\n   * or 0 to use ETH\\n   */\\n  function updateKeyPricing( uint _keyPrice, address _tokenAddress ) external;\\n\\n  /**\\n   * Update the main key properties for the entire lock: \\n   * \\n   * - default duration of each key\\n   * - the maximum number of keys the lock can edit\\n   * - the maximum number of keys a single address can hold\\n   *\\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\\n   * existing keys timestamps are not recalculated/updated)\\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\\n   * @param _maxNumberOfKeys uint the maximum number of keys\\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply \\n   */\\n   function updateLockConfig(\\n    uint _newExpirationDuration,\\n    uint _maxNumberOfKeys,\\n    uint _maxKeysPerAcccount\\n  ) external;\\n\\n  /**\\n   * Checks if the user has a non-expired key.\\n   * @param _user The address of the key owner\\n   */\\n  function getHasValidKey(\\n    address _user\\n  ) external view returns (bool);\\n\\n  /**\\n  * @dev Returns the key's ExpirationTimestamp field for a given owner.\\n  * @param _tokenId the id of the key\\n  * @dev Returns 0 if the owner has never owned a key for this lock\\n  */\\n  function keyExpirationTimestampFor(\\n    uint _tokenId\\n  ) external view returns (uint timestamp);\\n  \\n  /**\\n   * Public function which returns the total number of unique owners (both expired\\n   * and valid).  This may be larger than totalSupply.\\n   */\\n  function numberOfOwners() external view returns (uint);\\n\\n  /**\\n   * Allows the Lock owner to assign \\n   * @param _lockName a descriptive name for this Lock.\\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\\n   * @param _baseTokenURI the baseTokenURI for this Lock\\n   */\\n  function setLockMetadata(\\n    string calldata _lockName,\\n    string calldata _lockSymbol,\\n    string calldata _baseTokenURI\\n  ) external;\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns(string memory);\\n\\n\\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n   *  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n   *  Metadata JSON Schema\\\".\\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n   * @param _tokenId The tokenID we're inquiring about\\n   * @return String representing the URI for the requested token\\n   */\\n  function tokenURI(\\n    uint256 _tokenId\\n  ) external view returns(string memory);\\n\\n  /**\\n   * Allows a Lock manager to add or remove an event hook\\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\\n   * @param _onKeyTransferHook Hook called when a key is transfered\\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\\n   * @param _onKeyGrantHook Hook called when a key is granted\\n   */\\n  function setEventHooks(\\n    address _onKeyPurchaseHook,\\n    address _onKeyCancelHook,\\n    address _onValidKeyHook,\\n    address _onTokenURIHook,\\n    address _onKeyTransferHook,\\n    address _onKeyExtendHook,\\n    address _onKeyGrantHook\\n  ) external;\\n\\n  /**\\n   * Allows a Lock manager to give a collection of users a key with no charge.\\n   * Each key may be assigned a different expiration date.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _recipients An array of receiving addresses\\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\\n   * @return the ids of the granted tokens\\n   */\\n  function grantKeys(\\n    address[] calldata _recipients,\\n    uint[] calldata _expirationTimestamps,\\n    address[] calldata _keyManagers\\n  ) external returns (uint256[] memory);\\n\\n  /**\\n   * Allows the Lock owner to extend an existing keys with no charge.\\n   * @param _tokenId The id of the token to extend\\n   * @param _duration The duration in secondes to add ot the key\\n   * @dev set `_duration` to 0 to use the default duration of the lock\\n   */\\n  function grantKeyExtension(uint _tokenId, uint _duration) external;\\n\\n  /**\\n  * @dev Purchase function\\n  * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_values is ignored when using ETH)\\n  * @param _recipients array of addresses of the recipients of the purchased key\\n  * @param _referrers array of addresses of the users making the referral\\n  * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\\n  * @param _data array of arbitrary data populated by the front-end which initiated the sale\\n  * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored \\n  * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\\n  * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\\n  * than keyPrice is approved for spending).\\n  * @return tokenIds the ids of the created tokens \\n  */\\n  function purchase(\\n    uint256[] calldata _values,\\n    address[] calldata _recipients,\\n    address[] calldata _referrers,\\n    address[] calldata _keyManagers,\\n    bytes[] calldata _data\\n  ) external payable returns (uint256[] memory tokenIds);\\n  \\n  /**\\n  * @dev Extend function\\n  * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\\n  * (_value is ignored when using ETH)\\n  * @param _tokenId the id of the key to extend\\n  * @param _referrer address of the user making the referral\\n  * @param _data arbitrary data populated by the front-end which initiated the sale\\n  * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\\n  */\\n  function extend(\\n    uint _value,\\n    uint _tokenId,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external payable;\\n\\n\\n  /**\\n  * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  * @param _referrer the address of the referrer\\n  * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\\n  */\\n  function referrerFees(address _referrer) external view returns (uint referrerFee);\\n  \\n  /**\\n  * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing, \\n  * extending or renewing a key. \\n  * @param _referrer the address of the referrer\\n  * @param _feeBasisPoint the percentage of the price to be used for this \\n  * specific referrer (in basis points)\\n  * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\\n  */\\n  function setReferrerFee(address _referrer, uint _feeBasisPoint) external;\\n\\n  /**\\n   * Merge existing keys\\n   * @param _tokenIdFrom the id of the token to substract time from\\n   * @param _tokenIdTo the id of the destination token  to add time\\n   * @param _amount the amount of time to transfer (in seconds)\\n   */\\n  function mergeKeys(uint _tokenIdFrom, uint _tokenIdTo, uint _amount) external;\\n\\n  /**\\n   * Deactivate an existing key\\n   * @param _tokenId the id of token to burn\\n   * @notice the key will be expired and ownership records will be destroyed\\n   */\\n  function burn(uint _tokenId) external;\\n\\n  /**\\n  * @param _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Set the value to be refunded to the sender on purchase\\n  */\\n  function setGasRefundValue(uint256 _gasRefundValue) external;\\n  \\n  /**\\n  * _gasRefundValue price in wei or token in smallest price unit\\n  * @dev Returns the value/rpice to be refunded to the sender on purchase\\n  */\\n  function gasRefundValue() external view returns (uint256 _gasRefundValue);\\n\\n  /**\\n   * @notice returns the minimum price paid for a purchase with these params.\\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\\n   */\\n  function purchasePriceFor(\\n    address _recipient,\\n    address _referrer,\\n    bytes calldata _data\\n  ) external view\\n    returns (uint);\\n\\n  /**\\n   * Allow a Lock manager to change the transfer fee.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\\n   * Ex: 200 bps = 2%\\n   */\\n  function updateTransferFee(\\n    uint _transferFeeBasisPoints\\n  ) external;\\n\\n  /**\\n   * Determines how much of a fee would need to be paid in order to\\n   * transfer to another account.  This is pro-rated so the fee goes \\n   * down overtime.\\n   * @dev Throws if _tokenId does not have a valid key\\n   * @param _tokenId The id of the key check the transfer fee for.\\n   * @param _time The amount of time to calculate the fee for.\\n   * @return The transfer fee in seconds.\\n   */\\n  function getTransferFee(\\n    uint _tokenId,\\n    uint _time\\n  ) external view returns (uint);\\n\\n  /**\\n   * @dev Invoked by a Lock manager to expire the user's key \\n   * and perform a refund and cancellation of the key\\n   * @param _tokenId The key id we wish to refund to\\n   * @param _amount The amount to refund to the key-owner\\n   * @dev Throws if called by other than a Lock manager\\n   * @dev Throws if _keyOwner does not have a valid key\\n   */\\n  function expireAndRefundFor(\\n    uint _tokenId,\\n    uint _amount\\n  ) external;\\n\\n   /**\\n   * @dev allows the key manager to expire a given tokenId\\n   * and send a refund to the keyOwner based on the amount of time remaining.\\n   * @param _tokenId The id of the key to cancel.\\n   */\\n  function cancelAndRefund(uint _tokenId) external;\\n\\n  /**\\n   * Allow a Lock manager to change the refund penalty.\\n   * @dev Throws if called by other than a Lock manager\\n   * @param _freeTrialLength The new duration of free trials for this lock\\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\\n   */\\n  function updateRefundPenalty(\\n    uint _freeTrialLength,\\n    uint _refundPenaltyBasisPoints\\n  ) external;\\n\\n  /**\\n   * @dev Determines how much of a refund a key owner would receive if they issued\\n   * @param _tokenId the id of the token to get the refund value for.\\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\\n   * than what the user reads from this call.\\n   * @return refund the amount of tokens refunded\\n   */\\n  function getCancelAndRefundValue(\\n    uint _tokenId\\n  ) external view returns (uint refund);\\n\\n  function addKeyGranter(address account) external;\\n\\n  function addLockManager(address account) external;\\n\\n  function isKeyGranter(address account) external view returns (bool);\\n\\n  function isLockManager(address account) external view returns (bool);\\n\\n  \\n /**\\n   * Returns the address of the `onKeyPurchaseHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyPurchaseHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onKeyCancelHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onKeyCancelHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onValidKeyHook` hook.\\n   * @return hookAddress address of the hook\\n   */  \\n  function onValidKeyHook() external view returns(address hookAddress);\\n\\n  /**\\n   * Returns the address of the `onTokenURIHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onTokenURIHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyTransferHook` hook.\\n   * @return hookAddress address of the hook\\n   */\\n  function onKeyTransferHook() external view returns(address hookAddress);\\n  \\n  /**\\n   * Returns the address of the `onKeyExtendHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyExtendHook() external view returns(address hookAddress);\\n\\n  /**\\n  * Returns the address of the `onKeyGrantHook` hook.\\n  * @return hookAddress the address ok the hook\\n  */\\n  function onKeyGrantHook() external view returns(address hookAddress);\\n\\n  function revokeKeyGranter(address _granter) external;\\n\\n  function renounceLockManager() external;\\n\\n  /**\\n   * @return the maximum number of key allowed for a single address\\n   */\\n  function maxKeysPerAddress() external view returns (uint);\\n\\n  function expirationDuration() external view returns (uint256 );\\n\\n  function freeTrialLength() external view returns (uint256 );\\n\\n  function keyPrice() external view returns (uint256 );\\n\\n  function maxNumberOfKeys() external view returns (uint256 );\\n\\n  function refundPenaltyBasisPoints() external view returns (uint256 );\\n\\n  function tokenAddress() external view returns (address );\\n\\n  function transferFeeBasisPoints() external view returns (uint256 );\\n\\n  function unlockProtocol() external view returns (address );\\n\\n  function keyManagerOf(uint) external view returns (address );\\n\\n  ///===================================================================\\n\\n  /**\\n  * @notice Allows the key owner to safely share their key (parent key) by\\n  * transferring a portion of the remaining time to a new key (child key).\\n  * @dev Throws if key is not valid.\\n  * @dev Throws if `_to` is the zero address\\n  * @param _to The recipient of the shared key\\n  * @param _tokenId the key to share\\n  * @param _timeShared The amount of time shared\\n  * checks if `_to` is a smart contract (code size > 0). If so, it calls\\n  * `onERC721Received` on `_to` and throws if the return value is not\\n  * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\\n  * @dev Emit Transfer event\\n  */\\n  function shareKey(\\n    address _to,\\n    uint _tokenId,\\n    uint _timeShared\\n  ) external;\\n\\n  /**\\n  * @notice Update transfer and cancel rights for a given key\\n  * @param _tokenId The id of the key to assign rights for\\n  * @param _keyManager The address to assign the rights to for the given key\\n  */\\n  function setKeyManagerOf(\\n    uint _tokenId,\\n    address _keyManager\\n  ) external;\\n  \\n  /**\\n  * Check if a certain key is valid\\n  * @param _tokenId the id of the key to check validity\\n  * @notice this makes use of the onValidKeyHook if it is set\\n  */\\n  function isValidKey(\\n    uint _tokenId\\n  )\\n    external\\n    view\\n    returns (bool);\\n  \\n  /**\\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\\n   * @param _keyOwner address for which we are retrieving the total number of keys\\n   * @return numberOfKeys total number of keys owned by the address\\n   */\\n  function totalKeys(address _keyOwner) external view returns (uint numberOfKeys);\\n  \\n  /// @notice A descriptive name for a collection of NFTs in this contract\\n  function name() external view returns (string memory _name);\\n  ///===================================================================\\n\\n  /// From ERC165.sol\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n  ///===================================================================\\n\\n  /// From ERC-721\\n  /**\\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\\n   * @return balance The number of valid keys owned by `_keyOwner`\\n  */\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  /**\\n    * @dev Returns the owner of the NFT specified by `tokenId`.\\n    */\\n  function ownerOf(uint256 tokenId) external view returns (address _owner);\\n\\n  /**\\n    * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Requirements:\\n    * - `from`, `to` cannot be zero.\\n    * - `tokenId` must be owned by `from`.\\n    * - If the caller is not `from`, it must be have been allowed to move this\\n    * NFT by either {approve} or {setApprovalForAll}.\\n    */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n  \\n  /** \\n  * an ERC721-like function to transfer a token from one account to another. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\\n  * either {approve} or {setApprovalForAll}. \\n  * The key manager will be reset to address zero after the transfer\\n  */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /** \\n  * Lending a key allows you to transfer the token while retaining the\\n  * ownerships right by setting yourself as a key manager first. \\n  * @param from the owner of token to transfer\\n  * @param to the address that will receive the token\\n  * @param tokenId the id of the token\\n  * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\\n  * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\\n  * will become the key manager.\\n  */\\n  function lendKey(address from, address to, uint tokenId) external;\\n\\n  /** \\n  * Unlend is called when you have lent a key and want to claim its full ownership back. \\n  * @param _recipient the address that will receive the token ownership\\n  * @param _tokenId the id of the token\\n  * @dev Only the key manager of the token can call this function\\n  */\\n  function unlendKey(address _recipient, uint _tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n  * @notice Get the approved address for a single NFT\\n  * @dev Throws if `_tokenId` is not a valid NFT.\\n  * @param _tokenId The NFT to find the approved address for\\n  * @return operator The approved address for this NFT, or the zero address if there is none\\n  */\\n  function getApproved(uint256 _tokenId) external view returns (address operator);\\n\\n   /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param _operator operator address to set the approval\\n   * @param _approved representing the status of the approval to be set\\n   * @notice disabled when transfers are disabled\\n   */\\n  function setApprovalForAll(address _operator, bool _approved) external;\\n\\n   /**\\n   * @dev Tells whether an operator is approved by a given keyManager\\n   * @param _owner owner address which you want to query the approval of\\n   * @param _operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n  function totalSupply() external view returns (uint256);\\n  function tokenOfOwnerByIndex(address _owner, uint256 index) external view returns (uint256 tokenId);\\n\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n  /**\\n    * Innherited from Open Zeppelin AccessControl.sol\\n    */\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n  function grantRole(bytes32 role, address account) external;\\n  function revokeRole(bytes32 role, address account) external;\\n  function renounceRole(bytes32 role, address account) external;\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  /**\\n    * @param _tokenId the id of the token to transfer time from\\n    * @param _to the recipient of the new token with time\\n    * @param _value sends a token with _value * expirationDuration (the amount of time remaining on a standard purchase).\\n    * @dev The typical use case would be to call this with _value 1, which is on par with calling `transferFrom`. If the user\\n    * has more than `expirationDuration` time remaining this may use the `shareKey` function to send some but not all of the token.\\n    * @return success the result of the transfer operation\\n    */\\n  function transfer(\\n    uint _tokenId,\\n    address _to,\\n    uint _value\\n  ) external\\n    returns (bool success);\\n\\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\\n    * The `Ownable` logic is used by many 3rd party services to determine\\n    * contract ownership - e.g. who is allowed to edit metadata on Opensea.\\n    * \\n    * @notice This logic is NOT used internally by the Unlock Protocol and is made \\n    * available only as a convenience helper.\\n    */\\n  function owner() external view returns (address owner);\\n  function setOwner(address account) external;\\n  function isOwner(address account) view external returns (bool isOwner);\\n\\n  /**\\n  * Migrate data from the previous single owner => key mapping to \\n  * the new data structure w multiple tokens.\\n  * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\\n  * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\\n  * variable to the latest/current lock version\\n  */\\n  function migrate(bytes calldata _calldata) external;\\n\\n  /**\\n  * Returns the version number of the data schema currently used by the lock\\n  * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\\n  * or extend keys is disabled.\\n  * @dev will return 0 if no ;igration has ever been run\\n  */\\n  function schemaVersion() external view returns (uint);\\n\\n  /**\\n   * Set the schema version to the latest\\n   * @notice only lock manager call call this\\n   */\\n  function updateSchemaVersion() external;\\n\\n    /**\\n  * Renew a given token\\n  * @notice only works for non-free, expiring, ERC20 locks\\n  * @param _tokenId the ID fo the token to renew\\n  * @param _referrer the address of the person to be granted UDT\\n  */\\n  function renewMembershipFor(\\n    uint _tokenId,\\n    address _referrer\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2eb51bbb40902800df5120160f1fd006303c8c0026b57dcb2fe97905579a7227\",\"license\":\"MIT\"},\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.17 <0.9.0;\\n\\n/**\\n * @title The Unlock Interface\\n **/\\n\\ninterface IUnlockV12 {\\n  // Use initialize instead of a constructor to support proxies(for upgradeability via zos).\\n  function initialize(address _unlockOwner) external;\\n\\n  /**\\n   * @dev deploy a ProxyAdmin contract used to upgrade locks\\n   */\\n  function initializeProxyAdmin() external;\\n\\n  /**\\n   * Retrieve the contract address of the proxy admin that manages the locks\\n   * @return _proxyAdminAddress the address of the ProxyAdmin instance\\n   */\\n  function proxyAdminAddress()\\n    external\\n    view\\n    returns (address _proxyAdminAddress);\\n\\n  /**\\n   * @notice Create lock (legacy)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param _expirationDuration the duration of the lock (pass 0 for unlimited duration)\\n   * @param _tokenAddress set to the ERC20 token address, or 0 for ETH.\\n   * @param _keyPrice the price of each key\\n   * @param _maxNumberOfKeys the maximum nimbers of keys to be edited\\n   * @param _lockName the name of the lock\\n   * param _salt [deprec] -- kept only for backwards copatibility\\n   * This may be implemented as a sequence ID or with RNG. It's used with `create2`\\n   * to know the lock's address before the transaction is mined.\\n   * @dev internally call `createUpgradeableLock`\\n   */\\n  function createLock(\\n    uint _expirationDuration,\\n    address _tokenAddress,\\n    uint _keyPrice,\\n    uint _maxNumberOfKeys,\\n    string calldata _lockName,\\n    bytes12 // _salt\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Create lock (default)\\n   * This deploys a lock for a creator. It also keeps track of the deployed lock.\\n   * @param data bytes containing the call to initialize the lock template\\n   * @dev this call is passed as encoded function - for instance:\\n   *  bytes memory data = abi.encodeWithSignature(\\n   *    'initialize(address,uint256,address,uint256,uint256,string)',\\n   *    msg.sender,\\n   *    _expirationDuration,\\n   *    _tokenAddress,\\n   *    _keyPrice,\\n   *    _maxNumberOfKeys,\\n   *    _lockName\\n   *  );\\n   * @return address of the create lock\\n   */\\n  function createUpgradeableLock(\\n    bytes memory data\\n  ) external returns (address);\\n\\n  /**\\n   * Create an upgradeable lock using a specific PublicLock version\\n   * @param data bytes containing the call to initialize the lock template\\n   * (refer to createUpgradeableLock for more details)\\n   * @param _lockVersion the version of the lock to use\\n   */\\n  function createUpgradeableLockAtVersion(\\n    bytes memory data,\\n    uint16 _lockVersion\\n  ) external returns (address);\\n\\n  /**\\n   * @notice Upgrade a lock to a specific version\\n   * @dev only available for publicLockVersion > 10 (proxyAdmin /required)\\n   * @param lockAddress the existing lock address\\n   * @param version the version number you are targeting\\n   * Likely implemented with OpenZeppelin TransparentProxy contract\\n   */\\n  function upgradeLock(\\n    address payable lockAddress,\\n    uint16 version\\n  ) external returns (address);\\n\\n  /**\\n   * This function keeps track of the added GDP, as well as grants of discount tokens\\n   * to the referrer, if applicable.\\n   * The number of discount tokens granted is based on the value of the referal,\\n   * the current growth rate and the lock's discount token distribution rate\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordKeyPurchase(\\n    uint _value,\\n    address _referrer // solhint-disable-line no-unused-vars\\n  ) external;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function will keep track of consumed discounts by a given user.\\n   * It will also grant discount tokens to the creator who is granting the discount based on the\\n   * amount of discount and compensation rate.\\n   * This function is invoked by a previously deployed lock only.\\n   */\\n  function recordConsumedDiscount(\\n    uint _discount,\\n    uint _tokens // solhint-disable-line no-unused-vars\\n  ) external view;\\n\\n  /**\\n   * @notice [DEPRECATED] Call to this function has been removed from PublicLock > v9.\\n   * @dev [DEPRECATED] Kept for backwards compatibility\\n   * This function returns the discount available for a user, when purchasing a\\n   * a key from a lock.\\n   * This does not modify the state. It returns both the discount and the number of tokens\\n   * consumed to grant that discount.\\n   */\\n  function computeAvailableDiscountFor(\\n    address _purchaser, // solhint-disable-line no-unused-vars\\n    uint _keyPrice // solhint-disable-line no-unused-vars\\n  ) external pure returns (uint discount, uint tokens);\\n\\n  // Function to read the globalTokenURI field.\\n  function globalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @dev Redundant with globalBaseTokenURI() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalBaseTokenURI()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the globalTokenSymbol field.\\n  function globalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  // Function to read the chainId field.\\n  function chainId() external view returns (uint);\\n\\n  /**\\n   * @dev Redundant with globalTokenSymbol() for backwards compatibility with v3 & v4 locks.\\n   */\\n  function getGlobalTokenSymbol()\\n    external\\n    view\\n    returns (string memory);\\n\\n  /**\\n   * @notice Allows the owner to update configuration variables\\n   */\\n  function configUnlock(\\n    address _udt,\\n    address _weth,\\n    uint _estimatedGasForPurchase,\\n    string calldata _symbol,\\n    string calldata _URI,\\n    uint _chainId\\n  ) external;\\n\\n  /**\\n   * @notice Add a PublicLock template to be used for future calls to `createLock`.\\n   * @dev This is used to upgrade conytract per version number\\n   */\\n  function addLockTemplate(\\n    address impl,\\n    uint16 version\\n  ) external;\\n\\n  /**\\n   * Match lock templates addresses with version numbers\\n   * @param _version the number of the version of the template\\n   * @return _implAddress address of the lock templates\\n   */\\n  function publicLockImpls(\\n    uint16 _version\\n  ) external view returns (address _implAddress);\\n\\n  /**\\n   * Match version numbers with lock templates addresses\\n   * @param _impl the address of the deployed template contract (PublicLock)\\n   * @return number of the version corresponding to this address\\n   */\\n  function publicLockVersions(\\n    address _impl\\n  ) external view returns (uint16);\\n\\n  /**\\n   * Retrive the latest existing lock template version\\n   * @return _version the version number of the latest template (used to deploy contracts)\\n   */\\n  function publicLockLatestVersion()\\n    external\\n    view\\n    returns (uint16 _version);\\n\\n  /**\\n   * @notice Upgrade the PublicLock template used for future calls to `createLock`.\\n   * @dev This will initialize the template and revokeOwnership.\\n   */\\n  function setLockTemplate(\\n    address payable _publicLockAddress\\n  ) external;\\n\\n  // Allows the owner to change the value tracking variables as needed.\\n  function resetTrackedValue(\\n    uint _grossNetworkProduct,\\n    uint _totalDiscountGranted\\n  ) external;\\n\\n  function grossNetworkProduct()\\n    external\\n    view\\n    returns (uint);\\n\\n  function totalDiscountGranted()\\n    external\\n    view\\n    returns (uint);\\n\\n  function locks(\\n    address\\n  )\\n    external\\n    view\\n    returns (\\n      bool deployed,\\n      uint totalSales,\\n      uint yieldedDiscountTokens\\n    );\\n\\n  // The address of the public lock template, used when `createLock` is called\\n  function publicLockAddress()\\n    external\\n    view\\n    returns (address);\\n\\n  // Map token address to exchange contract address if the token is supported\\n  // Used for GDP calculations\\n  function uniswapOracles(\\n    address\\n  ) external view returns (address);\\n\\n  // The WETH token address, used for value calculations\\n  function weth() external view returns (address);\\n\\n  // The UDT token address, used to mint tokens on referral\\n  function udt() external view returns (address);\\n\\n  // The approx amount of gas required to purchase a key\\n  function estimatedGasForPurchase()\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * Helper to get the network mining basefee as introduced in EIP-1559\\n   * @dev this helper can be wrapped in try/catch statement to avoid\\n   * revert in networks where EIP-1559 is not implemented\\n   */\\n  function networkBaseFee() external view returns (uint);\\n\\n  // The version number of the current Unlock implementation on this network\\n  function unlockVersion() external pure returns (uint16);\\n\\n  /**\\n   * @notice allows the owner to set the oracle address to use for value conversions\\n   * setting the _oracleAddress to address(0) removes support for the token\\n   * @dev This will also call update to ensure at least one datapoint has been recorded.\\n   */\\n  function setOracle(\\n    address _tokenAddress,\\n    address _oracleAddress\\n  ) external;\\n\\n  // Initialize the Ownable contract, granting contract ownership to the specified sender\\n  function __initializeOwnable(address sender) external;\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() external view returns (bool);\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external;\\n\\n  /**\\n   * Set the fee collected by the protocol\\n   * @param _protocolFee fee (in basis points)\\n   */\\n  function setProtocolFee(uint _protocolFee) external;\\n\\n  /**\\n   * The fee (in basis points) collected by the protocol on each purchase / \\n   extension / renewal of a key\\n   * @return the protocol fee in basic point\\n   */\\n  function protocolFee() external view returns (uint);\\n\\n  \\n  /**\\n   * Returns the ProxyAdmin contract address that manage upgrades for \\n   * the current Unlock contract.\\n   * @dev this reads the address directly from storage, at the slot `_ADMIN_SLOT` \\n   * defined by Open Zeppelin's EIP1967 Proxy implementation which corresponds\\n   * to the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\n   */\\n   function getAdmin() external view returns (address);\\n\\n  /**\\n   * Call executed by a lock after its version upgrade triggred by `upgradeLock`\\n   * - PublicLock v12 > v13 (mainnet): migrate an existing Lock to another instance \\n   * of the Unlock contract\\n   * @dev The `msg.sender` will be the upgraded lock\\n   */\\n  function postLockUpgrade() external;\\n}\\n\",\"keccak256\":\"0xfa4c0a7d63692de5c4898b4e3d942552ba678235184d4f55fe3c3730b79b572a\",\"license\":\"MIT\"},\"contracts/DBNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Core} from \\\"./libraries/Core.sol\\\";\\n\\n/**\\n * @title DBNS\\n * @dev Create a decentralized Database NameSpaces\\n * Where space and subSpaces can get created and anyone can\\n * create instances inside a space and contribute to the public\\n * this is possible by integrating tableland SQL in solidity\\n * ENS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n */\\ncontract DBNS is Core {\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode,\\n        address _unlockContract,\\n        address _gateImplementation\\n    )\\n        Core(\\n            _registry,\\n            _registrar,\\n            _publicResolver,\\n            _baseNode,\\n            _unlockContract,\\n            _gateImplementation\\n        )\\n    {}\\n\\n    /**\\n     * @dev Create a new space under the given node\\n     * @param _name The name of the new space\\n     */\\n    function createDBSpace(\\n        string calldata _name\\n    ) public {\\n        bytes32 _newDBSpace = createSubNode(DBNS_NODE, _name);\\n\\n        isType[_newDBSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSpace, DBNS_NODE, _name);\\n    }\\n\\n    /**\\n     * @dev Create a new subnode under the given node\\n     * @param _DBSpace The parent node\\n     * @param _name The name of the new subnode\\n     */\\n    function createDBSubSpace(\\n        bytes32 _DBSpace,\\n        string calldata _name\\n    ) external {\\n        require(\\n            isType[_DBSpace] == Types.SUBNODE,\\n            \\\"DBNS: Node is not a subnode\\\"\\n        );\\n\\n        bytes32 _newDBSubSpace = createSubNode(_DBSpace, _name);\\n\\n        isType[_newDBSubSpace] = Types.SUBNODE;\\n\\n        spaceInsertion(_newDBSubSpace, _DBSpace, _name);\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _node The parent node\\n     * @param _members The hatID of the new instance\\n     * @param _metadataCID The name of the new instance\\n     * @param _chatID The chatID of the new instance\\n     * @param _IPNS The IPNS of the new instance\\n     */\\n    function createSpaceInstance(\\n        bytes32 _node,\\n        uint256 _price,\\n        address[] calldata _members,\\n        string calldata _metadataCID,\\n        string calldata _chatID,\\n        string calldata _IPNS,\\n        string calldata _IPNSEncryptedKey\\n    ) external {\\n        require(isType[_node] == Types.SUBNODE, \\\"DBNS: Node is not a subnode\\\");\\n\\n        bytes32 _newDBInstance = keccak256(abi.encodePacked(_node, _IPNS));\\n\\n        if (isType[_newDBInstance] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        address _gatedContract;\\n        if (_members.length > 0) {\\n            _gatedContract = createGatedContract(_members, _newDBInstance);\\n            _insertMembers(_newDBInstance, _members);\\n        }\\n\\n        instances[_newDBInstance] = SpaceInstance(\\n            _gatedContract,\\n            _price,\\n            msg.sender\\n        );\\n\\n        address _lock = createInstanceType(\\n            _newDBInstance,\\n            _gatedContract,\\n            _price\\n        );\\n\\n        instanceInsertion(\\n            _lock,\\n            _newDBInstance,\\n            uint8(isType[_newDBInstance]),\\n            _node,\\n            _gatedContract,\\n            _price,\\n            _metadataCID,\\n            _chatID,\\n            _IPNS,\\n            _IPNSEncryptedKey\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a new instance under the given node\\n     * @param _instance The parent node\\n     * @param _name The name of the new instance\\n     * @param _about The about of the new instance\\n     * @param _chatID The chatID of the new instance\\n     * @param _codeIPNS The IPNS of the new instance\\n     */\\n    function createInstanceCode(\\n        bytes32 _instance,\\n        string calldata _name,\\n        string calldata _about,\\n        string calldata _chatID,\\n        string calldata _codeIPNS,\\n        string calldata _IPNSEncryptedKey\\n    ) external {\\n        if (!hasMutateAccess(_instance, msg.sender)) {\\n            revert NoInstanceAccess();\\n        }\\n\\n        bytes32 _newDBInstanceCode = keccak256(\\n            abi.encodePacked(_instance, _codeIPNS)\\n        );\\n\\n        if (isType[_newDBInstanceCode] != Types.NULL) {\\n            revert InstanceAlreadyExists();\\n        }\\n        codeOwner[_newDBInstanceCode] = msg.sender;\\n        isType[_newDBInstanceCode] = Types.CODE;\\n\\n        InsertInstanceCode(\\n            _instance,\\n            _newDBInstanceCode,\\n            _name,\\n            _about,\\n            _chatID,\\n            _codeIPNS,\\n            _IPNSEncryptedKey\\n        );\\n    }\\n\\n    function purchaseInstanceSubscription(\\n        bytes32 _instanceID\\n    ) external payable {\\n        uint256 _tokenID = purchaseSubscription(_instanceID);\\n        insertSubscription(\\n            _instanceID,\\n            msg.sender,\\n            _tokenID,\\n            block.timestamp + MONTH\\n        );\\n    }\\n\\n    function extendInstanceSubscription(bytes32 _instanceID) external payable {\\n        uint256 remaining = getRemainingSubscriptionTime(\\n            _instanceID,\\n            msg.sender\\n        );\\n        uint256 _tokenID = extendSubscription(_instanceID);\\n        insertSubscription(\\n            _instanceID,\\n            msg.sender,\\n            _tokenID,\\n            remaining + MONTH\\n        );\\n    }\\n\\n    function updateCode(\\n        bytes32 _codeID,\\n        string calldata _name,\\n        string calldata _about\\n    ) external {\\n        if (codeOwner[_codeID] != msg.sender) {\\n            revert NoCodeOwner();\\n        }\\n        updateInstanceCode(_codeID, _name, _about);\\n    }\\n\\n    function updateInstance(\\n        bytes32 _instanceID,\\n        string calldata _metadataCID\\n    ) external {\\n        if (instances[_instanceID].creator != msg.sender) {\\n            // revert NoInstanceAccess();\\n            revert(\\\"DBNS: No instance access\\\");\\n        }\\n        updateInstanceMetadata(_instanceID, _metadataCID);\\n    }\\n}\\n\",\"keccak256\":\"0x03497b04c9b851f1e697fc0f30fee47b6c9db1aa9f11107b2d27ca8289082cb0\",\"license\":\"MIT\"},\"contracts/interfaces/IENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IFNSResolver {\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) external;\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\\ninterface IFNS {\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n}\\n\\ninterface IFNSRegistrar {\\n    function reclaim(uint256 id, address _owner) external;\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf40e25db39d4c7385c71959d99e7a4256c226bfcd6129a1fea10e2f34b3c26ca\",\"license\":\"MIT\"},\"contracts/libraries/Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {FNS} from \\\"./FNS.sol\\\";\\n\\nimport {Gated, IGated} from \\\"./Gated.sol\\\";\\n\\nimport {Unlock} from \\\"./Unlock.sol\\\";\\n\\nimport {Tableland} from \\\"./Tableland.sol\\\";\\n\\n/**\\n * @title Core\\n * @dev Interface for the Ens system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract Core is FNS, Gated, Tableland, Unlock {\\n    enum Types {\\n        NULL,\\n        PAID_PRIVATE_INSTANCE,\\n        OPEN_PRIVATE_INSTANCE,\\n        PAID_INSTANCE,\\n        OPEN_INSTANCE,\\n        SUBNODE,\\n        CODE\\n    }\\n\\n    struct SpaceInstance {\\n        address gatedContract;\\n        uint256 price;\\n        address creator;\\n    }\\n\\n    mapping(bytes32 => SpaceInstance) public instances;\\n\\n    mapping(bytes32 => address) public codeOwner;\\n\\n    mapping(bytes32 => Types) public isType;\\n\\n    error NoCodeOwner();\\n\\n    error InstanceAlreadyExists();\\n\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode,\\n        address _UnlockContract,\\n        address _gatedImplementation\\n    )\\n        FNS(_registry, _registrar, _publicResolver, _baseNode)\\n        Gated(_gatedImplementation)\\n        Tableland()\\n        Unlock(_UnlockContract)\\n    {}\\n\\n    /**\\n     * @dev createInstanceType\\n     * @param _newDBInstance The new instance\\n     * @param _gatedContract The gatedContract of the new instance\\n     * @param _price The price of the new instance\\n     */\\n    function createInstanceType(\\n        bytes32 _newDBInstance,\\n        address _gatedContract,\\n        uint256 _price\\n    ) internal returns (address _lock) {\\n        bool _isPrivate = _gatedContract != address(0);\\n        if (_price > 0) {\\n            isType[_newDBInstance] = Types.PAID_INSTANCE;\\n            _lock = createLock(_price, \\\"DBNS\\\", _newDBInstance);\\n        } else if (_isPrivate && _price > 0) {\\n            isType[_newDBInstance] = Types.PAID_PRIVATE_INSTANCE;\\n            _lock = createLock(_price, \\\"DBNS\\\", _newDBInstance);\\n        } else if (_isPrivate) {\\n            isType[_newDBInstance] = Types.OPEN_PRIVATE_INSTANCE;\\n        } else {\\n            isType[_newDBInstance] = Types.OPEN_INSTANCE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if the sender has access to the given instance\\n     * @param _instance The instance to check\\n     * @param _sender The sender to check\\n     * @return bool\\n     */\\n    function hasViewAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        if (isType[_instance] == Types.PAID_INSTANCE) {\\n            return hasActiveSubscription(_instance, _sender);\\n        } else if (isType[_instance] == Types.PAID_PRIVATE_INSTANCE) {\\n            return\\n                getAccess(_sender, _gatedAddress) ||\\n                hasActiveSubscription(_instance, _sender);\\n        } else if (\\n            isType[_instance] == Types.OPEN_PRIVATE_INSTANCE ||\\n            isType[_instance] == Types.OPEN_INSTANCE\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function hasMutateAccess(\\n        bytes32 _instance,\\n        address _sender\\n    ) public view returns (bool access) {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        Types _instanceType = isType[_instance];\\n        if (_instanceType == Types.PAID_INSTANCE) {\\n            access = instances[_instance].creator == _sender;\\n        } else if (_instanceType == Types.PAID_PRIVATE_INSTANCE) {\\n            access = getAccess(_sender, _gatedAddress);\\n        } else if (_instanceType == Types.OPEN_PRIVATE_INSTANCE) {\\n            access = getAccess(_sender, _gatedAddress);\\n        } else if (_instanceType == Types.OPEN_INSTANCE) {\\n            access = true;\\n        }\\n        uint8 _isType = uint8(_instanceType);\\n        if (_isType > 4 || _instanceType == Types.NULL) {\\n            access = false;\\n        }\\n    }\\n\\n    function insertNewMerbers(\\n        bytes32 _instance,\\n        address[] memory _members\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).mint(_members);\\n        }\\n        _insertMembers(_instance, _members);\\n    }\\n\\n    function removeMembers(\\n        bytes32 _instance,\\n        address[] memory _members\\n    ) external {\\n        address _gatedAddress = instances[_instance].gatedContract;\\n        address _owner = instances[_instance].creator;\\n        require(_owner == msg.sender, \\\"No access\\\");\\n        if (_gatedAddress != address(0)) {\\n            IGated(_gatedAddress).burn(_members);\\n        }\\n        _removeMembers(_instance, _members);\\n    }\\n}\\n\",\"keccak256\":\"0x20ff1137085067bb3649d967b1e8d3122fe75755222d5444328e600e56c21133\",\"license\":\"MIT\"},\"contracts/libraries/FNS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport {IFNSResolver, IFNS, IFNSRegistrar} from \\\"../interfaces/IENSResolver.sol\\\";\\n\\n/**\\n * @title FNS\\n * @dev Interface for the FNS system to support a decentralized Namespace of Database spaces\\n * IPNS and Push protocol for code and space discussions\\n * Tableland SQL in solidity for the databases and subspaces\\n */\\n\\nabstract contract FNS is IERC721Receiver {\\n\\n    IFNS public immutable REGISTRY;\\n    IFNSRegistrar public immutable REGISTRAR;\\n    IFNSResolver public immutable PUBLIC_RESOLVER;\\n\\n    bytes32 public DBNS_NODE;\\n    bytes32 private immutable BASE_NODE;   \\n    uint256 public DOMAIN_ID; \\n\\n    error NoInstanceAccess();\\n    error InvalidTokenAmount();\\n    error InvalidTokenSender();\\n\\n    constructor(\\n        address _registry,\\n        address _registrar,\\n        address _publicResolver,\\n        bytes32 _baseNode\\n    ) {\\n        REGISTRY = IFNS(_registry);\\n        REGISTRAR = IFNSRegistrar(_registrar);\\n        PUBLIC_RESOLVER = IFNSResolver(_publicResolver);\\n        BASE_NODE = _baseNode;\\n    }\\n\\n    /*\\n     * @dev Function to create a new subnode.\\n     * @param {bytes32} node - Parent node.\\n     * @param {string} subNode - Subnode name.\\n     * @return {bytes32} - New subnode.\\n     */\\n    function createSubNode(\\n        bytes32 parentNode,\\n        string memory subNode\\n    ) internal returns (bytes32 newSubNode) {\\n        bytes32 label = keccak256(bytes(subNode));\\n\\n        REGISTRY.setSubnodeRecord(\\n            // Gaming character subnode\\n            parentNode,\\n            // Character tokenID as sub.subdomain to the gaming character subdomain\\n            label,\\n            // Owner\\n            address(this),\\n            // Resolver\\n            address(PUBLIC_RESOLVER),\\n            // TTL\\n            0\\n        );\\n\\n        newSubNode = _makeNode(parentNode, label);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(REGISTRAR)) {\\n            revert InvalidTokenSender();\\n        }\\n\\n        if (DBNS_NODE == bytes32(0)) {\\n            DOMAIN_ID = tokenId;\\n            DBNS_NODE = _makeNode(BASE_NODE, bytes32(tokenId));\\n        }\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function _makeNode(\\n        bytes32 node,\\n        bytes32 labelhash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(node, labelhash));\\n    }\\n\\n\\n    // NEEDS TO GET REMOVED ONLY FOR TESTING\\n    function transferDomain(address recipient) public {\\n        PUBLIC_RESOLVER.setAddr(DBNS_NODE, recipient);\\n        REGISTRAR.reclaim(DOMAIN_ID, recipient);\\n        REGISTRAR.safeTransferFrom(\\n            address(this),\\n            recipient,\\n            DOMAIN_ID\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9841308a28845e3fef6f98e66782326848723dbbfa22291ea7c7d498aed1b085\",\"license\":\"MIT\"},\"contracts/libraries/Gated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IGated {\\n    function mint(address[] memory newMembers) external;\\n\\n    function burn(address[] memory _members) external;\\n}\\n\\nabstract contract Gated {\\n    address internal implementation;\\n\\n    // Constructor\\n    constructor(address _implementation) {\\n        implementation = _implementation;\\n    }\\n\\n    // Function to create a new OptimisticResolver contract and associate it with a schema\\n    function createGatedContract(\\n        address[] memory _members,\\n        bytes32 salt\\n    ) internal returns (address accessControlClone) {\\n        // Create new resolver contract\\n        accessControlClone = Clones.cloneDeterministic(implementation, salt);\\n\\n        (bool success, ) = accessControlClone.call(\\n            abi.encodeWithSignature(\\\"initialize(address[])\\\", _members)\\n        );\\n\\n        require(success, \\\"error deploying\\\");\\n    }\\n\\n    function getDeterministicAddress(\\n        bytes32 _salt\\n    ) public view returns (address) {\\n        return Clones.predictDeterministicAddress(implementation, _salt);\\n    }\\n\\n    function getAccess(\\n        address _sender,\\n        address _gatedContract\\n    ) public view returns (bool) {\\n        return IERC721(_gatedContract).balanceOf(_sender) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xffa6b8c31ddd3b39dd11511bb50af097a556488d965f61b56be5829a4e13ea06\",\"license\":\"MIT\"},\"contracts/libraries/Tableland.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {TablelandDeployments} from \\\"@tableland/evm/contracts/utils/TablelandDeployments.sol\\\";\\n\\nimport {ITablelandTables} from \\\"@tableland/evm/contracts/interfaces/ITablelandTables.sol\\\";\\n\\nimport {SQLHelpers} from \\\"@tableland/evm/contracts/utils/SQLHelpers.sol\\\";\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract Tableland {\\n    ITablelandTables public immutable TABLELAND;\\n\\n    string[] internal createTableStatements;\\n\\n    string[] public tables;\\n\\n    uint256[] public tableIDs;\\n\\n    string internal constant DBSPACES_TABLE_PREFIX = \\\"db_spaces\\\";\\n\\n    string internal constant DBSPACES_SCHEMA =\\n        \\\"DBSpaceID text, DBSubSpaceOfID text, DBSubSpaceName text\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_TABLE_PREFIX =\\n        \\\"db_spaces_instances\\\";\\n\\n    string internal constant DBSPACES_INSTANCES_SCHEMA =\\n        \\\"InstanceID text, instanceOfSpace text, instanceType text, metadataCID text, chatID text, IPNS text, IPNSEncryptedKey text, gatedContract text, price text, lock text, creator text\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_TABLE_PREFIX =\\n        \\\"instances_codes\\\";\\n\\n    string internal constant DB_INSTANCES_CODES_SCHEMA =\\n        \\\"InstanceID text, codeID text, name text, about text, chatID text, IPNS text, IPNSEncryptedKey text, creator text\\\";\\n\\n    string internal constant SUBSCRIPTIONS_TABLE_PREFIX = \\\"subscriptions\\\";\\n\\n    string internal constant SUBSCRIPTIONS_SCHEMA =\\n        \\\"InstanceID text, subscriber text, tokenID text, endsAt text\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_TABLE_PREFIX = \\\"members\\\";\\n\\n    string internal constant DB_INSTANCES_MEMBERS_SCHEMA =\\n        \\\"InstanceID text, member text\\\";\\n\\n    constructor() {\\n        TABLELAND = TablelandDeployments.get();\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_SCHEMA,\\n                DBSPACES_TABLE_PREFIX\\n            )\\n        );\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DBSPACES_INSTANCES_SCHEMA,\\n                DBSPACES_INSTANCES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_CODES_SCHEMA,\\n                DB_INSTANCES_CODES_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                SUBSCRIPTIONS_SCHEMA,\\n                SUBSCRIPTIONS_TABLE_PREFIX\\n            )\\n        );\\n\\n        createTableStatements.push(\\n            SQLHelpers.toCreateFromSchema(\\n                DB_INSTANCES_MEMBERS_SCHEMA,\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX\\n            )\\n        );\\n\\n        tableIDs = TABLELAND.create(address(this), createTableStatements);\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(DBSPACES_TABLE_PREFIX, tableIDs[0])\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1]\\n            )\\n        );\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2]\\n            )\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(SUBSCRIPTIONS_TABLE_PREFIX, tableIDs[3])\\n        );\\n\\n        tables.push(\\n            SQLHelpers.toNameFromId(\\n                DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                tableIDs[4]\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new space.\\n     * @param {bytes32} DBSpaceID - DBSpace ID.\\n     * @param {bytes32} DBSubSpaceOfID - DBSubSpaceOf ID.\\n     * @param {string} DBSpaceName - Name of the space.\\n     * @param {string} DBSubSpaceOfName - Name of the sub space.\\n     */\\n\\n    function spaceInsertion(\\n        bytes32 DBSpaceID,\\n        bytes32 DBSubSpaceOfID,\\n        string memory DBSubSpaceName\\n    ) internal {\\n        mutate(\\n            tableIDs[0],\\n            SQLHelpers.toInsert(\\n                DBSPACES_TABLE_PREFIX,\\n                tableIDs[0],\\n                \\\"DBSpaceID, DBSubSpaceOfID, DBSubSpaceName\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(DBSpaceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(DBSubSpaceOfID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(DBSubSpaceName)\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {bytes32} instanceOfSpace - DBSpace ID.\\n     * @param {string} name - Name of the instance.\\n     * @param {string} about - About of the instance.\\n     * @param {string} img - Image of the instance.\\n     * @param {string} chatID - Chat ID of the instance.\\n     * @param {string} IPNS - IPNS of the instance.\\n     * @param {string} IPNSEncryptedKey - Creator of the instance.\\n     */\\n\\n    function instanceInsertion(\\n        address _lock,\\n        bytes32 _instanceID,\\n        uint8 _lockType,\\n        bytes32 _instanceOfSpace,\\n        address _gatedContract,\\n        uint256 price,\\n        string memory metadataCID,\\n        string memory chatID,\\n        string memory IPNS,\\n        string memory IPNSEncryptedKey\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toInsert(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                \\\"InstanceID, instanceOfSpace, instanceType, metadataCID, chatID, IPNS, IPNSEncryptedKey, gatedContract, price, lock, creator\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_instanceOfSpace)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(_lockType)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(metadataCID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(chatID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNSEncryptedKey),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(_gatedContract)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(price)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(_lock)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(msg.sender))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new instance code.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {string} name - Name of the instance code.\\n     * @param {string} about - About of the instance code.\\n     * @param {string} chatID - Chat ID of the instance code.\\n     * @param {string} codeIPNS - IPNS of the instance code.\\n     * @param {string} IPNSEncryptedKey - Creator of the instance code.\\n     */\\n\\n    function InsertInstanceCode(\\n        bytes32 _instanceID,\\n        bytes32 _codeID,\\n        string memory name,\\n        string memory about,\\n        string memory chatID,\\n        string memory codeIPNS,\\n        string memory IPNSEncryptedKey\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toInsert(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                \\\"InstanceID, codeID, name, about, chatID, IPNS, IPNSEncryptedKey, creator\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(_instanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(bytes32ToString(_codeID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(name),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(about),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(chatID),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(codeIPNS),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(IPNSEncryptedKey),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(msg.sender))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceMetadata(\\n        bytes32 InstanceID,\\n        string memory metadataCID\\n    ) internal {\\n        mutate(\\n            tableIDs[1],\\n            SQLHelpers.toUpdate(\\n                DBSPACES_INSTANCES_TABLE_PREFIX,\\n                tableIDs[1],\\n                string.concat(\\\"metadataCID = \\\", SQLHelpers.quote(metadataCID)),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateInstanceCode(\\n        bytes32 codeID,\\n        string memory name,\\n        string memory about\\n    ) internal {\\n        mutate(\\n            tableIDs[2],\\n            SQLHelpers.toUpdate(\\n                DB_INSTANCES_CODES_TABLE_PREFIX,\\n                tableIDs[2],\\n                string.concat(\\n                    \\\"name = \\\",\\n                    SQLHelpers.quote(name),\\n                    \\\", about = \\\",\\n                    SQLHelpers.quote(about)\\n                ),\\n                string.concat(\\n                    \\\"codeID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(codeID))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert a new subscription.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address} subscriber - Subscriber address.\\n     * @param {uint256} tokenID - Subscription token ID.\\n     * @param {uint256} endsAt - Subscription end date.\\n     */\\n    function insertSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 tokenID,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toInsert(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                \\\"InstanceID, subscriber, tokenID, endsAt\\\",\\n                string.concat(\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(tokenID)),\\n                    \\\",\\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                )\\n            )\\n        );\\n    }\\n\\n    function updateSubscription(\\n        bytes32 InstanceID,\\n        address subscriber,\\n        uint256 endsAt\\n    ) internal {\\n        mutate(\\n            tableIDs[3],\\n            SQLHelpers.toUpdate(\\n                SUBSCRIPTIONS_TABLE_PREFIX,\\n                tableIDs[3],\\n                string.concat(\\n                    \\\"endsAt = \\\",\\n                    SQLHelpers.quote(Strings.toString(endsAt))\\n                ),\\n                string.concat(\\n                    \\\"InstanceID = \\\",\\n                    SQLHelpers.quote(bytes32ToString(InstanceID)),\\n                    \\\" AND subscriber = \\\",\\n                    SQLHelpers.quote(Strings.toHexString(subscriber))\\n                )\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @dev Internal function to insert the members.\\n     * @param {bytes32} InstanceID - Instance ID.\\n     * @param {address[]} members - Members address array.\\n     */\\n    function _insertMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toInsert(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    \\\"InstanceID, member\\\",\\n                    string.concat(\\n                        SQLHelpers.quote(id),\\n                        \\\",\\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _removeMembers(\\n        bytes32 InstanceID,\\n        address[] memory members\\n    ) internal {\\n        string memory id = bytes32ToString(InstanceID);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            mutate(\\n                tableIDs[4],\\n                SQLHelpers.toDelete(\\n                    DB_INSTANCES_MEMBERS_TABLE_PREFIX,\\n                    tableIDs[4],\\n                    string.concat(\\n                        \\\"InstanceID = \\\",\\n                        SQLHelpers.quote(id),\\n                        \\\" AND member = \\\",\\n                        SQLHelpers.quote(Strings.toHexString(members[i]))\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @dev Internal function to convert bytes32 to string.\\n     * @param {bytes32} data - Data to convert.\\n     * @return {string} - Converted data.\\n     */\\n\\n    function bytes32ToString(\\n        bytes32 data\\n    ) internal pure returns (string memory) {\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(data.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < data.length; i++) {\\n            converted[i * 2] = _base[uint8(data[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(data[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n\\n    /*\\n     * @dev Internal function to execute a mutation on a table.\\n     * @param {uint256} tableId - Table ID.\\n     * @param {string} statement - Mutation statement.\\n     */\\n    function mutate(uint256 tableId, string memory statement) internal {\\n        TABLELAND.mutate(address(this), tableId, statement);\\n    }\\n}\\n\",\"keccak256\":\"0x673927a6dc665d9259a3e73c3d89d2183777dbecab99e9a99894838f934b354a\",\"license\":\"MIT\"},\"contracts/libraries/Unlock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IUnlockV12} from \\\"@unlock-protocol/contracts/dist/Unlock/IUnlockV12.sol\\\";\\n\\nimport {IPublicLockV12} from \\\"@unlock-protocol/contracts/dist/PublicLock/IPublicLockV12.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nabstract contract Unlock is Ownable {\\n    error SubscribeToGainAccess();\\n    error NoInstanceCreator();\\n\\n    uint256 internal constant MONTH = 30 days;\\n    uint256 internal constant MAX = type(uint256).max;\\n\\n    struct InstanceStruct {\\n        address creator;\\n        address lockAddress;\\n    }\\n\\n    mapping(bytes32 => mapping(address => uint256))\\n        public instanceSubscriptions;\\n\\n    mapping(bytes32 => InstanceStruct) public instanceLock;\\n\\n    IUnlockV12 UNLOCK;\\n\\n    constructor(address _unlockContract) {\\n        UNLOCK = IUnlockV12(_unlockContract);\\n    }\\n\\n    function createLock(\\n        uint256 _keyPrice,\\n        string memory _lockName,\\n        bytes32 _instanceID\\n    ) internal returns (address newLock) {\\n        newLock = UNLOCK.createLock(\\n            // Expiration duration of subscription\\n            MONTH,\\n            address(0),\\n            _keyPrice,\\n            MAX,\\n            _lockName,\\n            bytes12(0)\\n        );\\n\\n        IPublicLockV12(newLock).setReferrerFee(\\n            address(0),\\n            // 0.5% DBNS protocol fee\\n            50\\n        );\\n        IPublicLockV12(newLock).setEventHooks(\\n            // onKeyPurchase hook\\n            address(this),\\n            address(0),\\n            address(0),\\n            // tokenURI hook\\n            // address(this),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0)\\n        );\\n\\n        instanceLock[_instanceID] = InstanceStruct({\\n            creator: msg.sender,\\n            lockAddress: newLock\\n        });\\n    }\\n\\n    /**\\n     * @dev PurchaseSubscription function for an agentID\\n     * @param _instanceID to subscribe\\n     */\\n    function purchaseSubscription(\\n        bytes32 _instanceID\\n    ) internal returns (uint256 _tokenID) {\\n        address[] memory _referrers = new address[](1);\\n        address[] memory _recipients = new address[](1);\\n        address[] memory _keyManagers = new address[](1);\\n        uint256[] memory _values = new uint256[](1);\\n        bytes[] memory _data = new bytes[](1);\\n        uint256[] memory tokenID = new uint256[](1);\\n\\n        address lockAddress = instanceLock[_instanceID].lockAddress;\\n        uint _priceToPay = IPublicLockV12(lockAddress).keyPrice();\\n\\n        _referrers[0] = address(this);\\n\\n        _values[0] = _priceToPay;\\n\\n        _recipients[0] = msg.sender;\\n\\n        tokenID = IPublicLockV12(lockAddress).purchase{value: msg.value}(\\n            _values,\\n            _recipients,\\n            _referrers,\\n            _keyManagers,\\n            _data\\n        );\\n\\n        _tokenID = tokenID[0];\\n\\n        instanceSubscriptions[_instanceID][msg.sender] = _tokenID;\\n    }\\n\\n    function extendSubscription(\\n        bytes32 _instanceID\\n    ) internal returns (uint256 _tokenId) {\\n        _tokenId = instanceSubscriptions[_instanceID][msg.sender];\\n        bytes memory _data;\\n\\n        address _referrer = address(this);\\n\\n        address lockAddress = instanceLock[_instanceID].lockAddress;\\n\\n        uint _priceToPay = IPublicLockV12(lockAddress).keyPrice();\\n\\n        IPublicLockV12(lockAddress).extend{value: msg.value}(\\n            _priceToPay,\\n            _tokenId,\\n            _referrer,\\n            _data\\n        );\\n    }\\n\\n    function hasActiveSubscription(\\n        bytes32 _instanceID,\\n        address _subscriber\\n    ) public view returns (bool) {\\n        return\\n            IPublicLockV12(instanceLock[_instanceID].lockAddress).balanceOf(\\n                _subscriber\\n            ) > 0;\\n    }\\n\\n    function getRemainingSubscriptionTime(\\n        bytes32 _instanceID,\\n        address _subscriber\\n    ) public view returns (uint256) {\\n        uint256 _tokenID = instanceSubscriptions[_instanceID][_subscriber];\\n\\n        return\\n            IPublicLockV12(instanceLock[_instanceID].lockAddress)\\n                .keyExpirationTimestampFor(_tokenID);\\n    }\\n\\n    function getTime() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev withdraw function for an agentID\\n     * @notice We give back to the agent creator 70% of the total\\n     * income from that agent the platform keeps 30% of that amount\\n     * @param _instanceID to withdraw money from the lock contract\\n     */\\n    function withdraw(bytes32 _instanceID) external {\\n        InstanceStruct memory _instance = instanceLock[_instanceID];\\n\\n        if (msg.sender != _instance.creator) {\\n            revert NoInstanceCreator();\\n        }\\n\\n        IPublicLockV12 lockContract = IPublicLockV12(_instance.lockAddress);\\n\\n        uint256 balance = address(_instance.lockAddress).balance;\\n\\n        lockContract.withdraw(address(0), payable(address(this)), balance);\\n\\n        address payable withdrawer = payable(_instance.creator);\\n\\n        Address.sendValue(withdrawer, balance);\\n    }\\n\\n    // Function to receive Ethers\\n    receive() external payable {}\\n\\n    // Function to withdraw the platform income\\n    function withdraw() external onlyOwner {\\n        address payable withdrawer = payable(msg.sender);\\n\\n        Address.sendValue(withdrawer, address(this).balance);\\n    }\\n\\n    // Unlock Protocol custom hooks\\n\\n    function onKeyPurchase(\\n        uint /* tokenId */,\\n        address from,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */,\\n        uint /* minKeyPrice */,\\n        uint /* pricePaid */\\n    ) external view {\\n        require(from == address(this));\\n    }\\n\\n    function keyPurchasePrice(\\n        address /* from */,\\n        address /* recipient */,\\n        address /* referrer */,\\n        bytes calldata /* data */\\n    ) external view returns (uint minKeyPrice) {\\n        return IPublicLockV12(msg.sender).keyPrice();\\n    }\\n}\\n\",\"keccak256\":\"0x799ba82c575f415dafdae982d18a1f2a50b81d5acaf940542358e6c455f0a6e4\",\"license\":\"MIT\"},\"erc721a-upgradeable/contracts/IERC721AUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    /**\\n     * `_sequentialUpTo()` must be greater than `_startTokenId()`.\\n     */\\n    error SequentialUpToTooSmall();\\n\\n    /**\\n     * The `tokenId` of a sequential mint exceeds `_sequentialUpTo()`.\\n     */\\n    error SequentialMintExceedsLimit();\\n\\n    /**\\n     * Spot minting requires a `tokenId` greater than `_sequentialUpTo()`.\\n     */\\n    error SpotMintTokenIdTooSmall();\\n\\n    /**\\n     * Cannot mint over a token that already exists.\\n     */\\n    error TokenAlreadyExists();\\n\\n    /**\\n     * The feature is not compatible with spot mints.\\n     */\\n    error NotCompatibleWithSpotMints();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xaeabed185f4b889c097e61ef486a003e64cdc2d048b569ebcd315ff52a63367b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101208060405234620007e95760c08162004c228038038091620000248285620008ea565b833981010312620007e9576200003a816200090e565b62000048602083016200090e565b62000056604084016200090e565b6060840151916200007860a062000070608088016200090e565b96016200090e565b6001600160a01b0394851660805290841660a05290831660c05260e091909152600280546001600160a01b031916918316919091179055620000b962000fc1565b16906101009182526200013e62000138604051620000d781620008b2565b603881527f44425370616365494420746578742c20444253756253706163654f664944207460208201527f6578742c20444253756253706163654e616d65207465787400000000000000006040820152620001316200093f565b9062000f44565b620009bc565b60405160e081016001600160401b038111828210176200072c576200024c91620001389160405260b281527f496e7374616e6365494420746578742c20696e7374616e63654f66537061636560208201527f20746578742c20696e7374616e63655479706520746578742c206d657461646160408201527f746143494420746578742c2063686174494420746578742c2049504e5320746560608201527f78742c2049504e53456e637279707465644b657920746578742c20676174656460808201527f436f6e747261637420746578742c20707269636520746578742c206c6f636b2060a0820152711d195e1d0b0818dc99585d1bdc881d195e1d60721b60c08201526200013162000c73565b60405160a081016001600160401b038111828210176200072c576200030c916200013891604052607081527f496e7374616e6365494420746578742c20636f6465494420746578742c206e6160208201527f6d6520746578742c2061626f757420746578742c20636861744944207465787460408201527f2c2049504e5320746578742c2049504e53456e637279707465644b657920746560608201526f1e1d0b0818dc99585d1bdc881d195e1d60821b60808201526200013162000cae565b6200037c620001386040516200032281620008b2565b603b81527f496e7374616e6365494420746578742c2073756273637269626572207465787460208201527f2c20746f6b656e494420746578742c20656e647341742074657874000000000060408201526200013162000cdb565b620003c6620001386040516200039281620008ce565b601c81527f496e7374616e6365494420746578742c206d656d62657220746578740000000060208201526200013162000d06565b60018060a01b03825116604051906361a23d0f60e01b8252816044810130600483015260406024830152600354809152606482019060648160051b8401019160036000526020600020916000915b818310620007fa57505050509181600081819503925af1908115620007ee5760009162000742575b508051906001600160401b0382116200072c576801000000000000000082116200072c57602090600554836005558084106200070b575b50016005600052602060002060005b838110620006f6578585620004966200093f565b60055415620006e05760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db054620004dd91620004d7919062000d58565b62000b2e565b620004e762000c73565b60055460011015620006e05760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1546200052b91620004d7919062000d58565b6200053562000cae565b60055460021015620006e05760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db2546200057991620004d7919062000d58565b6200058362000cdb565b60055460031015620006e05760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db354620005c791620004d7919062000d58565b620005d162000d06565b60055460041015620006e05760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db4546200061591620004d7919062000d58565b60068054336001600160a01b0319821681179092556040519291906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600980546001600160a01b0319166001600160a01b0392909216919091179055613aaf91826200117383396080518281816123c70152612a97015260a0518281816105f9015281816111490152612172015260c0518281816101e8015281816110e50152612aec015260e051826121c40152518181816105b401526136210152f35b634e487b7160e01b600052603260045260246000fd5b60019060208451940193818401550162000482565b6200072590600560005284846000209182019101620009a3565b3862000473565b634e487b7160e01b600052604160045260246000fd5b90503d806000833e620007568183620008ea565b810190602081830312620007e9578051906001600160401b038211620007e957019080601f83011215620007e9578151916001600160401b0383116200072c578260051b9060405193620007ae6020840186620008ea565b8452602080850192820101928311620007e957602001905b828210620007d857505050386200043c565b8151815260209182019101620007c6565b600080fd5b6040513d6000823e3d90fd5b8785036063190181528354939550919390926000916200081a8262000966565b80825291600181169081156200088e57506001146200084d575b5050602060018092960192019301909186949362000414565b909150856000526020600020916000925b8184106200087757505001602090810190600162000834565b60018160209254838787010152019301926200085e565b60ff191660208381019190915292151560051b909101820192506001905062000834565b606081019081106001600160401b038211176200072c57604052565b604081019081106001600160401b038211176200072c57604052565b601f909101601f19168101906001600160401b038211908210176200072c57604052565b51906001600160a01b0382168203620007e957565b6001600160401b0381116200072c57601f01601f191660200190565b604051906200094e82620008ce565b600982526864625f73706163657360b81b6020830152565b90600182811c9216801562000998575b60208310146200098257565b634e487b7160e01b600052602260045260246000fd5b91607f169162000976565b818110620009af575050565b60008155600101620009a3565b600354680100000000000000008110156200072c5760019182820180600355821015620006e0576003600090815281517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90930193602093929091906001600160401b03841162000b1a5762000a33865462000966565b601f811162000adc575b508491601f851160011462000a7957939450849291908362000a6d575b50501b916000199060031b1c1916179055565b01519250388062000a5a565b86815285812093958591601f198316915b8883831062000ac1575050501062000aa7575b505050811b019055565b015160001960f88460031b161c1916905538808062000a9d565b85870151885590960195948501948793509081019062000a8a565b62000b0890878452868420601f870160051c81019188881062000b0f575b601f0160051c0190620009a3565b3862000a3d565b909150819062000afa565b634e487b7160e01b82526041600452602482fd5b60048054906801000000000000000082101562000c5e57600180830180835583101562000c49576000828152602080822086519501959094936001600160401b03851162000c36575062000b83865462000966565b601f811162000c04575b508491601f851160011462000bbc57939450849291908362000a6d5750501b916000199060031b1c1916179055565b86815285812093958591601f198316915b8883831062000be9575050501062000aa757505050811b019055565b85870151885590960195948501948793509081019062000bcd565b62000c2f90878452868420601f870160051c81019188881062000b0f57601f0160051c0190620009a3565b3862000b8d565b634e487b7160e01b835260419052602482fd5b603282634e487b7160e01b6000525260246000fd5b604190634e487b7160e01b6000525260246000fd5b6040519062000c8282620008ce565b601382527f64625f7370616365735f696e7374616e636573000000000000000000000000006020830152565b6040519062000cbd82620008ce565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b6040519062000cea82620008ce565b600d82526c737562736372697074696f6e7360981b6020830152565b6040519062000d1582620008ce565b60078252666d656d6265727360c81b6020830152565b9081519160005b83811062000d44575050016000815290565b806020809284010151818501520162000d32565b62000dc19062000db262000d9493600162000d7e62000d774662000dc4565b9262000dc4565b9162000da7604051978896602088019062000d2b565b9183605f60f81b93848152019062000d2b565b908152019062000d2b565b03601f198101835282620008ea565b90565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101562000f35575b506d04ee2d6d415b85acef81000000008083101562000f25575b50662386f26fc100008083101562000f15575b506305f5e1008083101562000f05575b506127108083101562000ef5575b50606482101562000ee4575b600a8092101562000ed9575b6001908160218186019562000e668762000923565b9662000e766040519889620008ea565b80885262000e87601f199162000923565b01366020890137860101905b62000ea0575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a83530491821562000ed35791908262000e93565b62000e99565b916001019162000e51565b919060646002910491019162000e45565b6004919392049101913862000e39565b6008919392049101913862000e2b565b6010919392049101913862000e1b565b6020919392049101913862000e08565b60409350810491503862000dee565b600162000f8c9262000faa62000dc1938362000f9b62000f644662000dc4565b82604051998a976c021a922a0aa22902a20a126229609d1b60208a0152602d89019062000d2b565b605f60f81b8152019062000d2b565b600560fb1b8152019062000d2b565b602960f81b815203601e19810184520182620008ea565b4660010362000fe25773012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03620010035773fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b1036200102557739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba036200104757731a22854c5b1642760a827f20137a67930ae108d290565b466089036200106857735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036200108a577359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703620010ad5773c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403620010cf5773c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eee03620010f25773223a74b8323914afdc3ff1e5005564dc17231d6e90565b4662013881036200111557734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f03620011385773030bcf3d50cad04c2e57391b12740982a930862190565b46617a69036200115a5773e7f1725e7734ce288f8367e1bb143e90bb3f051290565b60405163264e42cf60e01b8152466004820152602490fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816306433b1b146123b3575080630c9ddf6d1461223657806311ad2f3414612203578063150b7a0214612128578063221c1fd1146120765780632711447f14612029578063284e82e814611ec75780633ac275221461172a5780633ccfd60b146117075780633e203835146116d85780633ec29e721461158657806347d121c51461155f578063557ed1ba146115445780635e895f29146114e257806367e0970914611449578063715018a6146113eb57806371671bf2146112bf5780637a9b777414611250578063820cc5571461123257806382211846146110be57806383a8b3d014610cb357806384ec965314610c865780638897538314610c5f5780638a8fd25014610c0d5780638da5cb5b14610be45780638e19899e14610b0d5780639ad66a23146107a6578063a58dcc9514610726578063a5df63d6146106f5578063bfc51b7e14610666578063c6a36c4b14610628578063cb609077146105e3578063d68d087c1461059e578063db7baba914610581578063dd321bfc1461053a578063e0cf1e4c1461032d578063e2b1e4ed146102e0578063f2fde38b1461021a5763ffeb4a300361000f57346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b503461021757602036600319011261021757610234612423565b61023c612728565b6001600160a01b0390811690811561028c57600654826001600160601b0360a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5034610217576020366003190112610217576004358152600c60205260ff60408220541660405190600781101561031957602092508152f35b634e487b7160e01b83526021600452602483fd5b50346102175761033c36612577565b8183929352602090600a8252604083209360018060a01b039461036a86600281845416930154163314612a0f565b806104ce575b5061037a906134fb565b91835b82518110156104ca576104c5906104c0660102ba422a922960cd1b88610463886104b9896103de8a6103ad61263e565b969054978b6103ea6103e56103c06133c1565b936103c961263e565b989054946103d860039d612fb1565b9a6133f1565b5116613020565b612fb1565b9461045a6040519687878101996c024b739ba30b731b2a4a2101e9609d1b8b526d01020a7221036b2b6b132b9101e960951b815161043081602d948d86880191016126e0565b83019182015282519061044b82603b958c87850191016126e0565b0103601b8101895201876124e1565b881b1c90612dcc565b916040519889936b02222a622aa2290232927a6960a51b8486015261049281518092602c9687890191016126e0565b84019283015251906104aa82603395868401906126e0565b010360138101875201856124e1565b1b1c61361f565b61339c565b61037d565b8480f35b803b156105365784604051809263362eb0ab60e11b82528660048301528183816104fb602482018a612a47565b03925af1801561052b57908591610513575b50610370565b61051c90612498565b61052757833861050d565b8380fd5b6040513d87823e3d90fd5b8480fd5b5034610217576040366003190112610217576040610556612439565b9160043581526007602052209060018060a01b03166000526020526020604060002054604051908152f35b503461021757806003193601126102175760209054604051908152f35b50346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102175760203660031901126102175760408091600435815260086020522060018060a01b036001818354169201541682519182526020820152f35b50346102175761067536612465565b909291808352600c60205260ff60408420541660078110156106e1576106de93946106a560056106d893146127d2565b6106b96106b336868461279b565b84612a84565b808752600c60205260408720805460ff1916600517905593369161279b565b91612c0f565b80f35b634e487b7160e01b84526021600452602484fd5b503461021757604036600319011261021757602061071c610714612439565b60043561386b565b6040519015158152f35b503461021757602036600319011261021757602060018060a01b03605560438260025416604051903060388301526f5af43d82803e903d91602b57fd5bf3ff60248301526014820152733d602d80600a3d3981f3363d3d373d3d3d363d73815260043560588201526037600c820120607882015201209060405191168152f35b506003199060203683018113610b0957600435926040516107c6816124ab565b600190818152833681830137604051916107df836124ab565b808352843681850137604051936107f5856124ab565b8185528536818701376040519461080b866124ab565b828652868601938736863760405194610823866124ab565b848652888a5b818110610af9575060405161083d816124ab565b86815281369101378a8a52600889526040808b2086015490516310e5697360e01b81526001600160a01b0390911697908a816004818c5afa908115610aee578c91610abc575b50918b98969391999795949230610899846133e4565b526108a3896133e4565b52336108ae8b6133e4565b52604051633381899760e01b815260a06004820152975160a4890181905297998a9860c48a0192908b8e5b828210610a8f575050505091610900826109209594888c61091096030160248d0152612a47565b90868a83030160448b0152612a47565b9084888303016064890152612a47565b9185830301608486015282518083528883019289808360051b83010195019388915b8b848410610a5a5750505050505050828091039134905af18015610a4f5783906109b9575b61097191506133e4565b519083835260078152604083209033600052528060406000205562278d004201908142116109a5576106de92933390613257565b634e487b7160e01b83526011600452602483fd5b503d8084833e6109c981836124e1565b8101908281830312610527578051906001600160401b03821161053657019080601f830112156105275781516109fe81612502565b92610a0c60405194856124e1565b818452848085019260051b820101928311610a4b5784809101915b838310610a3b575050505061097190610967565b8251815291810191859101610a27565b8580fd5b6040513d85823e3d90fd5b919497995092958792959850610a7b8291601f198682030187528a51612703565b9801930193018a9795929389979592610942565b9194889b9d5083839295979994989a9b9d505181520195019101908b99979694928e9b999694928e6108d9565b90508a81813d8311610ae7575b610ad381836124e1565b81010312610ae2575138610883565b600080fd5b503d610ac9565b6040513d8e823e3d90fd5b606082828a010152018990610829565b5080fd5b503461021757602036600319011261021757600435815260086020526040812060405190610b3a826124ab565b80546001600160a01b0390811680845260019092015481166020840190815290913303610bd257819051169083823192803b15610b0957818091606460405180948193636ce5768960e11b83528160048401523060248401528960448401525af18015610bc757610bb3575b50506106de92511661399e565b610bbc90612498565b610527578338610ba6565b6040513d84823e3d90fd5b60405163c00f906f60e01b8152600490fd5b50346102175780600319360112610217576006546040516001600160a01b039091168152602090f35b503461021757602036600319011261021757600435600554811015610b095760209060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154604051908152f35b503461021757604036600319011261021757602061071c610c7e612439565b60043561292b565b503461021757604036600319011261021757602061071c610ca5612423565b610cad612439565b90612b9e565b50346102175760c0366003190112610217576004356024356001600160401b0381116110ba57610ce79036906004016123f6565b6044929192356001600160401b03811161053657610d099036906004016123f6565b9190926064356001600160401b0381116110b657610d2b9036906004016123f6565b91906084356001600160401b0381116110b257610d4c9036906004016123f6565b969060a4356001600160401b0381116110ae57610d6d9036906004016123f6565b939092610d7a338761292b565b1561109c578b9a8b988b6040518060209c8d8201938c8552808a60408501378201906040820152038c81018252604001610db490826124e1565b519020809d528d600c8b52604090205460ff16600781101561108857611076578c8e52600b8a526040808f208054336001600160a01b0319909116179055600c8b528e20805460ff19166006179055610e0f9136919061279b565b983690610e1b9261279b565b953690610e279261279b565b973690610e339261279b565b913690610e3f9261279b565b96610e486125ba565b97905496610e54613138565b93610e5d6125ba565b9b905496610e6a906134fb565b610e7390612fb1565b94610e7d906134fb565b610e8690612fb1565b92610e9090612fb1565b97610e9a90612fb1565b93610ea490612fb1565b91610eae90612fb1565b90610eb890612fb1565b91610ec233613020565b610ecb90612fb1565b948a6040519a888c9951908184808d01920191610ee7926126e0565b890196600b60fa1b978884820152815191828560218401920191610f0a926126e0565b01908760218301528051809360228401920191610f26926126e0565b01856022820152815191828d60238401920191610f42926126e0565b01846023820152815191828c60248401920191610f5e926126e0565b01836024820152815191828b60258401920191610f7a926126e0565b01826025820152815191828a60268401920191610f96926126e0565b01906026820152815191828860278401920191610fb2926126e0565b0103600781018452602701610fc790846124e1565b6040519160808301978389106001600160401b038a1117611060577f496e7374616e636549442c20636f646549442c206e616d652c2061626f75742c611056966106de9a604052604886528501527f206368617449442c2049504e532c2049504e53456e637279707465644b65792c6040850152671031b932b0ba37b960c11b606085015260031b1c90612d2c565b9160031b1c61361f565b634e487b7160e01b600052604160045260246000fd5b604051631144626f60e01b8152600490fd5b634e487b7160e01b8f52602160045260248ffd5b6040516346627df160e01b8152600490fd5b8a80fd5b8880fd5b8680fd5b8280fd5b503461021757602036600319011261021757806110d9612423565b81546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929091833b156105365782916044869283604051958694859362d5fa2b60e81b8552600485015216978860248401525af190811561121357849161121e575b50507f00000000000000000000000000000000000000000000000000000000000000001690600154823b156111f65760405190630a3b53db60e21b82526004820152816024820152838160448183875af19081156112135784916111fb575b5050600154823b156111f65760648492836040519586948593632142170760e11b8552306004860152602485015260448401525af18015610bc7576111e65750f35b6111ef90612498565b6102175780f35b505050fd5b61120490612498565b61120f5782386111a4565b5050fd5b6040513d86823e3d90fd5b61122790612498565b61120f578238611145565b50346102175780600319360112610217576020600154604051908152f35b5034610217576020366003190112610217576004356001600160401b038111610b09576112846106de9136906004016123f6565b6106d861129d855461129736858761279b565b90612a84565b92838652600c60205260408620600560ff19825416179055855492369161279b565b503461021757602080600319360112610b09576004356004548110156110ba5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190604051918381549460019086821c938288169788156113e1575b86861089146113cd57868899878a98999a5291826000146113a957505060011461136d575b505050611355925003836124e1565b611369604051928284938452830190612703565b0390f35b869350819291528282205b8583106113915750506113559350820101388080611346565b80548389018501528794508693909201918101611378565b93509450505061135594915060ff191682840152151560051b820101388080611346565b634e487b7160e01b83526022600452602483fd5b94607f1694611321565b5034610217578060031936011261021757611404612728565b600680546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102175761145836612577565b818352600a602052826040812061148060018060a01b03600281845416930154163314612a0f565b80611491575b50506106de91613405565b803b15610b0957816040518092632f41d6e160e21b8252602060048301528183816114bf602482018a612a47565b03925af18015610bc75715611486576114d790612498565b6110ba578238611486565b50346102175760e0366003190112610217576114fc612439565b61150461244f565b506001600160a01b0360643581811603610ae2576084356001600160401b038111610527576115379036906004016123f6565b5050309116036102175780f35b50346102175780600319360112610217576020604051428152f35b503461021757604036600319011261021757602061071c61157e612439565b60043561283e565b50346102175761159536612465565b828452600a6020908152604085206002015490939291906001600160a01b03163303611693576116796115d26106de95949361105693369161279b565b926115db612607565b95905494611607611689602d6115ef612ff1565b9461164f6103e56115fe612607565b96905497612fb1565b9861164a602e604051809c6d036b2ba30b230ba30a1a4a2101e960951b8883015261163a815180928a86860191016126e0565b810103600e81018d52018b6124e1565b6134fb565b60405198826c024b739ba30b731b2a4a2101e9609d1b8b94850152825192839186860191016126e0565b810103600d8101885201866124e1565b60031b1c90613163565b60405162461bcd60e51b815260048101859052601860248201527f44424e533a204e6f20696e7374616e63652061636365737300000000000000006044820152606490fd5b50346102175760403660031901126102175760206116ff6116f7612439565b6004356138fd565b604051908152f35b5034610217578060031936011261021757611720612728565b6106de473361399e565b50346102175760e0366003190112610217576001600160401b036044351161021757366023604435011215610217576001600160401b036044356004013511610217573660246044356004013560051b604435010111610217576064356001600160401b038111610b09576117a39036906004016123f6565b6084356001600160401b038111610527576117c29036906004016123f6565b9260a4356001600160401b038111610a4b576117e29036906004016123f6565b94909160c4356001600160401b038111611ec3576118049036906004016123f6565b94906004358952600c60205260ff60408a2054166007811015611eaf57600561182d91146127d2565b604051602081019060043582528987604083013761185e6040828d8d820190838201520360208101845201826124e1565b51902094858a52600c60205260ff60408b2054166007811015611e9b5761107657899260443560040135611d2b575b6040518060608101106001600160401b03606083011117611060578060608d920160405260018060a01b0386168152602435602082015260026040808301933385528b8152600a60205220602060018060a01b03845116936001600160601b0360a01b948584541617835501516001820155019160018060a01b03905116908254161790558a60018060a01b03851615156024351515600014611cb0575050868b52600c60205260408b20805460ff191660031790556119578761194f61281e565b6024356136a2565b945b878c52600c60205260ff60408d2054169960078b1015611c9c57369061197e9261279b565b95369061198a9261279b565b9836906119969261279b565b9536906119a29261279b565b966119ab612607565b979054966119b7612ff1565b946119c0612607565b9b9054986119cd906134fb565b6119d690612fb1565b956119e26004356134fb565b6119eb90612fb1565b946119f590612e49565b6119fe90612fb1565b98611a0890612fb1565b95611a1290612fb1565b93611a1c90612fb1565b91611a2690612fb1565b90611a3090613020565b611a3990612fb1565b91611a45602435612e49565b611a4e90612fb1565b93611a5890613020565b611a6190612fb1565b94611a6b33613020565b611a7490612fb1565b976040519b8c8b819c5160208193019160200191611a91926126e0565b8b0198600b60fa1b998a602082015281519182602183019160200191611ab6926126e0565b0189602182015281519182602283019160200191611ad3926126e0565b0188602282015281519182602383019160200191611af0926126e0565b0187602382015281519182602483019160200191611b0d926126e0565b0186602482015281519182602583019160200191611b2a926126e0565b0185602582015281519182602683019160200191611b47926126e0565b0184602682015281519182602783019160200191611b64926126e0565b0183602782015281519182602883019160200191611b81926126e0565b0182602882015281519182602983019160200191611b9e926126e0565b0190602982015281519182602a83019160200191611bbb926126e0565b0103600a81018352602a01611bd090836124e1565b6040519060a08201938285106001600160401b03861117611060576106de9761105695604052607b84527f496e7374616e636549442c20696e7374616e63654f6653706163652c20696e7360208501527f74616e6365547970652c206d657461646174614349442c206368617449442c2060408501527f49504e532c2049504e53456e637279707465644b65792c206761746564436f6e60608501527f74726163742c2070726963652c206c6f636b2c2063726561746f720000000000608085015260031b1c90612d2c565b634e487b7160e01b8d52602160045260248dfd5b8080611d24575b15611ce7575050868b52600c60205260408b20805460ff19166001179055611ce18761194f61281e565b94611959565b90959015611d0b57878c52600c60205260408c20805460ff19166002179055611959565b600c60205260408c20805460ff19166004179055611959565b508c611cb7565b9250611d433660443560040135602460443501612519565b600254608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d73000000178c5260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf31760205286603760098df5906001600160a01b03821615611e56578b8091604051611de681611dd8602082019463a224cee760e01b8652602060248401526044830190612a47565b03601f1981018352826124e1565b519082855af1611df4612b6e565b5015611e1f5792611e1a611e143660443560040135602460443501612519565b88613405565b61188d565b60405162461bcd60e51b815260206004820152600f60248201526e6572726f72206465706c6f79696e6760881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b634e487b7160e01b8b52602160045260248bfd5b634e487b7160e01b8a52602160045260248afd5b8780fd5b50602090816003193601126102175760043591611ee433846138fd565b838352600782526040808420338552835280842054858552600884528185206001015491516310e5697360e01b815292939092916001600160a01b0316908083600481855afa92831561201e578693611fef575b50813b15610a4b5791859160405193849263d813cc1960e01b8452600484015285602484015230604484015260809081606485015260605191826084860152855b838110611fd75750505060a483828683839584010152601f8019910116810103019134905af1801561121357611fc4575b5062278d0082018092116109a5576106de92933390613257565b611fd090939193612498565b9138611faa565b8082015188820160a401528a96508795508201611f79565b9080935081813d8311612017575b61200781836124e1565b81010312610a4b57519138611f38565b503d611ffd565b6040513d88823e3d90fd5b50346102175760203660031901126102175760406060916004358152600a6020522060018060a01b0390818154169160026001830154920154169060405192835260208301526040820152f35b503461021757608036600319011261021757612090612423565b50612099612439565b506120a261244f565b506064356001600160401b038111610b09576120c29036906004016123f6565b50506040516310e5697360e01b8152602081600481335afa908115610bc75782916120f3575b602082604051908152f35b90506020813d8211612120575b8161210d602093836124e1565b81010312610b09576020915051386120e8565b3d9150612100565b503461021757608036600319011261021757612142612423565b5061214b612439565b506044356064356001600160401b0381116110ba5761216e9036906004016123f6565b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036121f1578154156121ba575b604051630a85bd0160e11b8152602090f35b806121e8916001557f0000000000000000000000000000000000000000000000000000000000000000612b4a565b905538806121a8565b604051634a93b62160e11b8152600490fd5b5034610217576020366003190112610217576020906004358152600b8252604060018060a01b0391205416604051908152f35b5034610217576060366003190112610217576004356001600160401b036024358181116105275761226b9036906004016123f6565b9091604435908111610536576122859036906004016123f6565b848652600b60209081526040872054909391906001600160a01b031633036123a1576106de956122cb611056946122c360299861239196369161279b565b93369161279b565b916123066116896122da6125ba565b9990549861236b6103e56122ec613138565b9761164a603161230c6122fd6125ba565b9a90549b612fb1565b9c612fb1565b9b6040519c8d916603730b6b2901e960cd1b89840152612335815180928b6027870191016126e0565b8201690161030b137baba101e960b51b602782015261235c825180938b87850191016126e0565b0103601181018d52018b6124e1565b604051988268031b7b232a4a2101e960bd1b8b94850152825192839186860191016126e0565b81010360098101885201866124e1565b6040516306815cbd60e41b8152600490fd5b905034610b095781600319360112610b09577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f84011215610ae2578235916001600160401b038311610ae25760208381860195010111610ae257565b600435906001600160a01b0382168203610ae257565b602435906001600160a01b0382168203610ae257565b604435906001600160a01b0382168203610ae257565b906040600319830112610ae25760043591602435906001600160401b038211610ae257612494916004016123f6565b9091565b6001600160401b03811161106057604052565b604081019081106001600160401b0382111761106057604052565b606081019081106001600160401b0382111761106057604052565b90601f801991011681019081106001600160401b0382111761106057604052565b6001600160401b0381116110605760051b60200190565b929161252482612502565b9161253260405193846124e1565b829481845260208094019160051b8101928311610ae257905b8282106125585750505050565b81356001600160a01b0381168103610ae257815290830190830161254b565b906040600319830112610ae25760043591602435906001600160401b038211610ae25780602383011215610ae2578160246125b793600401359101612519565b90565b600554600210156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db290600090565b634e487b7160e01b600052603260045260246000fd5b600554600110156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190600090565b600554600410156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db490600090565b600554156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090600090565b600554600310156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db390600090565b60005b8381106126f35750506000910152565b81810151838201526020016126e3565b9060209161271c815180928185528580860191016126e0565b601f01601f1916010190565b6006546001600160a01b0316330361273c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b03811161106057601f01601f191660200190565b9291926127a782612780565b916127b560405193846124e1565b829481845281830111610ae2578281602093846000960137010152565b156127d957565b60405162461bcd60e51b815260206004820152601b60248201527f44424e533a204e6f6465206973206e6f742061207375626e6f646500000000006044820152606490fd5b6040519061282b826124ab565b600482526344424e5360e01b6020830152565b906000828152600a60205260018060a01b0360408220541690600c60205260ff60408220541660078110156129175760030361287f5750506125b79161386b565b838152600c60205260ff6040822054166007811015612917576001036128c057506128aa9082612b9e565b9182156128b657505090565b6125b7925061386b565b8392508093915052600c60205260ff6040832054166007811015610319576002149081156128f5575b50156125b75750600190565b825250600c602052604081205460ff16600781101561291757600414386128e9565b634e487b7160e01b82526021600452602482fd5b919060008091848352600a60205260018060a01b038060408520541695600c60205260ff60408620541693600785101597886129fb57600386036129a65750508452600a60205280600260408620015416911614935b612917576004811190811561299d575b506129995750565b9150565b90501538612991565b9392509650508395600184146000146129cb5750906129c491612b9e565b935b612981565b95508395600284146000146129e55750906129c491612b9e565b9550505081600482036129c65760019450612981565b634e487b7160e01b87526021600452602487fd5b15612a1657565b60405162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b6044820152606490fd5b90815180825260208080930193019160005b828110612a67575050505090565b83516001600160a01b031685529381019392810192600101612a59565b906020815191012060018060a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692833b15610ae25760009360a4859260405196879384926305ef2c7f60e41b84528760048501528860248501523060448501527f00000000000000000000000000000000000000000000000000000000000000001660648401528160848401525af1928315612b3e576125b793612b2f575b50612b4a565b612b3890612498565b38612b29565b6040513d6000823e3d90fd5b906040519060208201928352604082015260408152612b68816124c6565b51902090565b3d15612b99573d90612b7f82612780565b91612b8d60405193846124e1565b82523d6000602084013e565b606090565b6040516370a0823160e01b81526001600160a01b0391821660048201529160209183916024918391165afa908115612b3e57600091612bde575b50151590565b906020823d8211612c07575b81612bf7602093836124e1565b8101031261021757505138612bd8565b3d9150612bea565b611056612d2a93612c1e612675565b9490549360405190612c2f826124ab565b600982526103e5612cd960226020956864625f73706163657360b81b87870152612c78612c726103e5612c6c612c63612675565b989054996134fb565b936134fb565b98612fb1565b6040519882612c908b945180928c80880191016126e0565b830190600b60fa1b91828b820152612cb1825180938d6021850191016126e0565b01906021820152612cca825180938b87850191016126e0565b010360028101885201866124e1565b7f4442537061636549442c20444253756253706163654f6649442c20444253756260405194612d07866124c6565b602986528501526853706163654e616d6560b81b604085015260031b1c90612d2c565b565b92612d3d6036926125b79495612dcc565b906040519485926b024a729a2a92a1024a72a27960a51b6020850152612d6d815180926020602c880191016126e0565b8301600560fb1b602c820152612d8d825180936020602d850191016126e0565b0167052ac8298aa8aa6560c31b602d820152612db38251809360206035850191016126e0565b01602960f81b60358201520360168101845201826124e1565b60226125b791612de4612dde46612e49565b94612e49565b6040519482612dfd8794518092602080880191016126e0565b830190605f60f81b91826020820152612e208251809360206021850191016126e0565b01906021820152612e3a82518093602087850191016126e0565b010360028101845201826124e1565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612fa3575b506d04ee2d6d415b85acef810000000080831015612f94575b50662386f26fc1000080831015612f85575b506305f5e10080831015612f76575b5061271080831015612f67575b506064821015612f57575b600a80921015612f4d575b60019081602181860195612ee287612780565b96612ef060405198896124e1565b808852612eff601f1991612780565b01366020890137860101905b612f17575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215612f4857919082612f0b565b612f10565b9160010191612ecf565b9190606460029104910191612ec4565b60049193920491019138612eb9565b60089193920491019138612eac565b60109193920491019138612e9d565b60209193920491019138612e8b565b604093508104915038612e72565b6125b760226040518093602760f81b90816020840152612fdb8151809260206021870191016126e0565b82019060218201520360028101845201826124e1565b60405190612ffe826124ab565b601382527264625f7370616365735f696e7374616e63657360681b6020830152565b604051906001600160a01b0316613036826124c6565b602a82526020820160403682378251156125f1576030905381516001908110156125f157607860218401536029905b8082116130b95750506130755790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613112576f181899199a1a9b1b9c1cb0b131b232b360811b901a6130e88486613127565b5360041c9180156130fd576000190190613065565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b9081518110156125f1570160200190565b60405190613145826124ab565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b9061317091939293612dcc565b9060405191602091828401928484106001600160401b03851117611060576125b794602c9460405260008152918051613212575b506132036040519687946602aa82220aa22960cd1b848701526131d0815180928660278a0191016126e0565b85016401029a2aa160dd1b60278201526131f282518093868a850191016126e0565b0191835193849187850191016126e0565b0103600c8101845201826124e1565b90915061325060276040518093660102ba422a922960cd1b86830152613240815180928886860191016126e0565b81010360078101845201826124e1565b90386131a4565b9091612d2a93611056916132696126a9565b959054946103e561334d602360405194613282866124ab565b600d86526020966c737562736372697074696f6e7360981b888801526132d06103e56132ca6103e5612dde6103e56132c46132bb6126a9565b9c90549d6134fb565b97613020565b9a612e49565b9060405199836132e98c955180928d80890191016126e0565b840191600b60fa1b92838c82015261330b8c83519384916021850191016126e0565b01826021820152613325825180938d6022850191016126e0565b0190602282015261333e825180938b87850191016126e0565b010360038101885201866124e1565b7f496e7374616e636549442c20737562736372696265722c20746f6b656e49442c6040519461337b866124c6565b602786528501526608195b991cd05d60ca1b604085015260031b1c90612d2c565b60001981146133ab5760010190565b634e487b7160e01b600052601160045260246000fd5b604051906133ce826124ab565b60078252666d656d6265727360c81b6020830152565b8051156125f15760200190565b80518210156125f15760209160051b010190565b613411909291926134fb565b9160005b81518110156134f5576134f0906104c061342d61263e565b90546134376133c1565b916134e861344361263e565b90546003956134518d612fb1565b9161346a6103e58d6103de8d60018060a01b03926133f1565b937124b739ba30b731b2a4a2161036b2b6b132b960711b60406134cd81519788885161349e8160209b8c80860191016126e0565b8101600b60fa1b8a8201528251906134be826021958d87850191016126e0565b0103600181018a5201886124e1565b51946134d8866124ab565b60128652850152881b1c90612d2c565b921b1c61361f565b613415565b50509050565b60405190613508826124c6565b6040825260209182810191604036843760405190613525826124ab565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b8583015260005b8581106135845750505061060f60f31b926125b792613574602293604051968794850152518092858501906126e0565b81010360028101845201826124e1565b81811a9083518015613609576001600160f81b03199081906135a890850487613127565b51169060019383851b92848404600214851517156133ab5760001a6135cd848a613127565b5386518015613609576135e1910687613127565b51169281018091116133ab576135fe6136049360001a9187613127565b5361339c565b613544565b634e487b7160e01b600052601260045260246000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b15610ae2576136889260009283604051809681958294631bbd786d60e11b84523060048501526024840152606060448401526064830190612703565b03925af18015612b3e576136995750565b612d2a90612498565b90916136f2939260095460009384916040918251988995869263216c908360e11b845262278d0060048501528660248501526044840152600019606484015260c0608484015260c4830190612703565b60a482018590526001600160a01b039560209586949190920391839188165af1968715613861578597613829575b5082871694853b1561021757815163debe2b0d60e01b815260048101829052603260248201528181604481838b5af180156138105761381a575b50853b156102175781516374cac47d60e01b81523060048201528160248201528160448201528160648201528160848201528160a48201528160c4820152818160e481838b5af180156138105790859392916137f4575b5060086001948351976137c3896124ab565b338952818901998a5283525220935116926001600160601b0360a01b93848254161781550192511690825416179055565b81935061380390949294612498565b610b0957918391386137b1565b83513d84823e3d90fd5b61382390612498565b3861375a565b9096508181813d831161385a575b61384181836124e1565b8101031261053657518281168103610536579538613720565b503d613837565b81513d87823e3d90fd5b60009081526008602090815260408083206001015490516370a0823160e01b81526001600160a01b039485166004820152929383916024918391165afa9182156138f15780926138bd575b5050151590565b9091506020823d82116138e9575b816138d8602093836124e1565b8101031261021757505138806138b6565b3d91506138cb565b604051903d90823e3d90fd5b600081815260208093600782526040832060018060a01b0380921684528252604083205493835260088252600160408420015416926024604051809581936354b249fb60e01b835260048301525afa928315613991578193613960575b50505090565b9091809350813d831161398a575b61397881836124e1565b8101031261021757505138808061395a565b503d61396e565b50604051903d90823e3d90fd5b814710613a34576000918291829182916001600160a01b03165af16139c1612b6e565b50156139c957565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea26469706673582212209b8832bca21c410b27d2686d47acb0946bd29a6e894c83ce30d371b9d0227f5764736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816306433b1b146123b3575080630c9ddf6d1461223657806311ad2f3414612203578063150b7a0214612128578063221c1fd1146120765780632711447f14612029578063284e82e814611ec75780633ac275221461172a5780633ccfd60b146117075780633e203835146116d85780633ec29e721461158657806347d121c51461155f578063557ed1ba146115445780635e895f29146114e257806367e0970914611449578063715018a6146113eb57806371671bf2146112bf5780637a9b777414611250578063820cc5571461123257806382211846146110be57806383a8b3d014610cb357806384ec965314610c865780638897538314610c5f5780638a8fd25014610c0d5780638da5cb5b14610be45780638e19899e14610b0d5780639ad66a23146107a6578063a58dcc9514610726578063a5df63d6146106f5578063bfc51b7e14610666578063c6a36c4b14610628578063cb609077146105e3578063d68d087c1461059e578063db7baba914610581578063dd321bfc1461053a578063e0cf1e4c1461032d578063e2b1e4ed146102e0578063f2fde38b1461021a5763ffeb4a300361000f57346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b503461021757602036600319011261021757610234612423565b61023c612728565b6001600160a01b0390811690811561028c57600654826001600160601b0360a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5034610217576020366003190112610217576004358152600c60205260ff60408220541660405190600781101561031957602092508152f35b634e487b7160e01b83526021600452602483fd5b50346102175761033c36612577565b8183929352602090600a8252604083209360018060a01b039461036a86600281845416930154163314612a0f565b806104ce575b5061037a906134fb565b91835b82518110156104ca576104c5906104c0660102ba422a922960cd1b88610463886104b9896103de8a6103ad61263e565b969054978b6103ea6103e56103c06133c1565b936103c961263e565b989054946103d860039d612fb1565b9a6133f1565b5116613020565b612fb1565b9461045a6040519687878101996c024b739ba30b731b2a4a2101e9609d1b8b526d01020a7221036b2b6b132b9101e960951b815161043081602d948d86880191016126e0565b83019182015282519061044b82603b958c87850191016126e0565b0103601b8101895201876124e1565b881b1c90612dcc565b916040519889936b02222a622aa2290232927a6960a51b8486015261049281518092602c9687890191016126e0565b84019283015251906104aa82603395868401906126e0565b010360138101875201856124e1565b1b1c61361f565b61339c565b61037d565b8480f35b803b156105365784604051809263362eb0ab60e11b82528660048301528183816104fb602482018a612a47565b03925af1801561052b57908591610513575b50610370565b61051c90612498565b61052757833861050d565b8380fd5b6040513d87823e3d90fd5b8480fd5b5034610217576040366003190112610217576040610556612439565b9160043581526007602052209060018060a01b03166000526020526020604060002054604051908152f35b503461021757806003193601126102175760209054604051908152f35b50346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102175780600319360112610217576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346102175760203660031901126102175760408091600435815260086020522060018060a01b036001818354169201541682519182526020820152f35b50346102175761067536612465565b909291808352600c60205260ff60408420541660078110156106e1576106de93946106a560056106d893146127d2565b6106b96106b336868461279b565b84612a84565b808752600c60205260408720805460ff1916600517905593369161279b565b91612c0f565b80f35b634e487b7160e01b84526021600452602484fd5b503461021757604036600319011261021757602061071c610714612439565b60043561386b565b6040519015158152f35b503461021757602036600319011261021757602060018060a01b03605560438260025416604051903060388301526f5af43d82803e903d91602b57fd5bf3ff60248301526014820152733d602d80600a3d3981f3363d3d373d3d3d363d73815260043560588201526037600c820120607882015201209060405191168152f35b506003199060203683018113610b0957600435926040516107c6816124ab565b600190818152833681830137604051916107df836124ab565b808352843681850137604051936107f5856124ab565b8185528536818701376040519461080b866124ab565b828652868601938736863760405194610823866124ab565b848652888a5b818110610af9575060405161083d816124ab565b86815281369101378a8a52600889526040808b2086015490516310e5697360e01b81526001600160a01b0390911697908a816004818c5afa908115610aee578c91610abc575b50918b98969391999795949230610899846133e4565b526108a3896133e4565b52336108ae8b6133e4565b52604051633381899760e01b815260a06004820152975160a4890181905297998a9860c48a0192908b8e5b828210610a8f575050505091610900826109209594888c61091096030160248d0152612a47565b90868a83030160448b0152612a47565b9084888303016064890152612a47565b9185830301608486015282518083528883019289808360051b83010195019388915b8b848410610a5a5750505050505050828091039134905af18015610a4f5783906109b9575b61097191506133e4565b519083835260078152604083209033600052528060406000205562278d004201908142116109a5576106de92933390613257565b634e487b7160e01b83526011600452602483fd5b503d8084833e6109c981836124e1565b8101908281830312610527578051906001600160401b03821161053657019080601f830112156105275781516109fe81612502565b92610a0c60405194856124e1565b818452848085019260051b820101928311610a4b5784809101915b838310610a3b575050505061097190610967565b8251815291810191859101610a27565b8580fd5b6040513d85823e3d90fd5b919497995092958792959850610a7b8291601f198682030187528a51612703565b9801930193018a9795929389979592610942565b9194889b9d5083839295979994989a9b9d505181520195019101908b99979694928e9b999694928e6108d9565b90508a81813d8311610ae7575b610ad381836124e1565b81010312610ae2575138610883565b600080fd5b503d610ac9565b6040513d8e823e3d90fd5b606082828a010152018990610829565b5080fd5b503461021757602036600319011261021757600435815260086020526040812060405190610b3a826124ab565b80546001600160a01b0390811680845260019092015481166020840190815290913303610bd257819051169083823192803b15610b0957818091606460405180948193636ce5768960e11b83528160048401523060248401528960448401525af18015610bc757610bb3575b50506106de92511661399e565b610bbc90612498565b610527578338610ba6565b6040513d84823e3d90fd5b60405163c00f906f60e01b8152600490fd5b50346102175780600319360112610217576006546040516001600160a01b039091168152602090f35b503461021757602036600319011261021757600435600554811015610b095760209060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00154604051908152f35b503461021757604036600319011261021757602061071c610c7e612439565b60043561292b565b503461021757604036600319011261021757602061071c610ca5612423565b610cad612439565b90612b9e565b50346102175760c0366003190112610217576004356024356001600160401b0381116110ba57610ce79036906004016123f6565b6044929192356001600160401b03811161053657610d099036906004016123f6565b9190926064356001600160401b0381116110b657610d2b9036906004016123f6565b91906084356001600160401b0381116110b257610d4c9036906004016123f6565b969060a4356001600160401b0381116110ae57610d6d9036906004016123f6565b939092610d7a338761292b565b1561109c578b9a8b988b6040518060209c8d8201938c8552808a60408501378201906040820152038c81018252604001610db490826124e1565b519020809d528d600c8b52604090205460ff16600781101561108857611076578c8e52600b8a526040808f208054336001600160a01b0319909116179055600c8b528e20805460ff19166006179055610e0f9136919061279b565b983690610e1b9261279b565b953690610e279261279b565b973690610e339261279b565b913690610e3f9261279b565b96610e486125ba565b97905496610e54613138565b93610e5d6125ba565b9b905496610e6a906134fb565b610e7390612fb1565b94610e7d906134fb565b610e8690612fb1565b92610e9090612fb1565b97610e9a90612fb1565b93610ea490612fb1565b91610eae90612fb1565b90610eb890612fb1565b91610ec233613020565b610ecb90612fb1565b948a6040519a888c9951908184808d01920191610ee7926126e0565b890196600b60fa1b978884820152815191828560218401920191610f0a926126e0565b01908760218301528051809360228401920191610f26926126e0565b01856022820152815191828d60238401920191610f42926126e0565b01846023820152815191828c60248401920191610f5e926126e0565b01836024820152815191828b60258401920191610f7a926126e0565b01826025820152815191828a60268401920191610f96926126e0565b01906026820152815191828860278401920191610fb2926126e0565b0103600781018452602701610fc790846124e1565b6040519160808301978389106001600160401b038a1117611060577f496e7374616e636549442c20636f646549442c206e616d652c2061626f75742c611056966106de9a604052604886528501527f206368617449442c2049504e532c2049504e53456e637279707465644b65792c6040850152671031b932b0ba37b960c11b606085015260031b1c90612d2c565b9160031b1c61361f565b634e487b7160e01b600052604160045260246000fd5b604051631144626f60e01b8152600490fd5b634e487b7160e01b8f52602160045260248ffd5b6040516346627df160e01b8152600490fd5b8a80fd5b8880fd5b8680fd5b8280fd5b503461021757602036600319011261021757806110d9612423565b81546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929091833b156105365782916044869283604051958694859362d5fa2b60e81b8552600485015216978860248401525af190811561121357849161121e575b50507f00000000000000000000000000000000000000000000000000000000000000001690600154823b156111f65760405190630a3b53db60e21b82526004820152816024820152838160448183875af19081156112135784916111fb575b5050600154823b156111f65760648492836040519586948593632142170760e11b8552306004860152602485015260448401525af18015610bc7576111e65750f35b6111ef90612498565b6102175780f35b505050fd5b61120490612498565b61120f5782386111a4565b5050fd5b6040513d86823e3d90fd5b61122790612498565b61120f578238611145565b50346102175780600319360112610217576020600154604051908152f35b5034610217576020366003190112610217576004356001600160401b038111610b09576112846106de9136906004016123f6565b6106d861129d855461129736858761279b565b90612a84565b92838652600c60205260408620600560ff19825416179055855492369161279b565b503461021757602080600319360112610b09576004356004548110156110ba5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190604051918381549460019086821c938288169788156113e1575b86861089146113cd57868899878a98999a5291826000146113a957505060011461136d575b505050611355925003836124e1565b611369604051928284938452830190612703565b0390f35b869350819291528282205b8583106113915750506113559350820101388080611346565b80548389018501528794508693909201918101611378565b93509450505061135594915060ff191682840152151560051b820101388080611346565b634e487b7160e01b83526022600452602483fd5b94607f1694611321565b5034610217578060031936011261021757611404612728565b600680546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346102175761145836612577565b818352600a602052826040812061148060018060a01b03600281845416930154163314612a0f565b80611491575b50506106de91613405565b803b15610b0957816040518092632f41d6e160e21b8252602060048301528183816114bf602482018a612a47565b03925af18015610bc75715611486576114d790612498565b6110ba578238611486565b50346102175760e0366003190112610217576114fc612439565b61150461244f565b506001600160a01b0360643581811603610ae2576084356001600160401b038111610527576115379036906004016123f6565b5050309116036102175780f35b50346102175780600319360112610217576020604051428152f35b503461021757604036600319011261021757602061071c61157e612439565b60043561283e565b50346102175761159536612465565b828452600a6020908152604085206002015490939291906001600160a01b03163303611693576116796115d26106de95949361105693369161279b565b926115db612607565b95905494611607611689602d6115ef612ff1565b9461164f6103e56115fe612607565b96905497612fb1565b9861164a602e604051809c6d036b2ba30b230ba30a1a4a2101e960951b8883015261163a815180928a86860191016126e0565b810103600e81018d52018b6124e1565b6134fb565b60405198826c024b739ba30b731b2a4a2101e9609d1b8b94850152825192839186860191016126e0565b810103600d8101885201866124e1565b60031b1c90613163565b60405162461bcd60e51b815260048101859052601860248201527f44424e533a204e6f20696e7374616e63652061636365737300000000000000006044820152606490fd5b50346102175760403660031901126102175760206116ff6116f7612439565b6004356138fd565b604051908152f35b5034610217578060031936011261021757611720612728565b6106de473361399e565b50346102175760e0366003190112610217576001600160401b036044351161021757366023604435011215610217576001600160401b036044356004013511610217573660246044356004013560051b604435010111610217576064356001600160401b038111610b09576117a39036906004016123f6565b6084356001600160401b038111610527576117c29036906004016123f6565b9260a4356001600160401b038111610a4b576117e29036906004016123f6565b94909160c4356001600160401b038111611ec3576118049036906004016123f6565b94906004358952600c60205260ff60408a2054166007811015611eaf57600561182d91146127d2565b604051602081019060043582528987604083013761185e6040828d8d820190838201520360208101845201826124e1565b51902094858a52600c60205260ff60408b2054166007811015611e9b5761107657899260443560040135611d2b575b6040518060608101106001600160401b03606083011117611060578060608d920160405260018060a01b0386168152602435602082015260026040808301933385528b8152600a60205220602060018060a01b03845116936001600160601b0360a01b948584541617835501516001820155019160018060a01b03905116908254161790558a60018060a01b03851615156024351515600014611cb0575050868b52600c60205260408b20805460ff191660031790556119578761194f61281e565b6024356136a2565b945b878c52600c60205260ff60408d2054169960078b1015611c9c57369061197e9261279b565b95369061198a9261279b565b9836906119969261279b565b9536906119a29261279b565b966119ab612607565b979054966119b7612ff1565b946119c0612607565b9b9054986119cd906134fb565b6119d690612fb1565b956119e26004356134fb565b6119eb90612fb1565b946119f590612e49565b6119fe90612fb1565b98611a0890612fb1565b95611a1290612fb1565b93611a1c90612fb1565b91611a2690612fb1565b90611a3090613020565b611a3990612fb1565b91611a45602435612e49565b611a4e90612fb1565b93611a5890613020565b611a6190612fb1565b94611a6b33613020565b611a7490612fb1565b976040519b8c8b819c5160208193019160200191611a91926126e0565b8b0198600b60fa1b998a602082015281519182602183019160200191611ab6926126e0565b0189602182015281519182602283019160200191611ad3926126e0565b0188602282015281519182602383019160200191611af0926126e0565b0187602382015281519182602483019160200191611b0d926126e0565b0186602482015281519182602583019160200191611b2a926126e0565b0185602582015281519182602683019160200191611b47926126e0565b0184602682015281519182602783019160200191611b64926126e0565b0183602782015281519182602883019160200191611b81926126e0565b0182602882015281519182602983019160200191611b9e926126e0565b0190602982015281519182602a83019160200191611bbb926126e0565b0103600a81018352602a01611bd090836124e1565b6040519060a08201938285106001600160401b03861117611060576106de9761105695604052607b84527f496e7374616e636549442c20696e7374616e63654f6653706163652c20696e7360208501527f74616e6365547970652c206d657461646174614349442c206368617449442c2060408501527f49504e532c2049504e53456e637279707465644b65792c206761746564436f6e60608501527f74726163742c2070726963652c206c6f636b2c2063726561746f720000000000608085015260031b1c90612d2c565b634e487b7160e01b8d52602160045260248dfd5b8080611d24575b15611ce7575050868b52600c60205260408b20805460ff19166001179055611ce18761194f61281e565b94611959565b90959015611d0b57878c52600c60205260408c20805460ff19166002179055611959565b600c60205260408c20805460ff19166004179055611959565b508c611cb7565b9250611d433660443560040135602460443501612519565b600254608881901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d73000000178c5260781b6effffffffffffffffffffffffffffff19166e5af43d82803e903d91602b57fd5bf31760205286603760098df5906001600160a01b03821615611e56578b8091604051611de681611dd8602082019463a224cee760e01b8652602060248401526044830190612a47565b03601f1981018352826124e1565b519082855af1611df4612b6e565b5015611e1f5792611e1a611e143660443560040135602460443501612519565b88613405565b61188d565b60405162461bcd60e51b815260206004820152600f60248201526e6572726f72206465706c6f79696e6760881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b634e487b7160e01b8b52602160045260248bfd5b634e487b7160e01b8a52602160045260248afd5b8780fd5b50602090816003193601126102175760043591611ee433846138fd565b838352600782526040808420338552835280842054858552600884528185206001015491516310e5697360e01b815292939092916001600160a01b0316908083600481855afa92831561201e578693611fef575b50813b15610a4b5791859160405193849263d813cc1960e01b8452600484015285602484015230604484015260809081606485015260605191826084860152855b838110611fd75750505060a483828683839584010152601f8019910116810103019134905af1801561121357611fc4575b5062278d0082018092116109a5576106de92933390613257565b611fd090939193612498565b9138611faa565b8082015188820160a401528a96508795508201611f79565b9080935081813d8311612017575b61200781836124e1565b81010312610a4b57519138611f38565b503d611ffd565b6040513d88823e3d90fd5b50346102175760203660031901126102175760406060916004358152600a6020522060018060a01b0390818154169160026001830154920154169060405192835260208301526040820152f35b503461021757608036600319011261021757612090612423565b50612099612439565b506120a261244f565b506064356001600160401b038111610b09576120c29036906004016123f6565b50506040516310e5697360e01b8152602081600481335afa908115610bc75782916120f3575b602082604051908152f35b90506020813d8211612120575b8161210d602093836124e1565b81010312610b09576020915051386120e8565b3d9150612100565b503461021757608036600319011261021757612142612423565b5061214b612439565b506044356064356001600160401b0381116110ba5761216e9036906004016123f6565b50507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036121f1578154156121ba575b604051630a85bd0160e11b8152602090f35b806121e8916001557f0000000000000000000000000000000000000000000000000000000000000000612b4a565b905538806121a8565b604051634a93b62160e11b8152600490fd5b5034610217576020366003190112610217576020906004358152600b8252604060018060a01b0391205416604051908152f35b5034610217576060366003190112610217576004356001600160401b036024358181116105275761226b9036906004016123f6565b9091604435908111610536576122859036906004016123f6565b848652600b60209081526040872054909391906001600160a01b031633036123a1576106de956122cb611056946122c360299861239196369161279b565b93369161279b565b916123066116896122da6125ba565b9990549861236b6103e56122ec613138565b9761164a603161230c6122fd6125ba565b9a90549b612fb1565b9c612fb1565b9b6040519c8d916603730b6b2901e960cd1b89840152612335815180928b6027870191016126e0565b8201690161030b137baba101e960b51b602782015261235c825180938b87850191016126e0565b0103601181018d52018b6124e1565b604051988268031b7b232a4a2101e960bd1b8b94850152825192839186860191016126e0565b81010360098101885201866124e1565b6040516306815cbd60e41b8152600490fd5b905034610b095781600319360112610b09577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9181601f84011215610ae2578235916001600160401b038311610ae25760208381860195010111610ae257565b600435906001600160a01b0382168203610ae257565b602435906001600160a01b0382168203610ae257565b604435906001600160a01b0382168203610ae257565b906040600319830112610ae25760043591602435906001600160401b038211610ae257612494916004016123f6565b9091565b6001600160401b03811161106057604052565b604081019081106001600160401b0382111761106057604052565b606081019081106001600160401b0382111761106057604052565b90601f801991011681019081106001600160401b0382111761106057604052565b6001600160401b0381116110605760051b60200190565b929161252482612502565b9161253260405193846124e1565b829481845260208094019160051b8101928311610ae257905b8282106125585750505050565b81356001600160a01b0381168103610ae257815290830190830161254b565b906040600319830112610ae25760043591602435906001600160401b038211610ae25780602383011215610ae2578160246125b793600401359101612519565b90565b600554600210156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db290600090565b634e487b7160e01b600052603260045260246000fd5b600554600110156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190600090565b600554600410156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db490600090565b600554156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090600090565b600554600310156125f15760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db390600090565b60005b8381106126f35750506000910152565b81810151838201526020016126e3565b9060209161271c815180928185528580860191016126e0565b601f01601f1916010190565b6006546001600160a01b0316330361273c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160401b03811161106057601f01601f191660200190565b9291926127a782612780565b916127b560405193846124e1565b829481845281830111610ae2578281602093846000960137010152565b156127d957565b60405162461bcd60e51b815260206004820152601b60248201527f44424e533a204e6f6465206973206e6f742061207375626e6f646500000000006044820152606490fd5b6040519061282b826124ab565b600482526344424e5360e01b6020830152565b906000828152600a60205260018060a01b0360408220541690600c60205260ff60408220541660078110156129175760030361287f5750506125b79161386b565b838152600c60205260ff6040822054166007811015612917576001036128c057506128aa9082612b9e565b9182156128b657505090565b6125b7925061386b565b8392508093915052600c60205260ff6040832054166007811015610319576002149081156128f5575b50156125b75750600190565b825250600c602052604081205460ff16600781101561291757600414386128e9565b634e487b7160e01b82526021600452602482fd5b919060008091848352600a60205260018060a01b038060408520541695600c60205260ff60408620541693600785101597886129fb57600386036129a65750508452600a60205280600260408620015416911614935b612917576004811190811561299d575b506129995750565b9150565b90501538612991565b9392509650508395600184146000146129cb5750906129c491612b9e565b935b612981565b95508395600284146000146129e55750906129c491612b9e565b9550505081600482036129c65760019450612981565b634e487b7160e01b87526021600452602487fd5b15612a1657565b60405162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b6044820152606490fd5b90815180825260208080930193019160005b828110612a67575050505090565b83516001600160a01b031685529381019392810192600101612a59565b906020815191012060018060a01b0391827f00000000000000000000000000000000000000000000000000000000000000001692833b15610ae25760009360a4859260405196879384926305ef2c7f60e41b84528760048501528860248501523060448501527f00000000000000000000000000000000000000000000000000000000000000001660648401528160848401525af1928315612b3e576125b793612b2f575b50612b4a565b612b3890612498565b38612b29565b6040513d6000823e3d90fd5b906040519060208201928352604082015260408152612b68816124c6565b51902090565b3d15612b99573d90612b7f82612780565b91612b8d60405193846124e1565b82523d6000602084013e565b606090565b6040516370a0823160e01b81526001600160a01b0391821660048201529160209183916024918391165afa908115612b3e57600091612bde575b50151590565b906020823d8211612c07575b81612bf7602093836124e1565b8101031261021757505138612bd8565b3d9150612bea565b611056612d2a93612c1e612675565b9490549360405190612c2f826124ab565b600982526103e5612cd960226020956864625f73706163657360b81b87870152612c78612c726103e5612c6c612c63612675565b989054996134fb565b936134fb565b98612fb1565b6040519882612c908b945180928c80880191016126e0565b830190600b60fa1b91828b820152612cb1825180938d6021850191016126e0565b01906021820152612cca825180938b87850191016126e0565b010360028101885201866124e1565b7f4442537061636549442c20444253756253706163654f6649442c20444253756260405194612d07866124c6565b602986528501526853706163654e616d6560b81b604085015260031b1c90612d2c565b565b92612d3d6036926125b79495612dcc565b906040519485926b024a729a2a92a1024a72a27960a51b6020850152612d6d815180926020602c880191016126e0565b8301600560fb1b602c820152612d8d825180936020602d850191016126e0565b0167052ac8298aa8aa6560c31b602d820152612db38251809360206035850191016126e0565b01602960f81b60358201520360168101845201826124e1565b60226125b791612de4612dde46612e49565b94612e49565b6040519482612dfd8794518092602080880191016126e0565b830190605f60f81b91826020820152612e208251809360206021850191016126e0565b01906021820152612e3a82518093602087850191016126e0565b010360028101845201826124e1565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612fa3575b506d04ee2d6d415b85acef810000000080831015612f94575b50662386f26fc1000080831015612f85575b506305f5e10080831015612f76575b5061271080831015612f67575b506064821015612f57575b600a80921015612f4d575b60019081602181860195612ee287612780565b96612ef060405198896124e1565b808852612eff601f1991612780565b01366020890137860101905b612f17575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215612f4857919082612f0b565b612f10565b9160010191612ecf565b9190606460029104910191612ec4565b60049193920491019138612eb9565b60089193920491019138612eac565b60109193920491019138612e9d565b60209193920491019138612e8b565b604093508104915038612e72565b6125b760226040518093602760f81b90816020840152612fdb8151809260206021870191016126e0565b82019060218201520360028101845201826124e1565b60405190612ffe826124ab565b601382527264625f7370616365735f696e7374616e63657360681b6020830152565b604051906001600160a01b0316613036826124c6565b602a82526020820160403682378251156125f1576030905381516001908110156125f157607860218401536029905b8082116130b95750506130755790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613112576f181899199a1a9b1b9c1cb0b131b232b360811b901a6130e88486613127565b5360041c9180156130fd576000190190613065565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b9081518110156125f1570160200190565b60405190613145826124ab565b600f82526e696e7374616e6365735f636f64657360881b6020830152565b9061317091939293612dcc565b9060405191602091828401928484106001600160401b03851117611060576125b794602c9460405260008152918051613212575b506132036040519687946602aa82220aa22960cd1b848701526131d0815180928660278a0191016126e0565b85016401029a2aa160dd1b60278201526131f282518093868a850191016126e0565b0191835193849187850191016126e0565b0103600c8101845201826124e1565b90915061325060276040518093660102ba422a922960cd1b86830152613240815180928886860191016126e0565b81010360078101845201826124e1565b90386131a4565b9091612d2a93611056916132696126a9565b959054946103e561334d602360405194613282866124ab565b600d86526020966c737562736372697074696f6e7360981b888801526132d06103e56132ca6103e5612dde6103e56132c46132bb6126a9565b9c90549d6134fb565b97613020565b9a612e49565b9060405199836132e98c955180928d80890191016126e0565b840191600b60fa1b92838c82015261330b8c83519384916021850191016126e0565b01826021820152613325825180938d6022850191016126e0565b0190602282015261333e825180938b87850191016126e0565b010360038101885201866124e1565b7f496e7374616e636549442c20737562736372696265722c20746f6b656e49442c6040519461337b866124c6565b602786528501526608195b991cd05d60ca1b604085015260031b1c90612d2c565b60001981146133ab5760010190565b634e487b7160e01b600052601160045260246000fd5b604051906133ce826124ab565b60078252666d656d6265727360c81b6020830152565b8051156125f15760200190565b80518210156125f15760209160051b010190565b613411909291926134fb565b9160005b81518110156134f5576134f0906104c061342d61263e565b90546134376133c1565b916134e861344361263e565b90546003956134518d612fb1565b9161346a6103e58d6103de8d60018060a01b03926133f1565b937124b739ba30b731b2a4a2161036b2b6b132b960711b60406134cd81519788885161349e8160209b8c80860191016126e0565b8101600b60fa1b8a8201528251906134be826021958d87850191016126e0565b0103600181018a5201886124e1565b51946134d8866124ab565b60128652850152881b1c90612d2c565b921b1c61361f565b613415565b50509050565b60405190613508826124c6565b6040825260209182810191604036843760405190613525826124ab565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b8583015260005b8581106135845750505061060f60f31b926125b792613574602293604051968794850152518092858501906126e0565b81010360028101845201826124e1565b81811a9083518015613609576001600160f81b03199081906135a890850487613127565b51169060019383851b92848404600214851517156133ab5760001a6135cd848a613127565b5386518015613609576135e1910687613127565b51169281018091116133ab576135fe6136049360001a9187613127565b5361339c565b613544565b634e487b7160e01b600052601260045260246000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b15610ae2576136889260009283604051809681958294631bbd786d60e11b84523060048501526024840152606060448401526064830190612703565b03925af18015612b3e576136995750565b612d2a90612498565b90916136f2939260095460009384916040918251988995869263216c908360e11b845262278d0060048501528660248501526044840152600019606484015260c0608484015260c4830190612703565b60a482018590526001600160a01b039560209586949190920391839188165af1968715613861578597613829575b5082871694853b1561021757815163debe2b0d60e01b815260048101829052603260248201528181604481838b5af180156138105761381a575b50853b156102175781516374cac47d60e01b81523060048201528160248201528160448201528160648201528160848201528160a48201528160c4820152818160e481838b5af180156138105790859392916137f4575b5060086001948351976137c3896124ab565b338952818901998a5283525220935116926001600160601b0360a01b93848254161781550192511690825416179055565b81935061380390949294612498565b610b0957918391386137b1565b83513d84823e3d90fd5b61382390612498565b3861375a565b9096508181813d831161385a575b61384181836124e1565b8101031261053657518281168103610536579538613720565b503d613837565b81513d87823e3d90fd5b60009081526008602090815260408083206001015490516370a0823160e01b81526001600160a01b039485166004820152929383916024918391165afa9182156138f15780926138bd575b5050151590565b9091506020823d82116138e9575b816138d8602093836124e1565b8101031261021757505138806138b6565b3d91506138cb565b604051903d90823e3d90fd5b600081815260208093600782526040832060018060a01b0380921684528252604083205493835260088252600160408420015416926024604051809581936354b249fb60e01b835260048301525afa928315613991578193613960575b50505090565b9091809350813d831161398a575b61397881836124e1565b8101031261021757505138808061395a565b503d61396e565b50604051903d90823e3d90fd5b814710613a34576000918291829182916001600160a01b03165af16139c1612b6e565b50156139c957565b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fdfea26469706673582212209b8832bca21c410b27d2686d47acb0946bd29a6e894c83ce30d371b9d0227f5764736f6c63430008140033",
  "devdoc": {
    "details": "Create a decentralized Database NameSpaces Where space and subSpaces can get created and anyone can create instances inside a space and contribute to the public this is possible by integrating tableland SQL in solidity ENS system to support a decentralized Namespace of Database spaces IPNS and Push protocol for code and space discussions",
    "kind": "dev",
    "methods": {
      "createDBSpace(string)": {
        "details": "Create a new space under the given node",
        "params": {
          "_name": "The name of the new space"
        }
      },
      "createDBSubSpace(bytes32,string)": {
        "details": "Create a new subnode under the given node",
        "params": {
          "_DBSpace": "The parent node",
          "_name": "The name of the new subnode"
        }
      },
      "createInstanceCode(bytes32,string,string,string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_about": "The about of the new instance",
          "_chatID": "The chatID of the new instance",
          "_codeIPNS": "The IPNS of the new instance",
          "_instance": "The parent node",
          "_name": "The name of the new instance"
        }
      },
      "createSpaceInstance(bytes32,uint256,address[],string,string,string,string)": {
        "details": "Create a new instance under the given node",
        "params": {
          "_IPNS": "The IPNS of the new instance",
          "_chatID": "The chatID of the new instance",
          "_members": "The hatID of the new instance",
          "_metadataCID": "The name of the new instance",
          "_node": "The parent node"
        }
      },
      "hasViewAccess(bytes32,address)": {
        "details": "Check if the sender has access to the given instance",
        "params": {
          "_instance": "The instance to check",
          "_sender": "The sender to check"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(bytes32)": {
        "details": "withdraw function for an agentID",
        "params": {
          "_instanceID": "to withdraw money from the lock contract"
        }
      }
    },
    "title": "DBNS",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ChainNotSupported(uint256)": [
        {
          "notice": "Current chain does not have a TablelandTables deployment."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "withdraw(bytes32)": {
        "notice": "We give back to the agent creator 70% of the total income from that agent the platform keeps 30% of that amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4545,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "DBNS_NODE",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 4549,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "DOMAIN_ID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4754,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4849,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "createTableStatements",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4852,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "tables",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 4855,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "tableIDs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5723,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instanceSubscriptions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5728,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instanceLock",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(InstanceStruct)5717_storage)"
      },
      {
        "astId": 5731,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "UNLOCK",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IUnlockV12)3630"
      },
      {
        "astId": 4128,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "instances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(SpaceInstance)4123_storage)"
      },
      {
        "astId": 4132,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "codeOwner",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4137,
        "contract": "contracts/DBNS.sol:DBNS",
        "label": "isType",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_enum(Types)4116)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUnlockV12)3630": {
        "encoding": "inplace",
        "label": "contract IUnlockV12",
        "numberOfBytes": "20"
      },
      "t_enum(Types)4116": {
        "encoding": "inplace",
        "label": "enum Core.Types",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_enum(Types)4116)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Core.Types)",
        "numberOfBytes": "32",
        "value": "t_enum(Types)4116"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_struct(InstanceStruct)5717_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Unlock.InstanceStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(InstanceStruct)5717_storage"
      },
      "t_mapping(t_bytes32,t_struct(SpaceInstance)4123_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Core.SpaceInstance)",
        "numberOfBytes": "32",
        "value": "t_struct(SpaceInstance)4123_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InstanceStruct)5717_storage": {
        "encoding": "inplace",
        "label": "struct Unlock.InstanceStruct",
        "members": [
          {
            "astId": 5714,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5716,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "lockAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SpaceInstance)4123_storage": {
        "encoding": "inplace",
        "label": "struct Core.SpaceInstance",
        "members": [
          {
            "astId": 4118,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "gatedContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4120,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4122,
            "contract": "contracts/DBNS.sol:DBNS",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
