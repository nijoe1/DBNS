{
  "address": "0x67431bB9e8a258a4f8D2085609F4138850968D79",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nameWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_publicResolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ERC6551Registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ERC6551Implementation",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllTokensMinted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallMintCharacter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallMintCharacterWhitelist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotTransferToTokenERC6551",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMerkleProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxOneTokenPerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOneERC721TokenAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyTBAsThatOwnTheCharacterForThatAsset",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Decrypted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Tokemon.TokenType",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Tokemon.TokenType",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC6551Implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERC6551Registry",
      "outputs": [
        {
          "internalType": "contract IERC6551Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME_WRAPPER",
      "outputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PUBLIC_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IENSResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseGamingENSNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseGamingENSTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetForCharacterNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "createAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "createCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        }
      ],
      "name": "decrypt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "decrypted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tokenNode",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_hasAccess",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        }
      ],
      "name": "mintAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_node",
          "type": "bytes32"
        }
      ],
      "name": "mintCharacter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "enum Tokemon.TokenType",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ERC6551Registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ERC6551Implementation",
          "type": "address"
        }
      ],
      "name": "updateERC6551Contracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28c5e11f67df014019f481e64e2537724d78ebc9f43b2f4dbdfcac51fe73e365",
  "receipt": {
    "to": null,
    "from": "0x464e3F471628E162FA34F130F4C3bCC41fF7635d",
    "contractAddress": "0x67431bB9e8a258a4f8D2085609F4138850968D79",
    "transactionIndex": 58,
    "gasUsed": "3095586",
    "logsBloom": "0x
    "blockHash": "0x3c8ee9a0f9faa6fac5d97474c7676fab5eab7d2ebb3c0845a5442311cbefea18",
    "transactionHash": "0x28c5e11f67df014019f481e64e2537724d78ebc9f43b2f4dbdfcac51fe73e365",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 10274078,
        "transactionHash": "0x28c5e11f67df014019f481e64e2537724d78ebc9f43b2f4dbdfcac51fe73e365",
        "address": "0x67431bB9e8a258a4f8D2085609F4138850968D79",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000464e3f471628e162fa34f130f4c3bcc41ff7635d"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x3c8ee9a0f9faa6fac5d97474c7676fab5eab7d2ebb3c0845a5442311cbefea18"
      }
    ],
    "blockNumber": 10274078,
    "cumulativeGasUsed": "10335872",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x114D4603199df73e7D157787f8778E21fCd13066",
    "0xd7a4F6473f32aC2Af804B3686AE8F1932bC35750",
    "0x000000006551c19487814612e58FE06813775758",
    "0x41C8f39463A868d3A88af00cd0fe7102F30E44eC",
    "tokemon",
    "TKMN"
  ],
  "numDeployments": 9,
  "solcInputHash": "5833dcb1d37bbacda064bab911359f7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_publicResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ERC6551Registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ERC6551Implementation\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllTokensMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallMintCharacter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallMintCharacterWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferToTokenERC6551\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxOneTokenPerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOneERC721TokenAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTBAsThatOwnTheCharacterForThatAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Decrypted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Tokemon.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Tokemon.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC6551Implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC6551Registry\",\"outputs\":[{\"internalType\":\"contract IERC6551Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME_WRAPPER\",\"outputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IENSResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseGamingENSNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseGamingENSTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetForCharacterNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"decrypt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"decrypted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_hasAccess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"mintAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"mintCharacter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"enum Tokemon.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC6551Registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ERC6551Implementation\",\"type\":\"address\"}],\"name\":\"updateERC6551Contracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tokemon.sol\":\"Tokemon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"@ensdomains/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"@ensdomains/ens-contracts/contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xf862cd86d749158a554e3cb517efa9097331ec0cf7225117f21e96fb50c67edb\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\n\",\"keccak256\":\"0xdffd96e40500212217d1267d1fa5eb294fe72ce5419638d6801996e0485580b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x7bd5dc796c245d4c52836610455d172cdfcc1f8dcf0d9b1c4cbde212fde02965\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nabstract contract Errors {\\n    error InvalidTokenAmount();\\n    error InvalidTokenSender();\\n    error InsufficientFunds();\\n    error NonExistentToken();\\n    error OnlyOneERC721TokenAllowed();\\n    error InvalidMerkleProof();\\n    error AllTokensMinted();\\n    error MaxOneTokenPerAddress();\\n    error InvalidTokenID();\\n    error CallMintCharacterWhitelist();\\n    error CallMintCharacter();\\n    error NotTokenOwner();\\n    error CannotTransferToTokenERC6551();\\n    error OnlyTBAsThatOwnTheCharacterForThatAsset();\\n}\\n\",\"keccak256\":\"0xf0fead883840f8bd0fc6b330c890617e9b5c29dbcd3a5ee19057a1b206050c95\",\"license\":\"MIT\"},\"contracts/Game.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {BytesUtils} from \\\"@ensdomains/ens-contracts/contracts/wrapper/BytesUtils.sol\\\";\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {ERC6551AccountLib} from \\\"./library/ERC6551AccountLib.sol\\\";\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\nimport {IERC1155Receiver, IERC6551Registry, IENSResolver, INameWrapper, IERC165} from \\\"./interfaces/interfaces.sol\\\";\\n\\nabstract contract Game is IERC1155Receiver, Ownable, ERC721, Errors {\\n    INameWrapper public immutable NAME_WRAPPER;\\n    IENSResolver public immutable PUBLIC_RESOLVER;\\n\\n    bytes32 internal constant ZERO_SALT = bytes32(0);\\n\\n    uint256 CHAIN_ID = block.chainid;\\n\\n    IERC6551Registry public ERC6551Registry;\\n    address public ERC6551Implementation;\\n\\n    uint256 public baseGamingENSTokenID;\\n    bytes32 public baseGamingENSNode;\\n\\n    mapping(bytes32 => mapping(address => bool)) isTokenOwner;\\n\\n    mapping(bytes32 => mapping(address => bytes32)) internal tokenToOwnerOfTokenNode;\\n\\n\\n    constructor(\\n        address _nameWrapper,\\n        address _publicResolver,\\n        address _ERC6551Registry,\\n        address _ERC6551Implementation,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {\\n        NAME_WRAPPER = INameWrapper(_nameWrapper);\\n        PUBLIC_RESOLVER = IENSResolver(_publicResolver);\\n        ERC6551Registry = IERC6551Registry(_ERC6551Registry);\\n        ERC6551Implementation = _ERC6551Implementation;\\n    }\\n\\n    function createSubNode(\\n        bytes32 node,\\n        string memory subNode\\n    ) internal returns (bytes32 newSubNode) {\\n        newSubNode = NAME_WRAPPER.setSubnodeRecord(\\n            // Gaming character subnode\\n            node,\\n            // Character tokenID as sub.subdomain to the gaming character subdomain\\n            subNode,\\n            // Owner\\n            address(this),\\n            // Resolver\\n            address(PUBLIC_RESOLVER),\\n            // TTL\\n            0,\\n            // Fuses\\n            0,\\n            // EXPIRY\\n            0\\n        );\\n    }\\n\\n    function updateERC6551Contracts(\\n        address _ERC6551Registry,\\n        address _ERC6551Implementation\\n    ) external onlyOwner {\\n        ERC6551Registry = IERC6551Registry(_ERC6551Registry);\\n        ERC6551Implementation = _ERC6551Implementation;\\n    }\\n\\n    function getParentNode(bytes memory name) internal pure returns (bytes32) {\\n        (, uint256 offset) = BytesUtils.readLabel(name, 0);\\n        bytes32 parentNode = BytesUtils.namehash(name, offset);\\n        return parentNode;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address /* from */,\\n        uint256 tokenId,\\n        uint256 value,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(NAME_WRAPPER)) {\\n            revert InvalidTokenSender();\\n        }\\n        if (value != 1) {\\n            revert InvalidTokenAmount();\\n        }\\n\\n        if (baseGamingENSTokenID == 0) {\\n            baseGamingENSTokenID = tokenId;\\n            baseGamingENSNode = bytes32(tokenId);\\n        }\\n\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        revert();\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public pure override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n    // Make the possibility to transfer an ERC721 token to the ERC6551 contract that is owned by the owner of the ERC721 token\\n    function checkTransferAllowance(\\n        address _account,\\n        uint256 _tokenId\\n    ) internal view returns (bool) {\\n        // invalid bytecode size then is not a ERC6551\\n        // It will be either an EOA address or a contract address not the ERC6551 proxy contract then allow the transfer\\n        if (_account.code.length != 0xAD) return true;\\n        // Getting the Proxy implementation of the ERC6551\\n        address _implementation = ERC6551AccountLib.implementation(_account);\\n        // implementation does not exist then is not a ERC6551 catching the\\n        // rare case that the contract above had the same bytecode as the ERC6551 proxy allow only EOA addresses because the have no code size\\n        if (_implementation.code.length == 0) return true;\\n        // invalid implementation then is maybe a ERC6551 but not the implementation that we expect\\n        if (_implementation != ERC6551Implementation) return false;\\n        // Getting the deployment params of the ERC6551\\n\\n        (\\n            ,\\n            ,\\n            /* bytes32  _salt */ /* uint256  chainId */ address tokenContract,\\n            uint256 tokenId\\n        ) = ERC6551AccountLib.context(_account);\\n        // If the token ERC721 is not from this contract then allow the transfer\\n        if (tokenContract != address(this)) return true;\\n        // If the token ERC721 is not the one that the ERC6551 is wrapping then allow the transfer\\n        if (tokenId != _tokenId) return true;\\n\\n        return true;\\n    }\\n\\n    function isAllowedToMintAsset(\\n        bytes32 assetNode\\n    ) internal view returns (bool) {\\n        address account = msg.sender;\\n        // invalid bytecode size\\n        if (account.code.length != 0xAD) return false;\\n        address _implementation = ERC6551AccountLib.implementation(account);\\n        // implementation does not exist\\n        if (_implementation.code.length == 0) return false;\\n        // invalid implementation\\n        if (_implementation != ERC6551Implementation) return false;\\n        (\\n            ,\\n            ,\\n            /* bytes32  _salt */ /*uint256  chainId */ address tokenContract,\\n            uint256 tokenId\\n        ) = ERC6551AccountLib.context(account);\\n\\n        bytes32 parentNode = getParentNode(\\n            NAME_WRAPPER.names(bytes32(tokenId))\\n        );\\n\\n        bytes32 expectedParentNode = getParentNode(\\n            NAME_WRAPPER.names(assetNode)\\n        );\\n\\n        return\\n            account ==\\n            ERC6551AccountLib.computeAddress(\\n                address(ERC6551Registry),\\n                ERC6551Implementation,\\n                ZERO_SALT,\\n                CHAIN_ID,\\n                tokenContract,\\n                tokenId\\n            ) &&\\n            parentNode == expectedParentNode &&\\n            tokenContract == address(this);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        if (!checkTransferAllowance(from, tokenId)) {\\n            revert CannotTransferToTokenERC6551();\\n        }\\n        // Explicitly update the isTokenOwner mapping\\n        isTokenOwner[bytes32(tokenId)][to] = true;\\n        isTokenOwner[bytes32(tokenId)][from] = false;\\n\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        if (!checkTransferAllowance(from, tokenId)) {\\n            revert CannotTransferToTokenERC6551();\\n        }\\n        // Explicitly update the isTokenOwner mapping\\n        isTokenOwner[bytes32(tokenId)][to] = true;\\n        isTokenOwner[bytes32(tokenId)][from] = false;\\n\\n        super.transferFrom(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xb8aaea5434acde96c3236533e31557890a393445070571d54843b2d6f2fedb91\",\"license\":\"MIT\"},\"contracts/Tokemon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Game} from \\\"./Game.sol\\\";\\n\\ncontract Tokemon is Game {\\n    enum TokenType {\\n        Character,\\n        Asset\\n    }\\n\\n    struct Token {\\n        TokenType tokenType;\\n        string name;\\n        uint256 maxSupply;\\n        uint256 currentID;\\n        uint256 price;\\n    }\\n\\n    mapping(bytes32 => Token) public tokens;\\n\\n    mapping(bytes32 => bool) public decrypted;\\n\\n    event TokenCreated(\\n        string name,\\n        bytes32 node,\\n        bytes32 parentNode,\\n        uint256 maxSupply,\\n        uint256 price,\\n        TokenType tokenType\\n    );\\n\\n    event TokenMinted(\\n        bytes32 node,\\n        bytes32 parentNode,\\n        address account,\\n        TokenType tokenType\\n    );\\n\\n    event Decrypted(bytes32 node, address account);\\n\\n    constructor(\\n        address _nameWrapper,\\n        address _publicResolver,\\n        address _ERC6551Registry,\\n        address _ERC6551Implementation,\\n        string memory _name,\\n        string memory _symbol\\n    )\\n        Game(\\n            _nameWrapper,\\n            _publicResolver,\\n            _ERC6551Registry,\\n            _ERC6551Implementation,\\n            _name,\\n            _symbol\\n        )\\n    {}\\n\\n    function createCharacter(\\n        string memory _name,\\n        string memory _value,\\n        uint256 _maxSupply,\\n        uint256 _price\\n    ) external onlyOwner {\\n        bytes32 _newSubNodeCharacter = createSubNode(baseGamingENSNode, _name);\\n\\n        PUBLIC_RESOLVER.setText(_newSubNodeCharacter, \\\"CID\\\", _value);\\n\\n        tokens[_newSubNodeCharacter] = Token({\\n            tokenType: TokenType.Character,\\n            name: _name,\\n            maxSupply: _maxSupply,\\n            currentID: 1,\\n            price: _price\\n        });\\n\\n        emit TokenCreated(\\n            _name,\\n            _newSubNodeCharacter,\\n            baseGamingENSNode,\\n            _maxSupply,\\n            _price,\\n            TokenType.Character\\n        );\\n    }\\n\\n    function createAsset(\\n        bytes32 assetForCharacterNode,\\n        string memory _name,\\n        string memory _value,\\n        uint256 _maxSupply,\\n        uint256 _price\\n    ) external onlyOwner {\\n        Token memory _token = tokens[assetForCharacterNode];\\n        if (_token.tokenType != TokenType.Character) revert InvalidTokenID();\\n        if (_token.currentID == 0) revert NonExistentToken();\\n\\n        bytes32 _newSubNodeCharacterAsset = createSubNode(\\n            assetForCharacterNode,\\n            _name\\n        );\\n\\n        PUBLIC_RESOLVER.setText(_newSubNodeCharacterAsset, \\\"CID\\\", _value);\\n\\n        tokens[_newSubNodeCharacterAsset] = Token({\\n            tokenType: TokenType.Asset,\\n            name: _name,\\n            maxSupply: _maxSupply,\\n            currentID: 1,\\n            price: _price\\n        });\\n\\n        emit TokenCreated(\\n            _name,\\n            _newSubNodeCharacterAsset,\\n            assetForCharacterNode,\\n            _maxSupply,\\n            _price,\\n            TokenType.Asset\\n        );\\n    }\\n\\n    function mintCharacter(bytes32 _node) external payable {\\n        Token memory _token = tokens[_node];\\n\\n        if (_token.tokenType != TokenType.Character) revert InvalidTokenID();\\n\\n        uint256 _tokenId = _token.currentID;\\n\\n        checkMintAllowance(_node, _tokenId);\\n\\n        bytes32 _newCharacterNode = createSubNode(\\n            _node,\\n            Strings.toString(_tokenId)\\n        );\\n\\n        uint256 _newCharacterTokenID = uint256(_newCharacterNode);\\n\\n        _mint(msg.sender, _newCharacterTokenID);\\n\\n        address _TBA = ERC6551Registry.createAccount(\\n            ERC6551Implementation,\\n            ZERO_SALT,\\n            CHAIN_ID,\\n            address(this),\\n            _newCharacterTokenID\\n        );\\n\\n        tokenToOwnerOfTokenNode[_node][msg.sender] = _newCharacterNode;\\n\\n        isTokenOwner[_node][msg.sender] = true;\\n\\n        _token.currentID++;\\n\\n        emit TokenMinted(_newCharacterNode, _node, _TBA, TokenType.Character);\\n    }\\n\\n    // MAKE THE ASSETS BE LIKE ASETNAME.CHARIZARD.GAME.ETH\\n    // WHEN SOMEONE MINTS ONE WE REQUIRE ONLY THE TBA TOKEN TO BE ABLE TO MINT THE ASSET\\n    // TO DO THAT WE NEED TO CHECK THAT THE SENDER IS A TBA AND THAT TBA IS FROM A TOKEN ID SUCH AS\\n    // X.CHARIZARD.GAME.ETH\\n    // WE CAN DO THAT BY CHECKING THAT THE NODE THE TBA WHANTS TO MINT COMES FROM  CHARIZARD AND THAT THE\\n    // ASSET IS FROM THE CHARIZARD.GAME.ETH DOMAIN\\n    function mintAsset(bytes32 _node) external payable {\\n        Token memory _token = tokens[_node];\\n\\n        if (_token.tokenType != TokenType.Asset) revert InvalidTokenID();\\n\\n        if (isAllowedToMintAsset(_node)) {\\n            revert OnlyTBAsThatOwnTheCharacterForThatAsset();\\n        }\\n\\n        uint256 _tokenId = _token.currentID;\\n\\n        checkMintAllowance(_node, _tokenId);\\n\\n        bytes32 _newAssetNode = createSubNode(\\n            _node,\\n            Strings.toString(_tokenId)\\n        );\\n\\n        uint256 _newAssetTokenID = uint256(_newAssetNode);\\n\\n        _mint(msg.sender, _newAssetTokenID);\\n\\n        isTokenOwner[_node][msg.sender] = true;\\n\\n        _token.currentID++;\\n\\n        emit TokenMinted(_newAssetNode, _node, address(0), TokenType.Asset);\\n    }\\n\\n    function checkMintAllowance(\\n        bytes32 _node,\\n        uint256 _CurrentTokenId\\n    ) internal view {\\n        // Insufficient funds\\n        if (msg.value < tokens[_node].price) {\\n            revert InsufficientFunds();\\n        }\\n\\n        // Only one token per address\\n        if (isTokenOwner[_node][msg.sender]) {\\n            revert MaxOneTokenPerAddress();\\n        }\\n        // Non existent token\\n        if (_CurrentTokenId == 0) {\\n            revert NonExistentToken();\\n        }\\n        // All tokens currentID\\n        if (_CurrentTokenId > tokens[_node].maxSupply) {\\n            revert AllTokensMinted();\\n        }\\n    }\\n\\n    function tokenURI(\\n        uint256 _tokenID\\n    ) public view override returns (string memory) {\\n        bytes32 _node = bytes32(_tokenID);\\n\\n        bytes memory tokenName = NAME_WRAPPER.names(_node);\\n\\n        bytes32 parentNode = getParentNode(tokenName);\\n\\n        string memory _metadataCID = PUBLIC_RESOLVER.text(parentNode, \\\"CID\\\");\\n\\n        return _metadataCID;\\n    }\\n\\n    function decrypt(bytes32 _node) external {\\n        if (ownerOf(uint256(_node)) != msg.sender) revert NotTokenOwner();\\n\\n        decrypted[_node] = true;\\n\\n        emit Decrypted(_node, msg.sender);\\n    }\\n\\n    function hasAccess(\\n        bytes32 _tokenNode,\\n        address _account\\n    ) external view returns (bool _hasAccess) {\\n\\n        bytes32 tokenSubNode = tokenToOwnerOfTokenNode[_tokenNode][_account];\\n\\n        if(tokenSubNode == bytes32(0)) return false;    \\n\\n        _hasAccess =\\n            isTokenOwner[_tokenNode][_account] &&\\n            decrypted[tokenSubNode];\\n    }\\n\\n    // NEEDS TO GET REMOVED ONLY FOR TESTING\\n    function transferDomain(address recipient) public onlyOwner {\\n        PUBLIC_RESOLVER.setAddr(baseGamingENSNode, recipient);\\n        NAME_WRAPPER.safeTransferFrom(\\n            address(this),\\n            recipient,\\n            baseGamingENSTokenID,\\n            1,\\n            \\\"\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe6fbb9f40d35283dd5c7e4c58d193776a631384775f50594fed6e7d92ca0c990\",\"license\":\"MIT\"},\"contracts/interfaces/interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport {INameWrapper} from \\\"@ensdomains/ens-contracts/contracts/wrapper/INameWrapper.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC6551Registry} from \\\"erc6551/interfaces/IERC6551Registry.sol\\\";\\n\\ninterface IENSResolver {\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) external;\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x042fe1174d59955d4642500b80bd4d1b850b141c129e900015a58aa30bc792ad\",\"license\":\"MIT\"},\"contracts/library/ERC6551AccountLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"erc6551/lib/ERC6551BytecodeLib.sol\\\";\\n\\nlibrary ERC6551AccountLib {\\n    function computeAddress(\\n        address registry,\\n        address _implementation,\\n        bytes32 _salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) internal pure returns (address) {\\n        bytes32 bytecodeHash = keccak256(\\n            ERC6551BytecodeLib.getCreationCode(\\n                _implementation,\\n                _salt,\\n                chainId,\\n                tokenContract,\\n                tokenId\\n            )\\n        );\\n        return Create2.computeAddress(_salt, bytecodeHash, registry);\\n    }\\n\\n    function implementation(\\n        address account\\n    ) internal view returns (address _implementation) {\\n        assembly {\\n            // copy proxy implementation (0x14 bytes)\\n            extcodecopy(account, 0xC, 0xA, 0x14)\\n            _implementation := mload(0x00)\\n        }\\n    }\\n    function implementation() internal view returns (address _implementation) {\\n        return implementation(address(this));\\n    }\\n    function token(\\n        address account\\n    ) internal view returns (uint256, address, uint256) {\\n        bytes memory encodedData = new bytes(0x60);\\n        assembly {\\n            // copy 0x60 bytes from end of context\\n            extcodecopy(account, add(encodedData, 0x20), 0x4d, 0x60)\\n        }\\n        return abi.decode(encodedData, (uint256, address, uint256));\\n    }\\n    function token() internal view returns (uint256, address, uint256) {\\n        return token(address(this));\\n    }\\n    function salt(address account) internal view returns (bytes32) {\\n        bytes memory encodedData = new bytes(0x20);\\n        assembly {\\n            // copy 0x20 bytes from beginning of context\\n            extcodecopy(account, add(encodedData, 0x20), 0x2d, 0x20)\\n        }\\n        return abi.decode(encodedData, (bytes32));\\n    }\\n    function salt() internal view returns (bytes32) {\\n        return salt(address(this));\\n    }\\n    function context(\\n        address account\\n    ) internal view returns (bytes32, uint256, address, uint256) {\\n        bytes memory encodedData = new bytes(0x80);\\n        assembly {\\n            // copy full context (0x80 bytes)\\n            extcodecopy(account, add(encodedData, 0x20), 0x2D, 0x80)\\n        }\\n        return abi.decode(encodedData, (bytes32, uint256, address, uint256));\\n    }\\n\\n    function context()\\n        internal\\n        view\\n        returns (bytes32, uint256, address, uint256)\\n    {\\n        return context(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x69a74986d6de256e1bff61c37e2026538b049aebdf6502885e96a05f44a67e5b\",\"license\":\"MIT\"},\"erc6551/interfaces/IERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\\n     */\\n    event ERC6551AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\\n     */\\n    error AccountCreationFailed();\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * Emits ERC6551AccountCreated event.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address account);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external view returns (address account);\\n}\\n\",\"keccak256\":\"0x871be5b51883d915c0b871cb0baf7bbddd41a2b2e42ae109b922c6418ee7141b\",\"license\":\"MIT\"},\"erc6551/lib/ERC6551BytecodeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary ERC6551BytecodeLib {\\n    /**\\n     * @dev Returns the creation code of the token bound account for a non-fungible token.\\n     *\\n     * @return result The creation code of the token bound account\\n     */\\n    function getCreationCode(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) internal pure returns (bytes memory result) {\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer\\n            // Layout the variables and bytecode backwards\\n            mstore(add(result, 0xb7), tokenId)\\n            mstore(add(result, 0x97), shr(96, shl(96, tokenContract)))\\n            mstore(add(result, 0x77), chainId)\\n            mstore(add(result, 0x57), salt)\\n            mstore(add(result, 0x37), 0x5af43d82803e903d91602b57fd5bf3)\\n            mstore(add(result, 0x28), implementation)\\n            mstore(add(result, 0x14), 0x3d60ad80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(result, 0xb7) // Store the length\\n            mstore(0x40, add(result, 0xd7)) // Allocate the memory\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the create2 address computed from `salt`, `bytecodeHash`, `deployer`.\\n     *\\n     * @return result The create2 address computed from `salt`, `bytecodeHash`, `deployer`\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer)\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer\\n            mstore8(result, 0xff)\\n            mstore(add(result, 0x35), bytecodeHash)\\n            mstore(add(result, 0x01), shl(96, deployer))\\n            mstore(add(result, 0x15), salt)\\n            result := keccak256(result, 0x55)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc6a20fb273cbe33fa8d9591aaeb6a9f24b8fd9944f8d0017f4bf5b26614731f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052466007553480156200001557600080fd5b50604051620038b1380380620038b18339810160408190526200003891620001e3565b85858585858581816200004b33620000b1565b600162000059838262000326565b50600262000068828262000326565b5050506001600160a01b03958616608052505091831660a052600880549184166001600160a01b03199283161790556009805492909316911617905550620003f2945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200011957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014657600080fd5b81516001600160401b03808211156200016357620001636200011e565b604051601f8301601f19908116603f011681019082821181831017156200018e576200018e6200011e565b81604052838152602092508683858801011115620001ab57600080fd5b600091505b83821015620001cf5785820183015181830184015290820190620001b0565b600093810190920192909252949350505050565b60008060008060008060c08789031215620001fd57600080fd5b620002088762000101565b9550620002186020880162000101565b9450620002286040880162000101565b9350620002386060880162000101565b60808801519093506001600160401b03808211156200025657600080fd5b620002648a838b0162000134565b935060a08901519150808211156200027b57600080fd5b506200028a89828a0162000134565b9150509295509295509295565b600181811c90821680620002ac57607f821691505b602082108103620002cd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032157600081815260208120601f850160051c81016020861015620002fc5750805b601f850160051c820191505b818110156200031d5782815560010162000308565b5050505b505050565b81516001600160401b038111156200034257620003426200011e565b6200035a8162000353845462000297565b84620002d3565b602080601f831160018114620003925760008415620003795750858301515b600019600386901b1c1916600185901b1785556200031d565b600085815260208120601f198616915b82811015620003c357888601518255948401946001909101908401620003a2565b5085821015620003e25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05161344c62000465600039600081816106ac01528181610b430152818161106a01528181611479015281816116900152611e4f0152600081816102d201528181611109015281816113ef0152818161180201528181611b7501528181611bfb0152611e1c015261344c6000f3fe6080604052600436106101f95760003560e01c80638da5cb5b1161010d578063c87b56dd116100a0578063eb9da6141161006f578063eb9da61414610624578063f23a6e611461063a578063f2fde38b1461065a578063fde114191461067a578063ffeb4a301461069a57600080fd5b8063c87b56dd1461057b578063c8c59d061461059b578063db0979d8146105bb578063e985e9c5146105db57600080fd5b8063a22cb465116100dc578063a22cb465146104e7578063adbcef1114610507578063b88d4fde14610527578063bc197c811461054757600080fd5b80638da5cb5b14610463578063904194a31461048157806395d89b41146104b25780639fc137e0146104c757600080fd5b8063329c8cda116101905780636352211e1161015f5780636352211e146103ce57806370a08231146103ee578063715018a61461040e578063822118461461042357806383177db31461044357600080fd5b8063329c8cda1461034b57806342842e0e1461036b5780634838fbac1461038b578063620144951461039e57600080fd5b8063192cf07d116101cc578063192cf07d146102c057806323b872dd146102f45780632b79d5d3146103145780632bcfe4a91461032757600080fd5b806301ffc9a7146101fe57806306fdde0314610244578063081812fc14610266578063095ea7b31461029e575b600080fd5b34801561020a57600080fd5b5061022f6102193660046128c9565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561025057600080fd5b506102596106ce565b60405161023b9190612936565b34801561027257600080fd5b50610286610281366004612949565b610760565b6040516001600160a01b03909116815260200161023b565b3480156102aa57600080fd5b506102be6102b9366004612977565b610787565b005b3480156102cc57600080fd5b506102867f000000000000000000000000000000000000000000000000000000000000000081565b34801561030057600080fd5b506102be61030f3660046129a3565b6108a1565b6102be610322366004612949565b610913565b34801561033357600080fd5b5061033d600b5481565b60405190815260200161023b565b34801561035757600080fd5b506102be610366366004612aaf565b610b13565b34801561037757600080fd5b506102be6103863660046129a3565b610c9a565b6102be610399366004612949565b610cb5565b3480156103aa57600080fd5b5061022f6103b9366004612949565b600f6020526000908152604090205460ff1681565b3480156103da57600080fd5b506102866103e9366004612949565b610f39565b3480156103fa57600080fd5b5061033d610409366004612b22565b610f9f565b34801561041a57600080fd5b506102be611025565b34801561042f57600080fd5b506102be61043e366004612b22565b611039565b34801561044f57600080fd5b5061022f61045e366004612b3f565b61116c565b34801561046f57600080fd5b506000546001600160a01b0316610286565b34801561048d57600080fd5b506104a161049c366004612949565b6111e6565b60405161023b959493929190612ba7565b3480156104be57600080fd5b506102596112a1565b3480156104d357600080fd5b506102be6104e2366004612949565b6112b0565b3480156104f357600080fd5b506102be610502366004612be4565b611349565b34801561051357600080fd5b50600854610286906001600160a01b031681565b34801561053357600080fd5b506102be610542366004612c17565b611358565b34801561055357600080fd5b506105626101f9366004612d22565b6040516001600160e01b0319909116815260200161023b565b34801561058757600080fd5b50610259610596366004612949565b6113d1565b3480156105a757600080fd5b50600954610286906001600160a01b031681565b3480156105c757600080fd5b506102be6105d6366004612de0565b611512565b3480156105e757600080fd5b5061022f6105f6366004612e5e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b34801561063057600080fd5b5061033d600a5481565b34801561064657600080fd5b50610562610655366004612e8c565b6117f5565b34801561066657600080fd5b506102be610675366004612b22565b611889565b34801561068657600080fd5b506102be610695366004612e5e565b611902565b3480156106a657600080fd5b506102867f000000000000000000000000000000000000000000000000000000000000000081565b6060600180546106dd90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461070990612f07565b80156107565780601f1061072b57610100808354040283529160200191610756565b820191906000526020600020905b81548152906001019060200180831161073957829003601f168201915b5050505050905090565b600061076b82611938565b506000908152600560205260409020546001600160a01b031690565b600061079282610f39565b9050806001600160a01b0316836001600160a01b0316036108045760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610820575061082081336105f6565b6108925760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107fb565b61089c8383611997565b505050565b6108ab8382611a05565b6108c8576040516346d8067760e11b815260040160405180910390fd5b6000818152600c602090815260408083206001600160a01b03868116855292528083208054600160ff199182161790915591861683529091208054909116905561089c838383611ab7565b6000818152600e6020526040808220815160a081019092528054829060ff16600181111561094357610943612b6f565b600181111561095457610954612b6f565b815260200160018201805461096890612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461099490612f07565b80156109e15780601f106109b6576101008083540402835291602001916109e1565b820191906000526020600020905b8154815290600101906020018083116109c457829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546060909101529050600181516001811115610a2057610a20612b6f565b14610a3e57604051636aa2a93760e01b815260040160405180910390fd5b610a4782611ae8565b15610a65576040516321950f8960e21b815260040160405180910390fd5b6060810151610a748382611cb0565b6000610a8884610a8384611d70565b611e02565b905080610a953382611ec7565b6000858152600c602090815260408083203384529091529020805460ff1916600117905560608401805190610ac982612f57565b815250507f2184cb358304bd67d5aeddbbce48951dfb1153d8db22b4337433def83909a3bf828660006001604051610b049493929190612f70565b60405180910390a15050505050565b610b1b612052565b6000610b29600b5486611e02565b60405163043c4ea360e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906310f13a8c90610b7a9084908890600401612fa3565b600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050506040518060a0016040528060006001811115610bca57610bca612b6f565b81526020018681526020018481526020016001815260200183815250600e600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836001811115610c2357610c23612b6f565b021790555060208201516001820190610c3c908261302c565b506040820151816002015560608201518160030155608082015181600401559050507fabad37c018660310ba1eaaa17a7e59eac7d485d3d6f3f550c12aa28c3d8327d58582600b5486866000604051610b04969594939291906130eb565b61089c83838360405180602001604052806000815250611358565b6000818152600e6020526040808220815160a081019092528054829060ff166001811115610ce557610ce5612b6f565b6001811115610cf657610cf6612b6f565b8152602001600182018054610d0a90612f07565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3690612f07565b8015610d835780601f10610d5857610100808354040283529160200191610d83565b820191906000526020600020905b815481529060010190602001808311610d6657829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546060909101529050600081516001811115610dc257610dc2612b6f565b14610de057604051636aa2a93760e01b815260040160405180910390fd5b6060810151610def8382611cb0565b6000610dfe84610a8384611d70565b905080610e0b3382611ec7565b600854600954600754604051638a54c52f60e01b81526001600160a01b03928316600482015260006024820181905260448201929092523060648201526084810185905290929190911690638a54c52f9060a4016020604051808303816000875af1158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea29190613130565b6000878152600d60209081526040808320338085529083528184208890558a8452600c83528184209084529091529020805460ff19166001179055606086018051919250610eef82612f57565b815250507f2184cb358304bd67d5aeddbbce48951dfb1153d8db22b4337433def83909a3bf8387836000604051610f299493929190612f70565b60405180910390a1505050505050565b6000818152600360205260408120546001600160a01b031680610f995760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107fb565b92915050565b60006001600160a01b0382166110095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107fb565b506001600160a01b031660009081526004602052604090205490565b61102d612052565b61103760006120ac565b565b611041612052565b600b5460405162d5fa2b60e81b815260048101919091526001600160a01b0382811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063d5fa2b0090604401600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b5050600a54604051637921219560e11b81523060048201526001600160a01b03858116602483015260448201929092526001606482015260a06084820152600060a48201527f0000000000000000000000000000000000000000000000000000000000000000909116925063f242432a915060c401600060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b5050505050565b6000828152600d602090815260408083206001600160a01b03851684529091528120548061119e576000915050610f99565b6000848152600c602090815260408083206001600160a01b038716845290915290205460ff1680156111de57506000818152600f602052604090205460ff165b949350505050565b600e602052600090815260409020805460018201805460ff909216929161120c90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461123890612f07565b80156112855780601f1061125a57610100808354040283529160200191611285565b820191906000526020600020905b81548152906001019060200180831161126857829003601f168201915b5050505050908060020154908060030154908060040154905085565b6060600280546106dd90612f07565b336112ba82610f39565b6001600160a01b0316146112e1576040516359dc379f60e01b815260040160405180910390fd5b6000818152600f602052604090819020805460ff19166001179055517f96f608e449dd99cb90e1ce2905957b1d6347c80a37fe2d73d40a41501777177b9061133e90839033909182526001600160a01b0316602082015260400190565b60405180910390a150565b6113543383836120fc565b5050565b6113628483611a05565b61137f576040516346d8067760e11b815260040160405180910390fd5b6000828152600c602090815260408083206001600160a01b03878116855292528083208054600160ff19918216179091559187168352909120805490911690556113cb848484846121ca565b50505050565b6040516320c38e2b60e01b81526004810182905260609082906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906320c38e2b90602401600060405180830381865afa15801561143e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611466919081019061317d565b90506000611473826121fc565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166359d1d43c836040518263ffffffff1660e01b81526004016114c391906131c5565b600060405180830381865afa1580156114e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611508919081019061317d565b9695505050505050565b61151a612052565b6000858152600e6020526040808220815160a081019092528054829060ff16600181111561154a5761154a612b6f565b600181111561155b5761155b612b6f565b815260200160018201805461156f90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461159b90612f07565b80156115e85780601f106115bd576101008083540402835291602001916115e8565b820191906000526020600020905b8154815290600101906020018083116115cb57829003601f168201915b50505091835250506002820154602082015260038201546040820152600490910154606090910152905060008151600181111561162757611627612b6f565b1461164557604051636aa2a93760e01b815260040160405180910390fd5b806060015160000361166a57604051634a1850bf60e11b815260040160405180910390fd5b60006116768787611e02565b60405163043c4ea360e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906310f13a8c906116c79084908990600401612fa3565b600060405180830381600087803b1580156116e157600080fd5b505af11580156116f5573d6000803e3d6000fd5b505050506040518060a0016040528060018081111561171657611716612b6f565b81526020018781526020018581526020016001815260200184815250600e600083815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600181111561176f5761176f612b6f565b021790555060208201516001820190611788908261302c565b506040820151816002015560608201518160030155608082015181600401559050507fabad37c018660310ba1eaaa17a7e59eac7d485d3d6f3f550c12aa28c3d8327d5868289878760016040516117e4969594939291906130eb565b60405180910390a150505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461184057604051634a93b62160e11b815260040160405180910390fd5b8360011461186157604051632160733960e01b815260040160405180910390fd5b600a5460000361187657600a859055600b8590555b5063f23a6e6160e01b9695505050505050565b611891612052565b6001600160a01b0381166118f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107fb565b6118ff816120ac565b50565b61190a612052565b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b6000818152600360205260409020546001600160a01b03166118ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107fb565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119cc82610f39565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000826001600160a01b03163b60ad14611a2157506001610f99565b6000611a2c84612219565b9050806001600160a01b03163b600003611a4a576001915050610f99565b6009546001600160a01b03828116911614611a69576000915050610f99565b600080611a758661222b565b909450925050506001600160a01b0382163014611a985760019350505050610f99565b848114611aab5760019350505050610f99565b50600195945050505050565b611ac13382612283565b611add5760405162461bcd60e51b81526004016107fb906131ee565b61089c838383612301565b60003360ad813b14611afd5750600092915050565b6000611b0882612219565b9050806001600160a01b03163b600003611b26575060009392505050565b6009546001600160a01b03828116911614611b45575060009392505050565b600080611b518461222b565b6040516320c38e2b60e01b815260048101829052919550935060009250611bf291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906320c38e2b906024015b600060405180830381865afa158015611bc5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bed919081019061317d565b6121fc565b90506000611c477f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166320c38e2b8a6040518263ffffffff1660e01b8152600401611ba891815260200190565b600854600954600754929350611c71926001600160a01b0392831692909116906000908888612465565b6001600160a01b0316866001600160a01b0316148015611c9057508082145b8015611ca457506001600160a01b03841630145b98975050505050505050565b6000828152600e6020526040902060040154341015611ce25760405163356680b760e01b815260040160405180910390fd5b6000828152600c6020908152604080832033845290915290205460ff1615611d1d576040516350c3f0c160e11b815260040160405180910390fd5b80600003611d3e57604051634a1850bf60e11b815260040160405180910390fd5b6000828152600e602052604090206002015481111561135457604051634db085a760e01b815260040160405180910390fd5b60606000611d7d836124e3565b60010190506000816001600160401b03811115611d9c57611d9c6129e4565b6040519080825280601f01601f191660200182016040528015611dc6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611dd057509392505050565b6040516309306bd160e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906324c1af4490611e7d908690869030907f00000000000000000000000000000000000000000000000000000000000000009088908190819060040161323b565b6020604051808303816000875af1158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec0919061329b565b9392505050565b6001600160a01b038216611f1d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107fb565b6000818152600360205260409020546001600160a01b031615611f825760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107fb565b6000818152600360205260409020546001600160a01b031615611fe75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107fb565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000546001600160a01b031633146110375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03160361215d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107fb565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6121d43383612283565b6121f05760405162461bcd60e51b81526004016107fb906131ee565b6113cb848484846125bb565b60008061220a8360006125ee565b91505060006111de84836126a5565b60006014600a600c843c505060005190565b60408051608080825260a0820190925260009182918291829182916020820181803683370190505090506080602d60208301883c8080602001905181019061227391906132b4565b9450945094509450509193509193565b60008061228f83610f39565b9050806001600160a01b0316846001600160a01b031614806122d657506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b806111de5750836001600160a01b03166122ef84610760565b6001600160a01b031614949350505050565b826001600160a01b031661231482610f39565b6001600160a01b03161461233a5760405162461bcd60e51b81526004016107fb906132f3565b6001600160a01b03821661239c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107fb565b826001600160a01b03166123af82610f39565b6001600160a01b0316146123d55760405162461bcd60e51b81526004016107fb906132f3565b600081815260056020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260048552838620805460001901905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040805160b78082018490526001600160a01b038516609783015260778201869052605782018790526e5af43d82803e903d91602b57fd5bf3603783015260288201889052733d60ad80600a3d3981f3363d3d373d3d3d363d736014830152815260d781019091528051602090910120600090611ca486828a612764565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106125225772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061254e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061256c57662386f26fc10000830492506010015b6305f5e1008310612584576305f5e100830492506008015b612710831061259857612710830492506004015b606483106125aa576064830492506002015b600a8310610f995760010192915050565b6125c6848484612301565b6125d28484848461278e565b6113cb5760405162461bcd60e51b81526004016107fb90613338565b600080835183106126415760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064016107fb565b60008484815181106126555761265561338a565b016020015160f81c905080156126815761267a856126748660016133a0565b8361288f565b9250612686565b600092505b61269081856133a0565b61269b9060016133a0565b9150509250929050565b60008060006126b485856125ee565b90925090508161272657600185516126cc91906133b3565b841461271a5760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d6500000060448201526064016107fb565b5060009150610f999050565b61273085826126a5565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b60006001600160a01b0384163b1561288457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906127d29033908990889088906004016133c6565b6020604051808303816000875af192505050801561280d575060408051601f3d908101601f1916820190925261280a918101906133f9565b60015b61286a573d80801561283b576040519150601f19603f3d011682016040523d82523d6000602084013e612840565b606091505b5080516000036128625760405162461bcd60e51b81526004016107fb90613338565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111de565b506001949350505050565b825160009061289e83856133a0565b11156128a957600080fd5b5091016020012090565b6001600160e01b0319811681146118ff57600080fd5b6000602082840312156128db57600080fd5b8135611ec0816128b3565b60005b838110156129015781810151838201526020016128e9565b50506000910152565b600081518084526129228160208601602086016128e6565b601f01601f19169290920160200192915050565b602081526000611ec0602083018461290a565b60006020828403121561295b57600080fd5b5035919050565b6001600160a01b03811681146118ff57600080fd5b6000806040838503121561298a57600080fd5b823561299581612962565b946020939093013593505050565b6000806000606084860312156129b857600080fd5b83356129c381612962565b925060208401356129d381612962565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a2257612a226129e4565b604052919050565b60006001600160401b03821115612a4357612a436129e4565b50601f01601f191660200190565b6000612a64612a5f84612a2a565b6129fa565b9050828152838383011115612a7857600080fd5b828260208301376000602084830101529392505050565b600082601f830112612aa057600080fd5b611ec083833560208501612a51565b60008060008060808587031215612ac557600080fd5b84356001600160401b0380821115612adc57600080fd5b612ae888838901612a8f565b95506020870135915080821115612afe57600080fd5b50612b0b87828801612a8f565b949794965050505060408301359260600135919050565b600060208284031215612b3457600080fd5b8135611ec081612962565b60008060408385031215612b5257600080fd5b823591506020830135612b6481612962565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110612ba357634e487b7160e01b600052602160045260246000fd5b9052565b612bb18187612b85565b60a060208201526000612bc760a083018761290a565b604083019590955250606081019290925260809091015292915050565b60008060408385031215612bf757600080fd5b8235612c0281612962565b915060208301358015158114612b6457600080fd5b60008060008060808587031215612c2d57600080fd5b8435612c3881612962565b93506020850135612c4881612962565b92506040850135915060608501356001600160401b03811115612c6a57600080fd5b8501601f81018713612c7b57600080fd5b612c8a87823560208401612a51565b91505092959194509250565b60008083601f840112612ca857600080fd5b5081356001600160401b03811115612cbf57600080fd5b6020830191508360208260051b8501011115612cda57600080fd5b9250929050565b60008083601f840112612cf357600080fd5b5081356001600160401b03811115612d0a57600080fd5b602083019150836020828501011115612cda57600080fd5b60008060008060008060008060a0898b031215612d3e57600080fd5b8835612d4981612962565b97506020890135612d5981612962565b965060408901356001600160401b0380821115612d7557600080fd5b612d818c838d01612c96565b909850965060608b0135915080821115612d9a57600080fd5b612da68c838d01612c96565b909650945060808b0135915080821115612dbf57600080fd5b50612dcc8b828c01612ce1565b999c989b5096995094979396929594505050565b600080600080600060a08688031215612df857600080fd5b8535945060208601356001600160401b0380821115612e1657600080fd5b612e2289838a01612a8f565b95506040880135915080821115612e3857600080fd5b50612e4588828901612a8f565b9598949750949560608101359550608001359392505050565b60008060408385031215612e7157600080fd5b8235612e7c81612962565b91506020830135612b6481612962565b60008060008060008060a08789031215612ea557600080fd5b8635612eb081612962565b95506020870135612ec081612962565b9450604087013593506060870135925060808701356001600160401b03811115612ee957600080fd5b612ef589828a01612ce1565b979a9699509497509295939492505050565b600181811c90821680612f1b57607f821691505b602082108103612f3b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612f6957612f69612f41565b5060010190565b848152602081018490526001600160a01b038316604082015260808101612f9a6060830184612b85565b95945050505050565b828152606060208201526000612fcc60608301600381526210d25160ea1b602082015260400190565b8281036040840152612f9a818561290a565b601f82111561089c57600081815260208120601f850160051c810160208610156130055750805b601f850160051c820191505b8181101561302457828155600101613011565b505050505050565b81516001600160401b03811115613045576130456129e4565b613059816130538454612f07565b84612fde565b602080601f83116001811461308e57600084156130765750858301515b600019600386901b1c1916600185901b178555613024565b600085815260208120601f198616915b828110156130bd5788860151825594840194600190910190840161309e565b50858210156130db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60c0815260006130fe60c083018961290a565b905086602083015285604083015284606083015283608083015261312560a0830184612b85565b979650505050505050565b60006020828403121561314257600080fd5b8151611ec081612962565b600061315b612a5f84612a2a565b905082815283838301111561316f57600080fd5b611ec08360208301846128e6565b60006020828403121561318f57600080fd5b81516001600160401b038111156131a557600080fd5b8201601f810184136131b657600080fd5b6111de8482516020840161314d565b818152604060208201526000611ec060408301600381526210d25160ea1b602082015260400190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b87815260e06020820152600061325460e083018961290a565b6001600160a01b0397881660408401529590961660608201526001600160401b03938416608082015263ffffffff9290921660a083015290911660c0909101529392505050565b6000602082840312156132ad57600080fd5b5051919050565b600080600080608085870312156132ca57600080fd5b845193506020850151925060408501516132e381612962565b6060959095015193969295505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b80820180821115610f9957610f99612f41565b81810381811115610f9957610f99612f41565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115089083018461290a565b60006020828403121561340b57600080fd5b8151611ec0816128b356fea26469706673582212205a1aa90952d33618f600aeec9fae96026c33e262e66f24278b32b76a6fc5808264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80638da5cb5b1161010d578063c87b56dd116100a0578063eb9da6141161006f578063eb9da61414610624578063f23a6e611461063a578063f2fde38b1461065a578063fde114191461067a578063ffeb4a301461069a57600080fd5b8063c87b56dd1461057b578063c8c59d061461059b578063db0979d8146105bb578063e985e9c5146105db57600080fd5b8063a22cb465116100dc578063a22cb465146104e7578063adbcef1114610507578063b88d4fde14610527578063bc197c811461054757600080fd5b80638da5cb5b14610463578063904194a31461048157806395d89b41146104b25780639fc137e0146104c757600080fd5b8063329c8cda116101905780636352211e1161015f5780636352211e146103ce57806370a08231146103ee578063715018a61461040e578063822118461461042357806383177db31461044357600080fd5b8063329c8cda1461034b57806342842e0e1461036b5780634838fbac1461038b578063620144951461039e57600080fd5b8063192cf07d116101cc578063192cf07d146102c057806323b872dd146102f45780632b79d5d3146103145780632bcfe4a91461032757600080fd5b806301ffc9a7146101fe57806306fdde0314610244578063081812fc14610266578063095ea7b31461029e575b600080fd5b34801561020a57600080fd5b5061022f6102193660046128c9565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561025057600080fd5b506102596106ce565b60405161023b9190612936565b34801561027257600080fd5b50610286610281366004612949565b610760565b6040516001600160a01b03909116815260200161023b565b3480156102aa57600080fd5b506102be6102b9366004612977565b610787565b005b3480156102cc57600080fd5b506102867f000000000000000000000000000000000000000000000000000000000000000081565b34801561030057600080fd5b506102be61030f3660046129a3565b6108a1565b6102be610322366004612949565b610913565b34801561033357600080fd5b5061033d600b5481565b60405190815260200161023b565b34801561035757600080fd5b506102be610366366004612aaf565b610b13565b34801561037757600080fd5b506102be6103863660046129a3565b610c9a565b6102be610399366004612949565b610cb5565b3480156103aa57600080fd5b5061022f6103b9366004612949565b600f6020526000908152604090205460ff1681565b3480156103da57600080fd5b506102866103e9366004612949565b610f39565b3480156103fa57600080fd5b5061033d610409366004612b22565b610f9f565b34801561041a57600080fd5b506102be611025565b34801561042f57600080fd5b506102be61043e366004612b22565b611039565b34801561044f57600080fd5b5061022f61045e366004612b3f565b61116c565b34801561046f57600080fd5b506000546001600160a01b0316610286565b34801561048d57600080fd5b506104a161049c366004612949565b6111e6565b60405161023b959493929190612ba7565b3480156104be57600080fd5b506102596112a1565b3480156104d357600080fd5b506102be6104e2366004612949565b6112b0565b3480156104f357600080fd5b506102be610502366004612be4565b611349565b34801561051357600080fd5b50600854610286906001600160a01b031681565b34801561053357600080fd5b506102be610542366004612c17565b611358565b34801561055357600080fd5b506105626101f9366004612d22565b6040516001600160e01b0319909116815260200161023b565b34801561058757600080fd5b50610259610596366004612949565b6113d1565b3480156105a757600080fd5b50600954610286906001600160a01b031681565b3480156105c757600080fd5b506102be6105d6366004612de0565b611512565b3480156105e757600080fd5b5061022f6105f6366004612e5e565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b34801561063057600080fd5b5061033d600a5481565b34801561064657600080fd5b50610562610655366004612e8c565b6117f5565b34801561066657600080fd5b506102be610675366004612b22565b611889565b34801561068657600080fd5b506102be610695366004612e5e565b611902565b3480156106a657600080fd5b506102867f000000000000000000000000000000000000000000000000000000000000000081565b6060600180546106dd90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461070990612f07565b80156107565780601f1061072b57610100808354040283529160200191610756565b820191906000526020600020905b81548152906001019060200180831161073957829003601f168201915b5050505050905090565b600061076b82611938565b506000908152600560205260409020546001600160a01b031690565b600061079282610f39565b9050806001600160a01b0316836001600160a01b0316036108045760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610820575061082081336105f6565b6108925760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016107fb565b61089c8383611997565b505050565b6108ab8382611a05565b6108c8576040516346d8067760e11b815260040160405180910390fd5b6000818152600c602090815260408083206001600160a01b03868116855292528083208054600160ff199182161790915591861683529091208054909116905561089c838383611ab7565b6000818152600e6020526040808220815160a081019092528054829060ff16600181111561094357610943612b6f565b600181111561095457610954612b6f565b815260200160018201805461096890612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461099490612f07565b80156109e15780601f106109b6576101008083540402835291602001916109e1565b820191906000526020600020905b8154815290600101906020018083116109c457829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546060909101529050600181516001811115610a2057610a20612b6f565b14610a3e57604051636aa2a93760e01b815260040160405180910390fd5b610a4782611ae8565b15610a65576040516321950f8960e21b815260040160405180910390fd5b6060810151610a748382611cb0565b6000610a8884610a8384611d70565b611e02565b905080610a953382611ec7565b6000858152600c602090815260408083203384529091529020805460ff1916600117905560608401805190610ac982612f57565b815250507f2184cb358304bd67d5aeddbbce48951dfb1153d8db22b4337433def83909a3bf828660006001604051610b049493929190612f70565b60405180910390a15050505050565b610b1b612052565b6000610b29600b5486611e02565b60405163043c4ea360e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906310f13a8c90610b7a9084908890600401612fa3565b600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b505050506040518060a0016040528060006001811115610bca57610bca612b6f565b81526020018681526020018481526020016001815260200183815250600e600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836001811115610c2357610c23612b6f565b021790555060208201516001820190610c3c908261302c565b506040820151816002015560608201518160030155608082015181600401559050507fabad37c018660310ba1eaaa17a7e59eac7d485d3d6f3f550c12aa28c3d8327d58582600b5486866000604051610b04969594939291906130eb565b61089c83838360405180602001604052806000815250611358565b6000818152600e6020526040808220815160a081019092528054829060ff166001811115610ce557610ce5612b6f565b6001811115610cf657610cf6612b6f565b8152602001600182018054610d0a90612f07565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3690612f07565b8015610d835780601f10610d5857610100808354040283529160200191610d83565b820191906000526020600020905b815481529060010190602001808311610d6657829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546060909101529050600081516001811115610dc257610dc2612b6f565b14610de057604051636aa2a93760e01b815260040160405180910390fd5b6060810151610def8382611cb0565b6000610dfe84610a8384611d70565b905080610e0b3382611ec7565b600854600954600754604051638a54c52f60e01b81526001600160a01b03928316600482015260006024820181905260448201929092523060648201526084810185905290929190911690638a54c52f9060a4016020604051808303816000875af1158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea29190613130565b6000878152600d60209081526040808320338085529083528184208890558a8452600c83528184209084529091529020805460ff19166001179055606086018051919250610eef82612f57565b815250507f2184cb358304bd67d5aeddbbce48951dfb1153d8db22b4337433def83909a3bf8387836000604051610f299493929190612f70565b60405180910390a1505050505050565b6000818152600360205260408120546001600160a01b031680610f995760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107fb565b92915050565b60006001600160a01b0382166110095760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016107fb565b506001600160a01b031660009081526004602052604090205490565b61102d612052565b61103760006120ac565b565b611041612052565b600b5460405162d5fa2b60e81b815260048101919091526001600160a01b0382811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063d5fa2b0090604401600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b5050600a54604051637921219560e11b81523060048201526001600160a01b03858116602483015260448201929092526001606482015260a06084820152600060a48201527f0000000000000000000000000000000000000000000000000000000000000000909116925063f242432a915060c401600060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b5050505050565b6000828152600d602090815260408083206001600160a01b03851684529091528120548061119e576000915050610f99565b6000848152600c602090815260408083206001600160a01b038716845290915290205460ff1680156111de57506000818152600f602052604090205460ff165b949350505050565b600e602052600090815260409020805460018201805460ff909216929161120c90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461123890612f07565b80156112855780601f1061125a57610100808354040283529160200191611285565b820191906000526020600020905b81548152906001019060200180831161126857829003601f168201915b5050505050908060020154908060030154908060040154905085565b6060600280546106dd90612f07565b336112ba82610f39565b6001600160a01b0316146112e1576040516359dc379f60e01b815260040160405180910390fd5b6000818152600f602052604090819020805460ff19166001179055517f96f608e449dd99cb90e1ce2905957b1d6347c80a37fe2d73d40a41501777177b9061133e90839033909182526001600160a01b0316602082015260400190565b60405180910390a150565b6113543383836120fc565b5050565b6113628483611a05565b61137f576040516346d8067760e11b815260040160405180910390fd5b6000828152600c602090815260408083206001600160a01b03878116855292528083208054600160ff19918216179091559187168352909120805490911690556113cb848484846121ca565b50505050565b6040516320c38e2b60e01b81526004810182905260609082906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906320c38e2b90602401600060405180830381865afa15801561143e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611466919081019061317d565b90506000611473826121fc565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166359d1d43c836040518263ffffffff1660e01b81526004016114c391906131c5565b600060405180830381865afa1580156114e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611508919081019061317d565b9695505050505050565b61151a612052565b6000858152600e6020526040808220815160a081019092528054829060ff16600181111561154a5761154a612b6f565b600181111561155b5761155b612b6f565b815260200160018201805461156f90612f07565b80601f016020809104026020016040519081016040528092919081815260200182805461159b90612f07565b80156115e85780601f106115bd576101008083540402835291602001916115e8565b820191906000526020600020905b8154815290600101906020018083116115cb57829003601f168201915b50505091835250506002820154602082015260038201546040820152600490910154606090910152905060008151600181111561162757611627612b6f565b1461164557604051636aa2a93760e01b815260040160405180910390fd5b806060015160000361166a57604051634a1850bf60e11b815260040160405180910390fd5b60006116768787611e02565b60405163043c4ea360e21b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906310f13a8c906116c79084908990600401612fa3565b600060405180830381600087803b1580156116e157600080fd5b505af11580156116f5573d6000803e3d6000fd5b505050506040518060a0016040528060018081111561171657611716612b6f565b81526020018781526020018581526020016001815260200184815250600e600083815260200190815260200160002060008201518160000160006101000a81548160ff0219169083600181111561176f5761176f612b6f565b021790555060208201516001820190611788908261302c565b506040820151816002015560608201518160030155608082015181600401559050507fabad37c018660310ba1eaaa17a7e59eac7d485d3d6f3f550c12aa28c3d8327d5868289878760016040516117e4969594939291906130eb565b60405180910390a150505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461184057604051634a93b62160e11b815260040160405180910390fd5b8360011461186157604051632160733960e01b815260040160405180910390fd5b600a5460000361187657600a859055600b8590555b5063f23a6e6160e01b9695505050505050565b611891612052565b6001600160a01b0381166118f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107fb565b6118ff816120ac565b50565b61190a612052565b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b6000818152600360205260409020546001600160a01b03166118ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016107fb565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119cc82610f39565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000826001600160a01b03163b60ad14611a2157506001610f99565b6000611a2c84612219565b9050806001600160a01b03163b600003611a4a576001915050610f99565b6009546001600160a01b03828116911614611a69576000915050610f99565b600080611a758661222b565b909450925050506001600160a01b0382163014611a985760019350505050610f99565b848114611aab5760019350505050610f99565b50600195945050505050565b611ac13382612283565b611add5760405162461bcd60e51b81526004016107fb906131ee565b61089c838383612301565b60003360ad813b14611afd5750600092915050565b6000611b0882612219565b9050806001600160a01b03163b600003611b26575060009392505050565b6009546001600160a01b03828116911614611b45575060009392505050565b600080611b518461222b565b6040516320c38e2b60e01b815260048101829052919550935060009250611bf291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906320c38e2b906024015b600060405180830381865afa158015611bc5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bed919081019061317d565b6121fc565b90506000611c477f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166320c38e2b8a6040518263ffffffff1660e01b8152600401611ba891815260200190565b600854600954600754929350611c71926001600160a01b0392831692909116906000908888612465565b6001600160a01b0316866001600160a01b0316148015611c9057508082145b8015611ca457506001600160a01b03841630145b98975050505050505050565b6000828152600e6020526040902060040154341015611ce25760405163356680b760e01b815260040160405180910390fd5b6000828152600c6020908152604080832033845290915290205460ff1615611d1d576040516350c3f0c160e11b815260040160405180910390fd5b80600003611d3e57604051634a1850bf60e11b815260040160405180910390fd5b6000828152600e602052604090206002015481111561135457604051634db085a760e01b815260040160405180910390fd5b60606000611d7d836124e3565b60010190506000816001600160401b03811115611d9c57611d9c6129e4565b6040519080825280601f01601f191660200182016040528015611dc6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611dd057509392505050565b6040516309306bd160e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906324c1af4490611e7d908690869030907f00000000000000000000000000000000000000000000000000000000000000009088908190819060040161323b565b6020604051808303816000875af1158015611e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec0919061329b565b9392505050565b6001600160a01b038216611f1d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107fb565b6000818152600360205260409020546001600160a01b031615611f825760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107fb565b6000818152600360205260409020546001600160a01b031615611fe75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107fb565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000546001600160a01b031633146110375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107fb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03160361215d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107fb565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6121d43383612283565b6121f05760405162461bcd60e51b81526004016107fb906131ee565b6113cb848484846125bb565b60008061220a8360006125ee565b91505060006111de84836126a5565b60006014600a600c843c505060005190565b60408051608080825260a0820190925260009182918291829182916020820181803683370190505090506080602d60208301883c8080602001905181019061227391906132b4565b9450945094509450509193509193565b60008061228f83610f39565b9050806001600160a01b0316846001600160a01b031614806122d657506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b806111de5750836001600160a01b03166122ef84610760565b6001600160a01b031614949350505050565b826001600160a01b031661231482610f39565b6001600160a01b03161461233a5760405162461bcd60e51b81526004016107fb906132f3565b6001600160a01b03821661239c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107fb565b826001600160a01b03166123af82610f39565b6001600160a01b0316146123d55760405162461bcd60e51b81526004016107fb906132f3565b600081815260056020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260048552838620805460001901905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6040805160b78082018490526001600160a01b038516609783015260778201869052605782018790526e5af43d82803e903d91602b57fd5bf3603783015260288201889052733d60ad80600a3d3981f3363d3d373d3d3d363d736014830152815260d781019091528051602090910120600090611ca486828a612764565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106125225772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061254e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061256c57662386f26fc10000830492506010015b6305f5e1008310612584576305f5e100830492506008015b612710831061259857612710830492506004015b606483106125aa576064830492506002015b600a8310610f995760010192915050565b6125c6848484612301565b6125d28484848461278e565b6113cb5760405162461bcd60e51b81526004016107fb90613338565b600080835183106126415760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064016107fb565b60008484815181106126555761265561338a565b016020015160f81c905080156126815761267a856126748660016133a0565b8361288f565b9250612686565b600092505b61269081856133a0565b61269b9060016133a0565b9150509250929050565b60008060006126b485856125ee565b90925090508161272657600185516126cc91906133b3565b841461271a5760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d6500000060448201526064016107fb565b5060009150610f999050565b61273085826126a5565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b60006001600160a01b0384163b1561288457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906127d29033908990889088906004016133c6565b6020604051808303816000875af192505050801561280d575060408051601f3d908101601f1916820190925261280a918101906133f9565b60015b61286a573d80801561283b576040519150601f19603f3d011682016040523d82523d6000602084013e612840565b606091505b5080516000036128625760405162461bcd60e51b81526004016107fb90613338565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111de565b506001949350505050565b825160009061289e83856133a0565b11156128a957600080fd5b5091016020012090565b6001600160e01b0319811681146118ff57600080fd5b6000602082840312156128db57600080fd5b8135611ec0816128b3565b60005b838110156129015781810151838201526020016128e9565b50506000910152565b600081518084526129228160208601602086016128e6565b601f01601f19169290920160200192915050565b602081526000611ec0602083018461290a565b60006020828403121561295b57600080fd5b5035919050565b6001600160a01b03811681146118ff57600080fd5b6000806040838503121561298a57600080fd5b823561299581612962565b946020939093013593505050565b6000806000606084860312156129b857600080fd5b83356129c381612962565b925060208401356129d381612962565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612a2257612a226129e4565b604052919050565b60006001600160401b03821115612a4357612a436129e4565b50601f01601f191660200190565b6000612a64612a5f84612a2a565b6129fa565b9050828152838383011115612a7857600080fd5b828260208301376000602084830101529392505050565b600082601f830112612aa057600080fd5b611ec083833560208501612a51565b60008060008060808587031215612ac557600080fd5b84356001600160401b0380821115612adc57600080fd5b612ae888838901612a8f565b95506020870135915080821115612afe57600080fd5b50612b0b87828801612a8f565b949794965050505060408301359260600135919050565b600060208284031215612b3457600080fd5b8135611ec081612962565b60008060408385031215612b5257600080fd5b823591506020830135612b6481612962565b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b60028110612ba357634e487b7160e01b600052602160045260246000fd5b9052565b612bb18187612b85565b60a060208201526000612bc760a083018761290a565b604083019590955250606081019290925260809091015292915050565b60008060408385031215612bf757600080fd5b8235612c0281612962565b915060208301358015158114612b6457600080fd5b60008060008060808587031215612c2d57600080fd5b8435612c3881612962565b93506020850135612c4881612962565b92506040850135915060608501356001600160401b03811115612c6a57600080fd5b8501601f81018713612c7b57600080fd5b612c8a87823560208401612a51565b91505092959194509250565b60008083601f840112612ca857600080fd5b5081356001600160401b03811115612cbf57600080fd5b6020830191508360208260051b8501011115612cda57600080fd5b9250929050565b60008083601f840112612cf357600080fd5b5081356001600160401b03811115612d0a57600080fd5b602083019150836020828501011115612cda57600080fd5b60008060008060008060008060a0898b031215612d3e57600080fd5b8835612d4981612962565b97506020890135612d5981612962565b965060408901356001600160401b0380821115612d7557600080fd5b612d818c838d01612c96565b909850965060608b0135915080821115612d9a57600080fd5b612da68c838d01612c96565b909650945060808b0135915080821115612dbf57600080fd5b50612dcc8b828c01612ce1565b999c989b5096995094979396929594505050565b600080600080600060a08688031215612df857600080fd5b8535945060208601356001600160401b0380821115612e1657600080fd5b612e2289838a01612a8f565b95506040880135915080821115612e3857600080fd5b50612e4588828901612a8f565b9598949750949560608101359550608001359392505050565b60008060408385031215612e7157600080fd5b8235612e7c81612962565b91506020830135612b6481612962565b60008060008060008060a08789031215612ea557600080fd5b8635612eb081612962565b95506020870135612ec081612962565b9450604087013593506060870135925060808701356001600160401b03811115612ee957600080fd5b612ef589828a01612ce1565b979a9699509497509295939492505050565b600181811c90821680612f1b57607f821691505b602082108103612f3b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612f6957612f69612f41565b5060010190565b848152602081018490526001600160a01b038316604082015260808101612f9a6060830184612b85565b95945050505050565b828152606060208201526000612fcc60608301600381526210d25160ea1b602082015260400190565b8281036040840152612f9a818561290a565b601f82111561089c57600081815260208120601f850160051c810160208610156130055750805b601f850160051c820191505b8181101561302457828155600101613011565b505050505050565b81516001600160401b03811115613045576130456129e4565b613059816130538454612f07565b84612fde565b602080601f83116001811461308e57600084156130765750858301515b600019600386901b1c1916600185901b178555613024565b600085815260208120601f198616915b828110156130bd5788860151825594840194600190910190840161309e565b50858210156130db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60c0815260006130fe60c083018961290a565b905086602083015285604083015284606083015283608083015261312560a0830184612b85565b979650505050505050565b60006020828403121561314257600080fd5b8151611ec081612962565b600061315b612a5f84612a2a565b905082815283838301111561316f57600080fd5b611ec08360208301846128e6565b60006020828403121561318f57600080fd5b81516001600160401b038111156131a557600080fd5b8201601f810184136131b657600080fd5b6111de8482516020840161314d565b818152604060208201526000611ec060408301600381526210d25160ea1b602082015260400190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b87815260e06020820152600061325460e083018961290a565b6001600160a01b0397881660408401529590961660608201526001600160401b03938416608082015263ffffffff9290921660a083015290911660c0909101529392505050565b6000602082840312156132ad57600080fd5b5051919050565b600080600080608085870312156132ca57600080fd5b845193506020850151925060408501516132e381612962565b6060959095015193969295505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b80820180821115610f9957610f99612f41565b81810381811115610f9957610f99612f41565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906115089083018461290a565b60006020828403121561340b57600080fd5b8151611ec0816128b356fea26469706673582212205a1aa90952d33618f600aeec9fae96026c33e262e66f24278b32b76a6fc5808264736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 784,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1084,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1086,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1090,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1094,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1098,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1104,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4509,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "CHAIN_ID",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4512,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "ERC6551Registry",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC6551Registry)6026"
      },
      {
        "astId": 4514,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "ERC6551Implementation",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4516,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "baseGamingENSTokenID",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4518,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "baseGamingENSNode",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 4524,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "isTokenOwner",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4530,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "tokenToOwnerOfTokenNode",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bytes32))"
      },
      {
        "astId": 5039,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "tokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(Token)5034_storage)"
      },
      {
        "astId": 5043,
        "contract": "contracts/Tokemon.sol:Tokemon",
        "label": "decrypted",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC6551Registry)6026": {
        "encoding": "inplace",
        "label": "contract IERC6551Registry",
        "numberOfBytes": "20"
      },
      "t_enum(TokenType)5022": {
        "encoding": "inplace",
        "label": "enum Tokemon.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes32)"
      },
      "t_mapping(t_bytes32,t_struct(Token)5034_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Tokemon.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)5034_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Token)5034_storage": {
        "encoding": "inplace",
        "label": "struct Tokemon.Token",
        "members": [
          {
            "astId": 5025,
            "contract": "contracts/Tokemon.sol:Tokemon",
            "label": "tokenType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TokenType)5022"
          },
          {
            "astId": 5027,
            "contract": "contracts/Tokemon.sol:Tokemon",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5029,
            "contract": "contracts/Tokemon.sol:Tokemon",
            "label": "maxSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5031,
            "contract": "contracts/Tokemon.sol:Tokemon",
            "label": "currentID",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5033,
            "contract": "contracts/Tokemon.sol:Tokemon",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
